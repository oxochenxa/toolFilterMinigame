{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///canvas-datagrid.js","webpack:///webpack/bootstrap dea47f3e3909cafff598","webpack:///./lib/defaults.js","webpack:///./lib/main.js","webpack:///./lib/component.js","webpack:///./lib/draw.js","webpack:///./lib/events.js","webpack:///./lib/touch.js","webpack:///./lib/intf.js","webpack:///./lib/contextMenu.js","webpack:///./lib/dom.js","webpack:///./lib/publicMethods.js"],"names":["root","factory","exports","module","define","amd","self","this","modules","__webpack_require__","moduleId","installedModules","i","l","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","n","__esModule","object","property","prototype","hasOwnProperty","p","s","__WEBPACK_AMD_DEFINE_ARRAY__","__WEBPACK_AMD_DEFINE_RESULT__","undefined","defaults","attributes","styles","apply","context","component","Grid","args","isComponent","isChildGrid","parentNode","test","nodeType","intf","eval","document","createElement","applyComponentStyle","hyphenateProperty","dehyphenateProperty","createGrid","forEach","shadowRoot","attachShadow","mode","init","Array","slice","arguments","window","HTMLElement","create","customElements","observedAttributes","getObservableAttributes","disconnectedCallback","attributeChangedCallback","connectedCallback","adoptedCallback","canvasDatagrid","require","tKeys","keys","argKey","indexOf","tKey","sKey","data","appendChild","getDefaultItem","base","item","filter","toLowerCase","typeMap","prop","replace","nextLetterCap","char","toUpperCase","cust","supressChangeAndDrawEvents","cStyle","getComputedStyle","tagName","canvas","defs","computedStyle","def","val","getPropertyValue","setStyleProperty","dispatchEvent","requestAnimationFrame","resize","style","strData","JSON","parse","e","Error","schema","strSchema","number","strNum","parseInt","isNaN","boolean","strBool","string","str","attrs","attr","push","connected","parentDOMNode","innerHTML","observe","attrName","oldVal","newVal","tfn","dataType","addEventListener","observer","MutationObserver","mutations","checkInnerHTML","checkStyle","mutation","attributeName","target","nodeName","addedNodes","length","type","characterData","childList","subtree","querySelectorAll","el","fillArray","low","high","step","x","drawPerfLine","w","h","y","perfArr","arrIndex","max","color","useAbs","r","canvasOffsetLeft","canvasOffsetTop","ctx","beginPath","moveTo","cx","cy","Math","abs","lineTo","strokeStyle","stroke","drawOnAllImagesLoaded","loaded","htmlImageCache","html","complete","cachedImagesDrawn","draw","drawHtml","cell","img","v","formattedValue","cacheKey","toString","rowIndex","columnIndex","height","width","drawImage","Image","onload","src","btoa","drawOrderByArrow","mt","columnHeaderOrderByArrowMarginTop","scale","ml","columnHeaderOrderByArrowMarginLeft","mr","columnHeaderOrderByArrowMarginRight","aw","columnHeaderOrderByArrowWidth","ah","columnHeaderOrderByArrowHeight","fillStyle","columnHeaderOrderByArrowColor","columnHeaderOrderByArrowBorderColor","orderDirection","fill","drawTreeArrow","treeArrowMarginTop","treeArrowMarginRight","treeArrowMarginLeft","treeArrowWidth","treeArrowHeight","treeArrowColor","treeArrowBorderColor","openChildren","radiusRect","radius","b","quadraticCurveTo","fillRect","strokeRect","fillText","text","fillCircle","arc","PI","strokeCircle","clipFrozenArea","lastFrozenColumnPixel","lastFrozenRowPixel","clip","fillHandle","selectionHandleType","strokeHandle","addselectionHandle","pos","hw","selectionHandleSize","tr","br","tl","bl","addBorderLine","t","wrapText","splitChar","lines","value","calculatedLineHeight","word","elWidth","plWidth","clippedVal","previousLine","words","split","textHeight","wrap","cellWhiteSpace","et","ellipsisText","line","cHeight","paddedHeight","measureText","measure","paddedWidth","splice","originText","stepLength","direction","substr","drawText","fontHeight","lineHeight","vPos","hPos","paddingLeft","orderByArrowWidth","horizontalAlignment","paddingRight","verticalAlignment","paddingBottom","lineSpacing","offsetLeft","offsetTop","debug","active","font","debugFont","debugColor","stringify","pw","idx","idx_ord","sortColumnIndex","map","getFrozenColumnsWidth","column","getSchema","min","frozenColumn","hiddenFrozenColumnCount","hidden","getColummnWidth","perfCounters","drawCount","perfWindowSize","entityCount","scrollDebugCounters","touchPPSCounters","internal","createHandlesOverlayArray","allowMovingSelection","mobile","selectionBorderTop","selectionBorderRight","selectionHandles","selectionHandle","selectionBorderLeft","selectionBorderBottom","selectionHandleBehavior","createBorderOverlayArray","drawArray","propPrefix","offsetPoint","selectionBorder","isRowHeader","selections","isHeader","drawCell","rowOrderIndex","header","headerIndex","columnOrderIndex","cellGridAttributes","cellStyle","isCorner","isColumnHeader","selected","hovered","hovers","activeCell","isColumnHeaderCellCap","rawValue","isGrid","activeHeader","orders","rows","columns","f","formatters","orderByArrowSize","treeArrowSize","cellWidth","sizes","ev","row","cellBorderWidth","visibleRows","paddingTop","whiteSpace","cellLineHeight","cellLineSpacing","scrollTop","scrollBox","scrollLeft","cellHeight","offsetWidth","offsetHeight","offsetParent","rowOpen","sortRowIndex","isNormal","gridId","parentGrid","title","userHeight","rowHeight","userWidth","cornerCell","visibleCells","unshift","lineWidth","cellHeightWithChildGrid","checkScrollHeight","cellWidthWithChildGrid","save","tree","showRowNumbers","childGrids","saveAppearance","cellGridHeight","grid","visible","orderBy","console","warn","columnFilters","filterTextPrefix","aCell","selectionBorders","movingSelection","moveBorders","moveOffset","restore","bc","drawRowHeader","rowData","index","a","showRowHeaders","rowHeaderCell","rowHeaderCellWidth","drawRow","treeHeight","rowSansTreeHeight","g","rd","trees","scrollIndexRight","scrollPixelRight","scrollPixelLeft","treeGrid","scrollBarWidth","rowHeaders","visibleRowHeights","gridBorderCollapse","u","currentCell","columnHeaderCellHeight","getColumnHeaderCellHeight","getRowHeaderCellWidth","performance","now","createRowOrders","gridBackgroundColor","ln","frozenRow","allowFreezingRows","frozenMarkerBorderWidth","frozenMarkerWidth","snapToRow","scrollPixelTop","scrollIndexTop","scrollIndexBottom","scrollPixelBottom","showNewRow","scrollIndexLeft","newRow","cl","selectionMode","activeCellOverlayBorderWidth","activeCellOverlayBorderColor","getHeaderWidth","drawHeaderColumnRange","start","end","order","columnHeaderCell","nonFrozenHeaderWidth","rArgs","rhIndex","showColumnHeaders","columnHeaderCellBorderWidth","isColumnHeaderCell","endCap","my","mx","xHover","yHover","allowFreezingColumns","frozenMarkerHoverColor","frozenMarkerColor","frozenMarkerHoverBorderColor","frozenMarkerBorderColor","freezeMarkerPosition","frozenMarkerActiveColor","frozenMarkerActiveBorderColor","dragMode","selectionHandleBorderWidth","selectionHandleBorderColor","selectionHandleColor","az","touchSelectHandleZone","ax","ay","reorderObject","dragOffset","reorderMarkerBackgroundColor","reorderMarkerBorderWidth","reorderMarkerBorderColor","reorderMarkerIndexBorderWidth","reorderMarkerIndexBorderColor","reorderTarget","moveOverlayBorderWidth","moveOverlayBorderColor","setLineDash","moveOverlayBorderSegments","gridBorderWidth","gridBorderColor","dsb","selectionOverlayBorderWidth","selectionOverlayBorderColor","drawCorner","en","entities","scrollBarBoxMargin","scrollBarBorderColor","scrollBarBorderWidth","horizontalBox","horizontalBar","scrollBoxWidth","scrollWidth","verticalBox","verticalBar","scrollBoxHeight","scrollHeight","horizontalBarVisible","scrollBarBackgroundColor","scrollBarBoxColor","horizontalBoxVisible","scrollBarActiveColor","scrollBarBoxBorderRadius","verticalBarVisible","verticalBoxVisible","scrollBarCornerBorderColor","scrollBarCornerBackgroundColor","corner","showPerformance","pop","perf","reduce","toFixed","perfDelta","frozenColumnsWidth","htmlImages","startScale","scaleDelta","zoomDeltaStart","touchLength","touches","touchPosition","touchPosition1","scrollIndex","scrollPixel","canvasOffset","touchDelta","touchAnimateTo","scrollAnimation","touchPPS","xPPS","yPPS","touchPPST","xPPST","yPPST","touchDuration","pointerLockPosition","size","mouse","touch","touchStart","hasFocus","dragContext","textAlign","debugBackgroundColor","key","dpl","ph","px","py","debugPerfChartTextColor","debugPerfChartBackground","debugScrollHeightColor","debugScrollWidthColor","debugPerformanceColor","debugEntitiesColor","debugTouchPPSXColor","debugTouchPPSYColor","wheeling","stopPropagation","fn","events","removeEventListener","sfn","preventDefault","defaultPrevented","getRatio","maxPixelRatio","devicePixelRatio","webkitBackingStorePixelRatio","mozBackingStorePixelRatio","msBackingStorePixelRatio","oBackingStorePixelRatio","backingStorePixelRatio","drawAfterResize","checkScrollBoxVisibility","dataWidth","overflowX","dataHeight","overflowY","setScrollBoxSize","setCanvasSize","dims","cellBorder","dim","appliedInlineStyles","parentNodeStyle","isComponet","vb","nb","co","isScrollBoxCorner","sbw","ratio","bm","columnHeaderCellBorder","ch","scrollCache","accumulator","va","top","left","widthBoxRatio","heightBoxRatio","scrollBarBoxMinSize","scrollBarBoxWidth","bar","box","page","pageUpDownOverlap","resizeEditInput","scroll","dontDraw","floor","ellipsisCache","mousemove","overridePos","contextMenu","input","getLayerPos","dragBounds","sBounds","delta","ctrl","ctrlKey","metaKey","persistantSelectionMode","getCellAt","NativeEvent","previousCell","clearTimeout","scrollTimer","isInGrid","rowBoundaryCrossed","columnBoundaryCrossed","cellBoundaryCrossed","prefix","draggingItem","scrollModes","dragItem","cursor","selecting","dragStart","dragStartObject","shiftKey","bottom","right","getSelectionBounds","ignoreNextClick","dragAddToSelection","selectRow","selectionBounds","selectArea","autoScrollZone","click","checkSelectionChange","sb","startingBounds","getSelectedData","endEdit","setActiveCell","selectAll","columnHeaderClickBehavior","selectColumn","treeArrowClickRadius","toggleTree","dragResizeColumn","resizingStartingWidth","resizingStartingHeight","minColumnWidth","minRowHeight","resizeScrollZone","resizeChildGrids","globalRowResize","stopDragResize","body","setStorageData","scrollGrid","scrollPointerLock","scrollStartMode","movementX","movementY","scrollMode","scrollStart","setTimeout","scrollRepeatRate","selectionScrollIncrement","stopScrollGrid","exitPointerLock","dragReorder","columReorder","rowReorder","allowColumnReordering","allowRowReordering","source","reorderDeadZone","stopDragReorder","oIndex","tIndex","cr","row-reorder","column-reorder","dragMove","stopDragMove","moveSelection","freezeMove","stopFreezeMove","startFreezeMove","mousedown","lastMouseDownTarget","button","move","freeze","requestPointerLock","concat","dragging","mouseup","controlInput","focus","getAdjacentCells","first","last","keydown","adjacentCells","cols","keyCode","beginEditAt","Number","scrollIntoView","selectionFollowsActiveCell","selectedData","keyup","keypress","dblclick","fitColumnToValues","autosize","scrollWheel","deltaX","deltaY","deltaMode","touchHaltAnimation","scrollTo","pasteItem","clipData","mimeType","normalizeRowData","importingRow","existingRow","offsetX","isArray","colKey","substring","sel","cellData","colIndex","cName","getVisibleSchema","yi","getNextVisibleColumnIndex","visibleColumnIndex","getVisibleColumnIndexOf","paste","clipboardData","items","dti","getAsString","cut","copy","forEachSelectedCell","colName","htmlSafe","fCopyCell","addHeaders","headers","useHtml","hVal","join","addCellValue","trRow","textRow","outputHeaderKeys","tableRows","textRows","outputHeaders","sData","rowKeys","sSorted","setData","touchMove","touchScroll","rScrollZone","bScrollZone","tScrollZone","lScrollZone","touchScrollTimeout","rw","t1","t2","changedTouches","getTouchPos","touchDeadZone","touchContextTimeout","touchZoomSensitivity","touchZoomMin","touchZoomMax","zoomAltered","selectionScrollZone","calculatePPS","touchScrollStart","stopAnimation","animationFrames","touchSelecting","startingCell","touchSelect","touchMoving","touchIndex","rect","getBoundingClientRect","clientX","clientY","easingFunctions","linear","easeInQuad","easeOutQuad","easeInOutQuad","easeInCubic","easeOutCubic","easeInOutCubic","easeInQuart","easeOutQuart","easeInOutQuart","easeInQuint","easeOutQuint","easeInOutQuint","easing","touchEasingMethod","calculatePPSTimed","touchSigmaTimed","touchSigma","touchEndAnimation","touchReleaseAnimationDurationMs","touchEditCell","touchCell","clearInterval","calculatePPSTimer","touchingCell","editCell","touchstart","disposeContextMenu","touchStartEvent","touchStart1","contextmenuEvent","touchContextMenuTimeMs","setInterval","touchEndEvents","touchmove","passive","touchend","touchcancel","handleType","bounds","dz","touchReleaseAcceleration","scrollAnimationPPSThreshold","ctor","treeGridAttributes","storageName","invalidSearchExpClass","localStyleLibraryStorageKey","orderings","add","sortFunction","col","sort","filters","currentFilter","sorters","parsers","schemaHashes","changes","componentL1Events","eventNames","expandToRow","orderedIndex","visibility","localStorage","setItem","tempSchema","createColumnOrders","applyDefaultValue","defaultValue","createNewRowData","getSchemaNameHash","applyFilter","refreshFromOrigialData","getHeaderByName","applyDataTransforms","getBestGuessDataType","columnName","drawChildGrids","gridKey","setTimer","originalData","validateColumn","setDefaults","obj1","obj2","setAttributes","setStyle","findColumnMaxTextLength","dispose","removeChild","eventParent","contextmenu","disconnect","tryLoadStoredSettings","reloadStoredValues","storedSettings","getDomRoot","host","getFontName","fontStyle","getFontHeight","parseFloat","parseStyleValue","initProp","propName","getStyleProperty","styleKeys","supressDrawAndEvent","isDim","getItem","message","addStyleKeyIfNoneExists","initialized","publicStyleKeyIntf","initScrollBox","setDom","ie","navigator","userAgent","edge","webKit","moz","cursorGrab","cursorGrabing","cursorGrabbing","appendTo","getVisibleCellByIndex","clearChangeLog","gotoCell","gotoRow","findColumnScrollLeft","findRowScrollTop","isCellVisible","isRowVisible","isColumnVisible","clipElement","getSchemaFromData","setFilter","expandTree","collapseTree","insertRow","deleteRow","addRow","insertColumn","deleteColumn","addColumn","getClippingRect","setRowHeight","setColumnWidth","resetColumnWidths","resetRowHeights","selectNone","assertPxColor","clearPxColorAssertions","integerToAlpha","DOMStyles","set","valueObject","filterFor","String","filterRegExp","regEnd","pattern","exec","flags","flagLength","invalidFilterRegEx","RegExp","toLocaleUpperCase","innerText","textContent","blur","TypeError","currentCursor","find","eventName","RangeError","getTypes","parseInnerHtml","callback","etl","autoGenerateSchema","autoResizeColumns","setScrollTop","preventScrollEvent","setScrollLeft","sHeight","sWidth","supressDrawEvent","applyContextItemStyle","contextItemContainer","createInlineStyle","createContextMenu","parentContextMenu","createItems","removeChildContext","relatedTarget","container","childMenuArrow","contains","children","setAttribute","contextAddCallback","getAttribute","cPos","childContextMenuMarginLeft","childContextMenuMarginTop","createChildContext","addContent","content","childContextMenuArrowHTML","clickIndex","Event","checkArrowVisibility","upArrow","downArrow","startHoverScroll","contextHoverScrollAmount","hoverScrollTimeout","contextHoverScrollRateMs","endHoverScroll","selectedIndex","loc","scrollOffset","zIndexTop","contextMenuZIndex","position","contextMenuArrowColor","zIndex","inputDropdown","maxHeight","innerHeight","autocompleteBottomMargin","minWidth","contextMenuArrowUpHTML","contextMenuArrowDownHTML","contextMenuWindowMargin","innerWidth","isFinite","createFilterContextMenuItems","checkRegExpErrorState","filterInput","background","contextFilterInputBackground","contextFilterInputColor","contextFilterInvalidRegExpBackground","contextFilterInvalidRegExpColor","fillAutoComplete","count","autoCompleteItems","maxAutoCompleteItems","disposeAutocomplete","createAutoCompleteContext","iRect","autoCompleteContext","filterContainer","filterLabel","filterAutoCompleteButton","onclick","filterOptionText","contextFilterButtonHTML","cf","removeFilterOptionText","addDefaultContextMenuItem","isNormalCell","isBackground","isScrollBar","showFilter","showCopy","copyText","execCommand","showPaste","clipBoardData","pasteText","showColumnSelector","columnSelectorText","toggleColumnVisibility","columnSelectorHiddenText","columnSelectorVisibleText","hideColumnText","showClearSettingsOption","clearSettingsOptionText","columnWidth","allowSorting","showOrderByOption","showOrderByOptionTextAsc","showOrderByOptionTextDesc","createDiposeEvent","contextPosition","contextMenuMarginLeft","contextMenuMarginTop","mobileContextMenuMargin","ele","boundingRect","eleRect","clipRect","parentRect","Infinity","scrollingElement","borderWidth","mobileEditInputHeight","cellPaddingLeft","ignoreScrollOffset","abort","abortEdit","newValue","oldValue","aborted","editable","enumItems","enu","option","valueInEnum","multiLine","editCellZIndex","fontSize","editCellFontSize","nx","ny","className","css","canvas-datagrid-context-menu-filter-input","verticalAlign","marginLeft","padding","border","contextFilterInputBorder","borderRadius","contextFilterInputBorderRadius","fontWeight","fontFamily","contextFilterInputFontFamily","contextFilterInputFontSize","canvas-datagrid-context-menu-filter-button","contextMenuBackground","contextMenuColor","contextFilterButtonBorder","contextFilterButtonBorderRadius","contextMenuFilterButtonFontFamily","contextMenuFilterButtonFontSize","canvas-datagrid-context-child-arrow","cssFloat","childContextMenuArrowColor","contextMenuChildArrowFontSize","contextMenuFontFamily","canvas-datagrid-autocomplete","contextMenuFontSize","contextMenuBorder","contextMenuPadding","contextMenuBorderRadius","opacity","contextMenuOpacity","overflow","canvas-datagrid-autocomplete-item","canvas-datagrid-autocomplete-item:hover","contextMenuHoverBackground","contextMenuHoverColor","canvas-datagrid-canvas","canvas-datagrid","display","canvas-datagrid-control-input","canvas-datagrid-edit-mobile-input","boxSizing","outline","margin","mobileEditFontFamily","mobileEditFontSize","editCellBorder","editCellColor","editCellBackgroundColor","appearance","webkitAppearance","mozAppearance","canvas-datagrid-edit-input","editCellPaddingLeft","editCellFontFamily","boxShadow","editCellBoxShadow","canvas-datagrid-context-menu-item-mobile","contextMenuItemMargin","contextMenuItemBorderRadius","canvas-datagrid-context-menu-item","canvas-datagrid-context-menu-item:hover","canvas-datagrid-context-menu-label","contextMenuLabelMargin","contextMenuLabelDisplay","contextMenuLabelMinWidth","maxWidth","contextMenuLabelMaxWidth","canvas-datagrid-context-menu-mobile","canvas-datagrid-context-menu","contextMenuCursor","canvas-datagrid-invalid-search-regExp","contextMenuFilterInvalidExpresion","onblur","parentIsCanvas","getContext","textBaseline","ordA","charCodeAt","ordZ","len","fromCharCode","offsetY","targetX","targetY","sbh","isColumnSelected","colIsSelected","shift","supressEvent","addCol","de","ri","st","dragObject","childGrid","trArgs","treeGridHeight","dontSetStorageData","sorter","xi","maxRowLength","minXi","lastSourceIndex","cidx","useTouchScrollZones","moveBorder","entitiy","tsz","touchScrollZone","moveMode","borderDragBehavior","xBorderBehavior","yBorderBehavior","isVerticalScrollBar","isHorizontalScrollBar","borderResizeZone","allowColumnResize","allowColumnResizeFromCell","allowRowHeaderResize","allowRowResize","allowRowResizeFromCell","rowGrabZoneSize","maxCol","minCol"," ","rowHeaderCellFont","autosizePadding","autosizeHeaderCellPadding","rowHeaderCellPaddingRight","rowHeaderCellPaddingLeft","columnHeaderCellFont","headerCellPaddingRight","headerCellPaddingLeft","cellFont","cellPaddingRight","cellAutoResizePadding","total","getRowHeight","headerCell","int","asc","localeCompare","date","Date","getTime"],"mappings":"CAAA,SAAAA,EAAAC,GACA,gBAAAC,UAAA,gBAAAC,QACAA,OAAAD,QAAAD,IACA,kBAAAG,gBAAAC,IACAD,UAAAH,GACA,gBAAAC,SACAA,QAAA,eAAAD,IAEAD,EAAA,eAAAC,KACC,mBAAAK,WAAAC,KAAA,WACD,MCAgB,UAAUC,GCN1B,QAAAC,GAAAC,GAGA,GAAAC,EAAAD,GACA,MAAAC,GAAAD,GAAAR,OAGA,IAAAC,GAAAQ,EAAAD,IACAE,EAAAF,EACAG,GAAA,EACAX,WAUA,OANAM,GAAAE,GAAAI,KAAAX,EAAAD,QAAAC,IAAAD,QAAAO,GAGAN,EAAAU,GAAA,EAGAV,EAAAD,QAvBA,GAAAS,KA4DA,OAhCAF,GAAAM,EAAAP,EAGAC,EAAAO,EAAAL,EAGAF,EAAAQ,EAAA,SAAAf,EAAAgB,EAAAC,GACAV,EAAAW,EAAAlB,EAAAgB,IACAG,OAAAC,eAAApB,EAAAgB,GACAK,cAAA,EACAC,YAAA,EACAC,IAAAN,KAMAV,EAAAiB,EAAA,SAAAvB,GACA,GAAAgB,GAAAhB,KAAAwB,WACA,WAA2B,MAAAxB,GAAA,SAC3B,WAAiC,MAAAA,GAEjC,OADAM,GAAAQ,EAAAE,EAAA,IAAAA,GACAA,GAIAV,EAAAW,EAAA,SAAAQ,EAAAC,GAAsD,MAAAR,QAAAS,UAAAC,eAAAjB,KAAAc,EAAAC,IAGtDpB,EAAAuB,EAAA,GAGAvB,IAAAwB,EAAA,KDgBM,SAAU9B,EAAQD,EAASO,GE7EjC,GAAAyB,GAAAC,CAEAD,UAkTCE,MAlTQD,EAAA,WACT,YACA,iBAAA7B,GACAA,EAAA+B,UACAC,aACA,6BACA,yBACA,iCACA,yBACA,4BACA,4BACA,4BACA,0BACA,sBACA,8BACA,oBACA,0BACA,yBACA,8BACA,wBACA,mDACA,qCACA,kDACA,4CACA,kCACA,+BACA,+BACA,8BACA,oBACA,aACA,gBACA,uBACA,iCACA,mCACA,uBACA,6BACA,6BACA,iBACA,YACA,wBACA,sBACA,+BACA,iDACA,sBACA,wBACA,sBACA,sBACA,oCACA,yBACA,wBACA,kCACA,mCACA,yBACA,gCACA,2BACA,+BACA,yBACA,0BACA,gBACA,kBACA,kBACA,yBACA,qDACA,uDACA,iBACA,uBACA,sBACA,sBACA,iBACA,+BACA,oBACA,oCACA,iCACA,wCACA,uBACA,6BACA,8BACA,oBACA,sBACA,oBACA,YACA,4BAEAC,SACA,uDACA,mDACA,4BACA,uCACA,qCACA,4DACA,yCACA,4CACA,yDACA,mCACA,8BACA,4BACA,6BACA,2BACA,+DACA,+CACA,yCACA,mEACA,mDACA,gEACA,gDACA,gCACA,gCACA,sBACA,6BACA,iDACA,6CACA,sBACA,iCACA,+BACA,uBACA,kBACA,gCACA,mCACA,sDACA,sCACA,wBACA,sBACA,uBACA,qBACA,yDACA,yCACA,mCACA,kBACA,+BACA,4BACA,qBACA,sBACA,qDACA,yCACA,mCACA,iCACA,6DACA,yDACA,kCACA,gEACA,4DACA,qCACA,gDACA,2CACA,8BACA,+CACA,kEACA,kDACA,oCACA,kCACA,mCACA,iCACA,+CACA,iEACA,0CACA,2DACA,qCACA,yCACA,0CACA,wCACA,qCACA,iEACA,0CACA,uCACA,uDACA,gEACA,uCACA,4CACA,8CACA,sCACA,8DACA,6DACA,gDACA,wCACA,sCACA,mDACA,yDACA,kCACA,yCACA,2CACA,gCACA,mDACA,2CACA,+DACA,uCACA,+BACA,wDACA,iDACA,sCACA,gCACA,2CACA,uCACA,qCACA,oCACA,4BACA,4BACA,8BACA,6BACA,+BACA,0BACA,uDACA,mDACA,6CACA,sCACA,kDACA,gCACA,sDACA,uDACA,qDACA,sDACA,oDACA,mDACA,kDACA,2BACA,oCACA,sDACA,kDACA,0BACA,oCACA,4BACA,0BACA,uBACA,oDACA,0DACA,qDACA,2DACA,+CACA,qDACA,8BACA,wBACA,iDACA,kCACA,6CACA,sBACA,kBACA,wBACA,uBACA,sBACA,wBACA,oBACA,uBACA,+BACA,6BACA,sCACA,8BACA,6BACA,mDACA,sCACA,mBACA,qBACA,qBACA,sDACA,kDACA,kCACA,0DACA,uCACA,0D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","file":"canvas-datagrid.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"canvasDatagrid\"] = factory();\n\telse\n\t\troot[\"canvasDatagrid\"] = factory();\n})(typeof self !== 'undefined' ? self : this, function() {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"canvasDatagrid\"] = factory();\n\telse\n\t\troot[\"canvasDatagrid\"] = factory();\n})(typeof self !== 'undefined' ? self : this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId]) {\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, {\n/******/ \t\t\t\tconfigurable: false,\n/******/ \t\t\t\tenumerable: true,\n/******/ \t\t\t\tget: getter\n/******/ \t\t\t});\n/******/ \t\t}\n/******/ \t};\n/******/\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = 1);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function () {\n    'use strict';\n    return function (self) {\n        self.defaults = {\n            attributes: [\n                ['allowColumnReordering', true],\n                ['allowColumnResize', true],\n                ['allowColumnResizeFromCell', false],\n                ['allowFreezingRows', false],\n                ['allowFreezingColumns', false],\n                ['allowMovingSelection', true],\n                ['allowRowHeaderResize', true],\n                ['allowRowReordering', false],\n                ['allowRowResize', true],\n                ['allowRowResizeFromCell', false],\n                ['allowSorting', true],\n                ['autoGenerateSchema', false],\n                ['autoResizeColumns', false],\n                ['borderDragBehavior', 'none'],\n                ['borderResizeZone', 10],\n                ['clearSettingsOptionText', 'Clear saved settings'],\n                ['columnHeaderClickBehavior', 'sort'],\n                ['columnSelectorHiddenText', '&nbsp;&nbsp;&nbsp;'],\n                ['columnSelectorText', 'Add/Remove columns'],\n                ['columnSelectorVisibleText', '\\u2713'],\n                ['contextHoverScrollAmount', 2],\n                ['contextHoverScrollRateMs', 5],\n                ['copyHeadersOnSelectAll', true],\n                ['copyText', 'Copy'],\n                ['debug', false],\n                ['editable', true],\n                ['ellipsisText', '...'],\n                ['filterOptionText', 'Filter %s'],\n                ['filterTextPrefix', '(filtered) '],\n                ['globalRowResize', false],\n                ['hideColumnText', 'Hide %s'],\n                ['maxAutoCompleteItems', 200],\n                ['multiLine', false],\n                ['name', ''],\n                ['pageUpDownOverlap', 1],\n                ['pasteText', 'Paste'],\n                ['persistantSelectionMode', false],\n                ['removeFilterOptionText', 'Remove filter on %s'],\n                ['reorderDeadZone', 3],\n                ['resizeScrollZone', 20],\n                ['rowGrabZoneSize', 5],\n                ['saveAppearance', true],\n                ['scrollAnimationPPSThreshold', 0.75],\n                ['scrollPointerLock', false],\n                ['scrollRepeatRate', 75],\n                ['selectionFollowsActiveCell', false],\n                ['selectionHandleBehavior', 'none'],\n                ['selectionMode', 'cell'],\n                ['selectionScrollIncrement', 20],\n                ['selectionScrollZone', 20],\n                ['showClearSettingsOption', true],\n                ['showColumnHeaders', true],\n                ['showColumnSelector', true],\n                ['showCopy', false],\n                ['showFilter', true],\n                ['showNewRow', false],\n                ['showOrderByOption', true],\n                ['showOrderByOptionTextAsc', 'Order by %s ascending'],\n                ['showOrderByOptionTextDesc', 'Order by %s descending'],\n                ['showPaste', false],\n                ['showPerformance', false],\n                ['showRowHeaders', true],\n                ['showRowNumbers', true],\n                ['snapToRow', false],\n                ['touchContextMenuTimeMs', 800],\n                ['touchDeadZone', 3],\n                ['touchEasingMethod', 'easeOutQuad'],\n                ['touchReleaseAcceleration', 1000],\n                ['touchReleaseAnimationDurationMs', 2000],\n                ['touchScrollZone', 20],\n                ['touchSelectHandleZone', 20],\n                ['touchZoomSensitivity', 0.005],\n                ['touchZoomMin', 0.5],\n                ['touchZoomMax', 1.75],\n                ['maxPixelRatio', 2],\n                ['tree', false],\n                ['treeHorizontalScroll', false]\n            ],\n            styles: [\n                ['activeCellBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['activeCellBorderColor', 'rgba(110, 168, 255, 1)'],\n                ['activeCellBorderWidth', 1],\n                ['activeCellColor', 'rgba(0, 0, 0, 1)'],\n                ['activeCellFont', '16px sans-serif'],\n                ['activeCellHoverBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['activeCellHorizontalAlignment', 'left'],\n                ['activeCellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['activeCellOverlayBorderColor', 'rgba(66, 133, 244, 1)'],\n                ['activeCellOverlayBorderWidth', 1],\n                ['activeCellPaddingBottom', 5],\n                ['activeCellPaddingLeft', 5],\n                ['activeCellPaddingRight', 5],\n                ['activeCellPaddingTop', 5],\n                ['activeCellSelectedBackgroundColor', 'rgba(236, 243, 255, 1)'],\n                ['activeCellSelectedColor', 'rgba(0, 0, 0, 1)'],\n                ['activeCellVerticalAlignment', 'center'],\n                ['activeColumnHeaderCellBackgroundColor', 'rgba(225, 225, 225, 1)'],\n                ['activeColumnHeaderCellColor', 'rgba(0, 0, 0, 1)'],\n                ['activeRowHeaderCellBackgroundColor', 'rgba(225, 225, 225, 1)'],\n                ['activeRowHeaderCellColor', 'rgba(0, 0, 0, 1)'],\n                ['autocompleteBottomMargin', 60],\n                ['autosizeHeaderCellPadding', 8],\n                ['autosizePadding', 5],\n                ['cellAutoResizePadding', 13],\n                ['cellBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['cellBorderColor', 'rgba(195, 199, 202, 1)'],\n                ['cellBorderWidth', 1],\n                ['cellColor', 'rgba(0, 0, 0, 1)'],\n                ['cellFont', '16px sans-serif'],\n                ['cellGridHeight', 250],\n                ['cellHeight', 24],\n                ['cellHeightWithChildGrid', 150],\n                ['cellHorizontalAlignment', 'left'],\n                ['cellHoverBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['cellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['cellPaddingBottom', 5],\n                ['cellPaddingLeft', 5],\n                ['cellPaddingRight', 5],\n                ['cellPaddingTop', 5],\n                ['cellSelectedBackgroundColor', 'rgba(236, 243, 255, 1)'],\n                ['cellSelectedColor', 'rgba(0, 0, 0, 1)'],\n                ['cellVerticalAlignment', 'center'],\n                ['cellWidth', 250],\n                ['cellWidthWithChildGrid', 250],\n                ['cellWhiteSpace', 'nowrap'],\n                ['cellLineHeight', 1],\n                ['cellLineSpacing', 3],\n                ['childContextMenuArrowColor', 'rgba(43, 48, 43, 1)'],\n                ['childContextMenuArrowHTML', '&#x25BA;'],\n                ['childContextMenuMarginLeft', -11],\n                ['childContextMenuMarginTop', -6],\n                ['columnHeaderCellBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['columnHeaderCellBorderColor', 'rgba(172, 172, 172, 1)'],\n                ['columnHeaderCellBorderWidth', 1],\n                ['columnHeaderCellCapBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['columnHeaderCellCapBorderColor', 'rgba(172, 172, 172, 1)'],\n                ['columnHeaderCellCapBorderWidth', 1],\n                ['columnHeaderCellColor', 'rgba(50, 50, 50, 1)'],\n                ['columnHeaderCellFont', '16px sans-serif'],\n                ['columnHeaderCellHeight', 25],\n                ['columnHeaderCellHorizontalAlignment', 'left'],\n                ['columnHeaderCellHoverBackgroundColor', 'rgba(235, 235, 235, 1)'],\n                ['columnHeaderCellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['columnHeaderCellPaddingBottom', 5],\n                ['columnHeaderCellPaddingLeft', 5],\n                ['columnHeaderCellPaddingRight', 5],\n                ['columnHeaderCellPaddingTop', 5],\n                ['columnHeaderCellVerticalAlignment', 'center'],\n                ['columnHeaderOrderByArrowBorderColor', 'rgba(195, 199, 202, 1)'],\n                ['columnHeaderOrderByArrowBorderWidth', 1],\n                ['columnHeaderOrderByArrowColor', 'rgba(155, 155, 155, 1)'],\n                ['columnHeaderOrderByArrowHeight', 8],\n                ['columnHeaderOrderByArrowMarginLeft', 0],\n                ['columnHeaderOrderByArrowMarginRight', 5],\n                ['columnHeaderOrderByArrowMarginTop', 6],\n                ['columnHeaderOrderByArrowWidth', 13],\n                ['contextFilterButtonBorder', 'solid 1px rgba(158, 163, 169, 1)'],\n                ['contextFilterButtonBorderRadius', '3px'],\n                ['contextFilterButtonHTML', '&#x25BC;'],\n                ['contextFilterInputBackground', 'rgba(255,255,255,1)'],\n                ['contextFilterInputBorder', 'solid 1px rgba(158, 163, 169, 1)'],\n                ['contextFilterInputBorderRadius', '0'],\n                ['contextFilterInputColor', 'rgba(0,0,0,1)'],\n                ['contextFilterInputFontFamily', 'sans-serif'],\n                ['contextFilterInputFontSize', '14px'],\n                ['contextFilterInvalidRegExpBackground', 'rgba(180, 6, 1, 1)'],\n                ['contextFilterInvalidRegExpColor', 'rgba(255, 255, 255, 1)'],\n                ['contextMenuArrowColor', 'rgba(43, 48, 43, 1)'],\n                ['contextMenuArrowDownHTML', '&#x25BC;'],\n                ['contextMenuArrowUpHTML', '&#x25B2;'],\n                ['contextMenuBackground', 'rgba(240, 240, 240, 1)'],\n                ['contextMenuBorder', 'solid 1px rgba(158, 163, 169, 1)'],\n                ['contextMenuBorderRadius', '3px'],\n                ['contextMenuChildArrowFontSize', '12px'],\n                ['contextMenuColor', 'rgba(43, 48, 43, 1)'],\n                ['contextMenuCursor', 'default'],\n                ['contextMenuFilterButtonFontFamily', 'sans-serif'],\n                ['contextMenuFilterButtonFontSize', '10px'],\n                ['contextMenuFilterInvalidExpresion', 'rgba(237, 155, 156, 1)'],\n                ['contextMenuFontFamily', 'sans-serif'],\n                ['contextMenuFontSize', '16px'],\n                ['contextMenuHoverBackground', 'rgba(182, 205, 250, 1)'],\n                ['contextMenuHoverColor', 'rgba(43, 48, 153, 1)'],\n                ['contextMenuItemBorderRadius', '3px'],\n                ['contextMenuItemMargin', '2px'],\n                ['contextMenuLabelDisplay', 'inline-block'],\n                ['contextMenuLabelMargin', '0 3px 0 0'],\n                ['contextMenuLabelMaxWidth', '700px'],\n                ['contextMenuLabelMinWidth', '75px'],\n                ['contextMenuMarginLeft', 3],\n                ['contextMenuMarginTop', -3],\n                ['contextMenuOpacity', '0.98'],\n                ['contextMenuPadding', '2px'],\n                ['contextMenuWindowMargin', 30],\n                ['contextMenuZIndex', 10000],\n                ['cornerCellBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['cornerCellBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['debugBackgroundColor', 'rgba(0, 0, 0, .0)'],\n                ['debugColor', 'rgba(255, 15, 24, 1)'],\n                ['debugEntitiesColor', 'rgba(76, 231, 239, 1.00)'],\n                ['debugFont', '11px sans-serif'],\n                ['debugPerfChartBackground', 'rgba(29, 25, 26, 1.00)'],\n                ['debugPerfChartTextColor', 'rgba(255, 255, 255, 0.8)'],\n                ['debugPerformanceColor', 'rgba(252, 255, 37, 1.00)'],\n                ['debugScrollHeightColor', 'rgba(248, 33, 103, 1.00)'],\n                ['debugScrollWidthColor', 'rgba(66, 255, 27, 1.00)'],\n                ['debugTouchPPSXColor', 'rgba(246, 102, 24, 1.00)'],\n                ['debugTouchPPSYColor', 'rgba(186, 0, 255, 1.00)'],\n                ['display', 'inline-block'],\n                ['editCellBackgroundColor', 'white'],\n                ['editCellBorder', 'solid 1px rgba(110, 168, 255, 1)'],\n                ['editCellBoxShadow', '0 2px 5px rgba(0,0,0,0.4)'],\n                ['editCellColor', 'black'],\n                ['editCellFontFamily', 'sans-serif'],\n                ['editCellFontSize', '16px'],\n                ['editCellPaddingLeft', 4],\n                ['editCellZIndex', 10000],\n                ['frozenMarkerHoverColor', 'rgba(236, 243, 255, 1)'],\n                ['frozenMarkerHoverBorderColor', 'rgba(110, 168, 255, 1)'],\n                ['frozenMarkerActiveColor', 'rgba(236, 243, 255, 1)'],\n                ['frozenMarkerActiveBorderColor', 'rgba(110, 168, 255, 1)'],\n                ['frozenMarkerColor', 'rgba(222, 222, 222, 1)'],\n                ['frozenMarkerBorderColor', 'rgba(168, 168, 168, 1)'],\n                ['frozenMarkerBorderWidth', 1],\n                ['frozenMarkerWidth', 2],\n                ['gridBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['gridBorderCollapse', 'collapse'],\n                ['gridBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['gridBorderWidth', 1],\n                ['height', 'auto'],\n                ['maxHeight', 'inherit'],\n                ['maxWidth', 'inherit'],\n                ['minColumnWidth', 45],\n                ['minHeight', 'inherit'],\n                ['minRowHeight', 24],\n                ['minWidth', 'inherit'],\n                ['mobileContextMenuMargin', 10],\n                ['mobileEditInputHeight', 30],\n                ['mobileEditFontFamily', 'sans-serif'],\n                ['mobileEditFontSize', '16px'],\n                ['moveOverlayBorderWidth', 1],\n                ['moveOverlayBorderColor', 'rgba(66, 133, 244, 1)'],\n                ['moveOverlayBorderSegments', '12, 7'],\n                ['name', 'default'],\n                ['overflowY', 'auto'],\n                ['overflowX', 'auto'],\n                ['reorderMarkerBackgroundColor', 'rgba(0, 0, 0, 0.1)'],\n                ['reorderMarkerBorderColor', 'rgba(0, 0, 0, 0.2)'],\n                ['reorderMarkerBorderWidth', 1.25],\n                ['reorderMarkerIndexBorderColor', 'rgba(66, 133, 244, 1)'],\n                ['reorderMarkerIndexBorderWidth', 2.75],\n                ['rowHeaderCellBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['rowHeaderCellBorderColor', 'rgba(200, 200, 200, 1)'],\n                ['rowHeaderCellBorderWidth', 1],\n                ['rowHeaderCellColor', 'rgba(50, 50, 50, 1)'],\n                ['rowHeaderCellFont', '16px sans-serif'],\n                ['rowHeaderCellHeight', 25],\n                ['rowHeaderCellHorizontalAlignment', 'left'],\n                ['rowHeaderCellHoverBackgroundColor', 'rgba(235, 235, 235, 1)'],\n                ['rowHeaderCellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['rowHeaderCellPaddingBottom', 5],\n                ['rowHeaderCellPaddingLeft', 5],\n                ['rowHeaderCellPaddingRight', 5],\n                ['rowHeaderCellPaddingTop', 5],\n                ['rowHeaderCellSelectedBackgroundColor', 'rgba(217, 217, 217, 1)'],\n                ['rowHeaderCellSelectedColor', 'rgba(50, 50, 50, 1)'],\n                ['rowHeaderCellVerticalAlignment', 'center'],\n                ['rowHeaderCellWidth', 57],\n                ['scrollBarActiveColor', 'rgba(125, 125, 125, 1)'],\n                ['scrollBarBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['scrollBarBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['scrollBarBorderWidth', 0.5],\n                ['scrollBarBoxBorderRadius', 4.125],\n                ['scrollBarBoxColor', 'rgba(192, 192, 192, 1)'],\n                ['scrollBarBoxMargin', 2],\n                ['scrollBarBoxMinSize', 15],\n                ['scrollBarBoxWidth', 8],\n                ['scrollBarCornerBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['scrollBarCornerBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['scrollBarWidth', 11],\n                ['selectionHandleBorderColor', 'rgba(255, 255, 255, 1)'],\n                ['selectionHandleBorderWidth', 1.5],\n                ['selectionHandleColor', 'rgba(66, 133, 244, 1)'],\n                ['selectionHandleSize', 8],\n                ['selectionHandleType', 'square'],\n                ['selectionOverlayBorderColor', 'rgba(66, 133, 244, 1)'],\n                ['selectionOverlayBorderWidth', 1],\n                ['treeArrowBorderColor', 'rgba(195, 199, 202, 1)'],\n                ['treeArrowBorderWidth', 1],\n                ['treeArrowClickRadius', 5],\n                ['treeArrowColor', 'rgba(155, 155, 155, 1)'],\n                ['treeArrowHeight', 8],\n                ['treeArrowMarginLeft', 0],\n                ['treeArrowMarginRight', 5],\n                ['treeArrowMarginTop', 6],\n                ['treeArrowWidth', 13],\n                ['treeGridHeight', 250],\n                ['width', 'auto']\n            ]\n        };\n    };\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }),\n/* 1 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true, evil: true*/\n/*globals Reflect: false, HTMLElement: true, define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [\n    __webpack_require__(2),\n    __webpack_require__(0),\n    __webpack_require__(3),\n    __webpack_require__(4),\n    __webpack_require__(5),\n    __webpack_require__(6),\n    __webpack_require__(7),\n    __webpack_require__(8),\n    __webpack_require__(9)\n], __WEBPACK_AMD_DEFINE_RESULT__ = (function context(component) {\n    'use strict';\n    component = component();\n    var modules = Array.prototype.slice.call(arguments);\n    function Grid(args) {\n        args = args || {};\n        var self = {};\n        self.isComponent = args.component === undefined;\n        self.isChildGrid = args.parentNode && /canvas-datagrid-(cell|tree)/.test(args.parentNode.nodeType);\n        if (self.isChildGrid) {\n            self.intf = {};\n        } else {\n            self.intf = self.isComponent ? eval('Reflect.construct(HTMLElement, [], new.target)')\n                : document.createElement('canvas');\n        }\n        self.args = args;\n        self.intf.args = args;\n        self.applyComponentStyle = component.applyComponentStyle;\n        self.hyphenateProperty = component.hyphenateProperty;\n        self.dehyphenateProperty = component.dehyphenateProperty;\n        self.createGrid = function grid(args) {\n            args.component = false;\n            return new Grid(args);\n        };\n        modules.forEach(function (module) {\n            module(self);\n        });\n        if (self.isChildGrid) {\n            self.shadowRoot = args.parentNode.shadowRoot;\n            self.parentNode = args.parentNode;\n        } else {\n            self.shadowRoot = self.intf.attachShadow({mode: 'open'});\n            self.parentNode = self.shadowRoot;\n        }\n        self.init();\n        return self.intf;\n    }\n    if (window.HTMLElement) {\n        Grid.prototype = Object.create(window.HTMLElement.prototype);\n    }\n    // export web component\n    if (window.customElements) {\n        Grid.observedAttributes = component.getObservableAttributes();\n        Grid.prototype.disconnectedCallback = component.disconnectedCallback;\n        Grid.prototype.attributeChangedCallback = component.attributeChangedCallback;\n        Grid.prototype.connectedCallback = component.connectedCallback;\n        Grid.prototype.adoptedCallback = component.adoptedCallback;\n        window.customElements.define('canvas-datagrid', Grid);\n    }\n    // export global\n    if (window && !window.canvasDatagrid && !window.require) {\n        window.canvasDatagrid = function (args) { return new Grid(args); };\n    }\n    // export amd loader\n    module.exports = function grid(args) {\n        args = args || {};\n        var i, tKeys = ['style', 'formatters', 'sorters', 'filters',\n                    'treeGridAttributes', 'cellGridAttributes', 'data', 'schema'];\n        if (window.customElements) {\n            i = document.createElement('canvas-datagrid');\n            Object.keys(args).forEach(function (argKey) {\n                // set data and parentNode after everything else\n                if (argKey === 'data') { return; }\n                if (argKey === 'parentNode') { return; }\n                // top level keys in args\n                if (tKeys.indexOf(argKey) !== -1) {\n                    tKeys.forEach(function (tKey) {\n                        if (args[tKey] === undefined || tKey !== argKey) { return; }\n                        if (['formatters', 'sorters', 'filters'].indexOf(argKey) !== -1) {\n                            if (typeof args[tKey] === 'object' && args[tKey] !== null) {\n                                Object.keys(args[tKey]).forEach(function (sKey) {\n                                    i[tKey][sKey] = args[tKey][sKey];\n                                });\n                            }\n                        } else {\n                            i[tKey] = args[tKey];\n                        }\n                    });\n                    return;\n                }\n                // all others are attribute level keys\n                i.attributes[argKey] = args[argKey];\n            });\n            if (args.data) {\n                i.data = args.data;\n            }\n            // add to the dom very last to avoid redraws\n            if (args.parentNode) {\n                args.parentNode.appendChild(i);\n            }\n            return i;\n        }\n        args.component = false;\n        i = new Grid(args);\n        if (args.parentNode && args.parentNode.appendChild) {\n            args.parentNode.appendChild(i);\n        }\n        return i;\n    };\n    return module.exports;\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }),\n/* 2 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0)], __WEBPACK_AMD_DEFINE_RESULT__ = (function (defaults) {\n    'use strict';\n    return function () {\n        var typeMap, component = {};\n        component.dehyphenateProperty = function hyphenateProperty(prop) {\n            prop = prop.replace('--cdg-', '');\n            var p = '', nextLetterCap;\n            Array.prototype.forEach.call(prop, function (char) {\n                if (nextLetterCap) {\n                    nextLetterCap = false;\n                    p += char.toUpperCase();\n                    return;\n                }\n                if (char === '-') {\n                    nextLetterCap = true;\n                    return;\n                }\n                p += char;\n            });\n            return p;\n        };\n        component.hyphenateProperty = function hyphenateProperty(prop, cust) {\n            var p = '';\n            Array.prototype.forEach.call(prop, function (char) {\n                if (char === char.toUpperCase()) {\n                    p += '-' + char.toLowerCase();\n                    return;\n                }\n                p += char;\n            });\n            return (cust ? '--cdg-' : '') + p;\n        };\n        function getDefaultItem(base, item) {\n            var i = {},\n                r;\n            defaults(i);\n            r = i.defaults[base].filter(function (i) {\n                return i[0].toLowerCase() === item.toLowerCase()\n                    || component.hyphenateProperty(i[0]) === item.toLowerCase()\n                    || component.hyphenateProperty(i[0], true) === item.toLowerCase();\n            })[0];\n            return r;\n        }\n        component.applyComponentStyle = function (supressChangeAndDrawEvents, intf) {\n            if (!intf.isComponent) { return; }\n            var cStyle = window.getComputedStyle(intf.tagName === 'CANVAS-DATAGRID' ? intf : intf.canvas, null),\n                defs = {};\n            intf.computedStyle = cStyle;\n            defaults(defs);\n            defs = defs.defaults.styles;\n            defs.forEach(function (def) {\n                var val;\n                val = cStyle.getPropertyValue(component.hyphenateProperty(def[0], true));\n                if (val === \"\") {\n                    val = cStyle.getPropertyValue(component.hyphenateProperty(def[0], false));\n                }\n                if (val !== \"\" && typeof val === 'string') {\n                    intf.setStyleProperty(def[0], typeMap[typeof def[1]](val\n                        .replace(/^\\s+/, '').replace(/\\s+$/, ''), def[1]), true);\n                }\n            });\n            if (!supressChangeAndDrawEvents && intf.dispatchEvent) {\n                requestAnimationFrame(function () { intf.resize(true); });\n                intf.dispatchEvent('stylechanged', intf.style);\n            }\n        };\n        typeMap = {\n            data: function (strData) {\n                try {\n                    return JSON.parse(strData);\n                } catch (e) {\n                    throw new Error('Cannot read JSON data in canvas-datagrid data.');\n                }\n            },\n            schema: function (strSchema) {\n                try {\n                    return JSON.parse(strSchema);\n                } catch (e) {\n                    throw new Error('Cannot read JSON data in canvas-datagrid schema attribute.');\n                }\n            },\n            number: function (strNum, def) {\n                var n = parseInt(strNum, 10);\n                return isNaN(n) ? def : n;\n            },\n            boolean: function (strBool) {\n                return (/true/i).test(strBool);\n            },\n            string: function (str) {\n                return str;\n            }\n        };\n        component.getObservableAttributes = function () {\n            var i = {}, attrs = ['data', 'schema', 'style', 'className', 'name'];\n            defaults(i);\n            i.defaults.attributes.forEach(function (attr) {\n                attrs.push(attr[0].toLowerCase());\n            });\n            return attrs;\n        };\n        component.disconnectedCallback = function () {\n            this.connected = false;\n        };\n        component.connectedCallback = function () {\n            var intf = this;\n            intf.parentDOMNode.innerHTML = \"\";\n            intf.parentDOMNode.appendChild(intf.canvas);\n            intf.connected = true;\n            component.observe(intf);\n            component.applyComponentStyle(true, intf);\n            intf.resize(true);\n        };\n        component.adoptedCallback = function () {\n            this.resize();\n        };\n        component.attributeChangedCallback = function (attrName, oldVal, newVal) {\n            var tfn, intf = this, def;\n            if (attrName === 'style') {\n                component.applyComponentStyle(false, intf);\n                return;\n            }\n            if (attrName === 'data') {\n                if (intf.dataType === 'application/x-canvas-datagrid') {\n                    intf.dataType = 'application/json+x-canvas-datagrid';\n                }\n                intf.args.data = newVal;\n                return;\n            }\n            if (attrName === 'schema') {\n                intf.args.schema = typeMap.schema(newVal);\n                return;\n            }\n            if (attrName === 'name') {\n                intf.name = newVal;\n                return;\n            }\n            if (attrName === 'class' || attrName === 'className') {\n                return;\n            }\n            def = getDefaultItem('attributes', attrName);\n            if (def) {\n                tfn = typeMap[typeof def[1]];\n                intf.attributes[def[0]] = tfn(newVal);\n                return;\n            }\n            if (/^on/.test(attrName)) {\n                intf.addEventListener('on' + attrName, function (e) {\n                    eval(newVal);\n                });\n            }\n            return;\n        };\n        component.observe = function (intf) {\n            var observer;\n            if (!window.MutationObserver) { return; }\n            intf.applyComponentStyle = function () { component.applyComponentStyle(false, intf); intf.resize(); };\n            /**\n             * Applies the computed css styles to the grid.  In some browsers, changing directives in attached style sheets does not automatically update the styles in this component.  It is necessary to call this method to update in these cases.\n             * @memberof canvasDatagrid\n             * @name applyComponentStyle\n             * @method\n             */\n            observer = new window.MutationObserver(function (mutations) {\n                var checkInnerHTML, checkStyle;\n                Array.prototype.forEach.call(mutations, function (mutation) {\n                    if (mutation.attributeName === 'class'\n                            || mutation.attributeName === 'style') {\n                        checkStyle = true;\n                        return;\n                    }\n                    if (mutation.target.nodeName === 'STYLE') {\n                        checkStyle = true;\n                        return;\n                    }\n                    if (mutation.target.parentNode\n                            && mutation.target.parentNode.nodeName === 'STYLE') {\n                        checkStyle = true;\n                        return;\n                    }\n                    if (mutation.target === intf && (mutation.addedNodes.length > 0 || mutation.type === 'characterData')) {\n                        checkInnerHTML = true;\n                    }\n                });\n                if (checkStyle) {\n                    intf.applyComponentStyle(false, intf);\n                }\n                if (checkInnerHTML) {\n                    if (intf.dataType === 'application/x-canvas-datagrid') {\n                        intf.dataType = 'application/json+x-canvas-datagrid';\n                    }\n                    intf.data = intf.innerHTML;\n                }\n            });\n            observer.observe(intf, { characterData: true, childList: true, attributes: true, subtree: true });\n            Array.prototype.forEach.call(document.querySelectorAll('style'), function (el) {\n                observer.observe(el, { characterData: true, childList: true, attributes: true, subtree: true });\n            });\n        };\n        return component;\n    };\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }),\n/* 3 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true*/\n/*globals XMLSerializer: false, define: true, Blob: false, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function () {\n    'use strict';\n    return function (self) {\n        var perfCounters = [],\n            cachedImagesDrawn = false,\n            drawCount = 0,\n            perfWindowSize = 300,\n            entityCount = [],\n            hiddenFrozenColumnCount = 0,\n            scrollDebugCounters = [],\n            touchPPSCounters = [];\n        self.htmlImageCache = {};\n        // more heavyweight version than fillArray defined in intf.js\n        function fillArray(low, high, step, def) {\n            step = step || 1;\n            var i = [], x;\n            for (x = low; x <= high; x += step) {\n                i[x] = def === undefined ? x : (typeof def === 'function' ? def(x) : def);\n            }\n            return i;\n        }\n        function drawPerfLine(w, h, x, y, perfArr, arrIndex, max, color, useAbs) {\n            var i = w / perfArr.length,\n                r = h / max;\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.beginPath();\n            self.ctx.moveTo(x, y + h);\n            perfArr.forEach(function (n) {\n                var val = (arrIndex === undefined ? n : n[arrIndex]),\n                    cx,\n                    cy;\n                if (useAbs) {\n                    val = Math.abs(val);\n                }\n                cx = x + i;\n                cy = y + h - (val * r);\n                self.ctx.lineTo(cx, cy);\n                x += i;\n            });\n            self.ctx.moveTo(x + w, y + h);\n            self.ctx.strokeStyle = color;\n            self.ctx.stroke();\n        }\n        function drawOnAllImagesLoaded() {\n            var loaded = true;\n            Object.keys(self.htmlImageCache).forEach(function (html) {\n                if (!self.htmlImageCache[html].complete) {\n                    loaded = false;\n                }\n            });\n            if (loaded && !cachedImagesDrawn) {\n                cachedImagesDrawn = true;\n                self.draw();\n            }\n        }\n        function drawHtml(cell) {\n            var img,\n                v = cell.innerHTML || cell.formattedValue,\n                cacheKey = v.toString() + cell.rowIndex.toString() + cell.columnIndex.toString(), \n                x = cell.x + self.canvasOffsetLeft,\n                y = cell.y + self.canvasOffsetTop;\n            if (self.htmlImageCache[cacheKey]) {\n                img = self.htmlImageCache[cacheKey];\n                if (img.height !== cell.height || img.width !== cell.width) {\n                    // height and width of the cell has changed, invalidate cache\n                    self.htmlImageCache[cacheKey] = undefined;\n                } else {\n                    if (!img.complete) {\n                        return;\n                    }\n                    return self.ctx.drawImage(img, x, y);\n                }\n            } else {\n                cachedImagesDrawn = false;\n            }\n            img = new Image(cell.width, cell.height);\n            self.htmlImageCache[cacheKey] = img;\n            img.onload = function () {\n                self.ctx.drawImage(img, x, y);\n                drawOnAllImagesLoaded();\n            };\n            img.src = 'data:image/svg+xml;base64,' + btoa(\n                '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"' + cell.width + '\" height=\"' + cell.height + '\">\\n' +\n                    '<foreignObject class=\"node\" x=\"0\" y=\"0\" width=\"100%\" height=\"100%\">\\n' +\n                    '<body xmlns=\"http://www.w3.org/1999/xhtml\" style=\"margin:0;padding:0;\">\\n' +\n                    v + '\\n' +\n                    '</body>' +\n                    '</foreignObject>\\n' +\n                    '</svg>\\n'\n            );\n        }\n        function drawOrderByArrow(x, y) {\n            var mt = self.style.columnHeaderOrderByArrowMarginTop * self.scale,\n                ml = self.style.columnHeaderOrderByArrowMarginLeft * self.scale,\n                mr = self.style.columnHeaderOrderByArrowMarginRight * self.scale,\n                aw = self.style.columnHeaderOrderByArrowWidth * self.scale,\n                ah = self.style.columnHeaderOrderByArrowHeight * self.scale;\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillStyle = self.style.columnHeaderOrderByArrowColor;\n            self.ctx.strokeStyle = self.style.columnHeaderOrderByArrowBorderColor;\n            self.ctx.beginPath();\n            x = x + ml;\n            y = y + mt;\n            if (self.orderDirection === 'asc') {\n                self.ctx.moveTo(x, y);\n                self.ctx.lineTo(x + aw, y);\n                self.ctx.lineTo(x + (aw * 0.5), y + ah);\n                self.ctx.moveTo(x, y);\n            } else {\n                self.ctx.lineTo(x, y + ah);\n                self.ctx.lineTo(x + aw, y + ah);\n                self.ctx.lineTo(x + (aw * 0.5), y);\n                self.ctx.lineTo(x, y + ah);\n            }\n            self.ctx.stroke();\n            self.ctx.fill();\n            return ml + aw + mr;\n        }\n        function drawTreeArrow(cell, x, y) {\n            var mt = self.style.treeArrowMarginTop * self.scale,\n                mr = self.style.treeArrowMarginRight * self.scale,\n                ml = self.style.treeArrowMarginLeft * self.scale,\n                aw = self.style.treeArrowWidth * self.scale,\n                ah = self.style.treeArrowHeight * self.scale;\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillStyle = self.style.treeArrowColor;\n            self.ctx.strokeStyle = self.style.treeArrowBorderColor;\n            self.ctx.beginPath();\n            x = x + ml;\n            y = y + mt;\n            if (self.openChildren[cell.rowIndex]) {\n                self.ctx.moveTo(x, y);\n                self.ctx.lineTo(x + aw, y);\n                self.ctx.lineTo(x + (aw * 0.5), y + ah);\n                self.ctx.moveTo(x, y);\n            } else {\n                self.ctx.lineTo(x, y);\n                self.ctx.lineTo(x + ah, y + (aw * 0.5));\n                self.ctx.lineTo(x, y + aw);\n                self.ctx.lineTo(x, y);\n            }\n            self.ctx.stroke();\n            self.ctx.fill();\n            return ml + aw + mr;\n        }\n        function radiusRect(x, y, w, h, radius) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            var r = x + w, b = y + h;\n            self.ctx.beginPath();\n            self.ctx.moveTo(x + radius, y);\n            self.ctx.lineTo(r - radius, y);\n            self.ctx.quadraticCurveTo(r, y, r, y + radius);\n            self.ctx.lineTo(r, y + h - radius);\n            self.ctx.quadraticCurveTo(r, b, r - radius, b);\n            self.ctx.lineTo(x + radius, b);\n            self.ctx.quadraticCurveTo(x, b, x, b - radius);\n            self.ctx.lineTo(x, y + radius);\n            self.ctx.quadraticCurveTo(x, y, x + radius, y);\n        }\n        function fillRect(x, y, w, h) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillRect(x, y, w, h);\n        }\n        function strokeRect(x, y, w, h) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.strokeRect(x, y, w, h);\n        }\n        function fillText(text, x, y) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillText(text, x, y);\n        }\n        function fillCircle(x, y, r) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.beginPath();\n            self.ctx.arc(x, y, r, 0, 2 * Math.PI);\n            self.ctx.fill();\n        }\n        function strokeCircle(x, y, r) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.beginPath();\n            self.ctx.arc(x, y, r, 0, 2 * Math.PI);\n            self.ctx.stroke();\n        }\n        function clipFrozenArea(mode) {\n            // 0 both, 1 rows, 2 cols\n            // self.lastFrozenColumnPixel;\n            // self.lastFrozenRowPixel;\n            self.ctx.beginPath();\n            if (mode === 0) {\n                self.ctx.moveTo(self.lastFrozenColumnPixel, self.lastFrozenRowPixel);\n                self.ctx.lineTo(self.lastFrozenColumnPixel, self.height);\n                self.ctx.lineTo(self.width, self.height);\n                self.ctx.lineTo(self.width, self.lastFrozenRowPixel);\n            }\n            if (mode === 1) {\n                self.ctx.moveTo(0, self.lastFrozenRowPixel);\n                self.ctx.lineTo(0, self.height);\n                self.ctx.lineTo(self.width, self.height);\n                self.ctx.lineTo(self.width, self.lastFrozenRowPixel);\n            }\n            if (mode === 2) {\n                self.ctx.moveTo(self.lastFrozenColumnPixel, 0);\n                self.ctx.lineTo(self.width, 0);\n                self.ctx.lineTo(self.width, self.height);\n                self.ctx.lineTo(self.lastFrozenColumnPixel, self.height);\n            }\n            self.ctx.clip();\n        }\n        function fillHandle(x, y, r) {\n            if (self.style.selectionHandleType === 'circle') {\n                return fillCircle(x, y, r * 0.5);\n            }\n            fillRect(x - r * 0.5, y - r * 0.5, r, r);\n        }\n        function strokeHandle(x, y, r) {\n            if (self.style.selectionHandleType === 'circle') {\n                return strokeCircle(x, y, r * 0.5);\n            }\n            strokeRect(x - r * 0.5, y - r * 0.5, r, r);\n        }\n        function addselectionHandle(c, pos) {\n            var hw = self.style.selectionHandleSize,\n                p = {\n                    tr: function () {\n                        fillHandle(c.x + c.width, c.y, hw);\n                        strokeHandle(c.x + c.width, c.y, hw);\n                    },\n                    br: function () {\n                        fillHandle(c.x + c.width, c.y + c.height, hw);\n                        strokeHandle(c.x + c.width, c.y + c.height, hw);\n                    },\n                    tl: function () {\n                        fillHandle(c.x, c.y, hw);\n                        strokeHandle(c.x, c.y, hw);\n                    },\n                    bl: function () {\n                        fillHandle(c.x, c.y + c.height, hw);\n                        strokeHandle(c.x, c.y + c.height, hw);\n                    }\n                };\n            p[pos]();\n        }\n        function addBorderLine(c, pos) {\n            self.ctx.beginPath();\n            var p = {\n                t: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop);\n                },\n                r: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop + c.height);\n                },\n                b: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop + c.height);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop + c.height);\n                },\n                l: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop + c.height);\n                }\n            };\n            p[pos]();\n            self.ctx.stroke();\n        }\n        function addEllipsis(text, width) {\n            var c, w = 0;\n            if (self.ellipsisCache[text] && self.ellipsisCache[text][width]) {\n                return self.ellipsisCache[text][width];\n            }\n            //TODO Add ellipsis back when there is a fast way to do it\n            w = self.ctx.measureText(text).width;\n            self.ellipsisCache[text] = self.ellipsisCache[text] || {};\n            c = {value: text, width: w};\n            self.ellipsisCache[text][width] = c;\n            return c;\n        }\n        function wrapText(cell, splitChar) {\n            if (!cell.formattedValue) {\n                return { lines: [{width: 0, value: ''}], width: 0, height: cell.calculatedLineHeight };\n            }\n            var max = 0,\n                n = '\\n',\n                x,\n                word,\n                words = cell.formattedValue.split(splitChar),\n                textHeight = cell.calculatedLineHeight,\n                lines = [],\n                out = [],\n                wrap = self.style.cellWhiteSpace !== 'nowrap',\n                elWidth,\n                et = self.attributes.ellipsisText,\n                elClipLength,\n                plWidth,\n                clippedVal,\n                ogWordWidth,\n                previousLine,\n                line = {\n                    width: 0,\n                    value: ''\n                },\n                cHeight = wrap ? cell.paddedHeight : cell.calculatedLineHeight;\n            lines.push(line);\n            elWidth = self.ctx.measureText(' ' + et).width;\n            for (x = 0; x < words.length; x += 1) {\n                word = words[x];\n                var measure = self.ctx.measureText(word + splitChar);\n                if (line.width + measure.width + elWidth < cell.paddedWidth) {\n                    line.value += word + splitChar;\n                    line.width += measure.width;\n                    continue;\n                }\n                // if there is a hyphenated word that is too long\n                // split it and add the split set to the array\n                // then back up and re-read new split set\n                // this behavior seems right, it might not be\n                if (/\\w-\\w/.test(word) && cell.paddedWidth < measure.width) {\n                    words.splice(x, 1, word.split('-')[0] + '-', word.split('-')[1]);\n                    x -= 1;\n                    continue;\n                }\n                line = {\n                    width: measure.width,\n                    value: word + splitChar\n                };\n                if (x === 0) {\n                    lines = [];\n                    lines.push(line);\n                }\n                textHeight += cell.calculatedLineHeight;\n                if (textHeight > cHeight) {\n                    if (lines.length === 0) { break; }\n                    elClipLength = 1;\n                    previousLine = lines[lines.length - 1];\n                    if (previousLine.width < cell.paddedWidth && words.length === 1) { break; }\n                    clippedVal = previousLine.value + word;\n                    plWidth = self.ctx.measureText(clippedVal + et).width;\n                    var originText = clippedVal;\n                    if (plWidth > cell.paddedWidth) {\n                        var stepLength = parseInt(clippedVal.length / 2);\n                        var direction = -1;\n                        while (stepLength > 0) {\n                            clippedVal = originText.substr(0, stepLength * direction + clippedVal.length);\n                            plWidth = self.ctx.measureText(clippedVal + et).width;\n                            direction = plWidth > cell.paddedWidth ? -1 : 1;\n                            stepLength = parseInt(stepLength / 2);\n                        }\n                    }\n                    clippedVal = clippedVal + (originText.length != clippedVal.length ? et : '');\n                    previousLine.value = clippedVal;\n                    previousLine.width = plWidth;\n                    break;\n                }\n                if (x > 0) {\n                    lines.push(line);\n                }\n            }\n            return {\n                lines: lines,\n                width: max,\n                height: cell.calculatedLineHeight * lines.length\n            }\n        }\n        function drawText(cell) {\n            var ll = cell.text.lines.length,\n                h = (cell.fontHeight * cell.lineHeight),\n                x,\n                line,\n                wrap = self.style.cellWhiteSpace !== 'nowrap',\n                textHeight = 0;\n            for (x = 0; x < cell.text.lines.length; x += 1) {\n                line = cell.text.lines[x];\n                var vPos = Math.max((cell.height - (wrap ? cell.text.height : cell.calculatedLineHeight)) * 0.5, 0) + h,\n                    hPos = cell.paddingLeft + cell.treeArrowWidth + cell.orderByArrowWidth;\n                if (cell.horizontalAlignment === 'right') {\n                    hPos = cell.paddingLeft + cell.paddedWidth - line.width;\n                } else if (cell.horizontalAlignment === 'center') {\n                    hPos = cell.paddingLeft + ((cell.paddedWidth + cell.paddingRight) / 2) - (line.width / 2);\n                }\n                if (cell.verticalAlignment === 'top') {\n                    vPos = cell.calculatedLineHeight;\n                } else if (cell.verticalAlignment === 'bottom') {\n                    vPos = cell.height - cell.paddingBottom - cell.text.height;\n                }\n                line.height = h + cell.lineSpacing;\n                line.offsetLeft = hPos;\n                line.offsetTop = vPos;\n                line.x = cell.x + hPos;\n                line.y = cell.y + textHeight + vPos;\n                textHeight += line.height;\n                fillText(line.value, line.x, line.y);\n            }\n            if (self.attributes.debug && cell.active) {\n                requestAnimationFrame(function () {\n                    self.ctx.font = self.style.debugFont;\n                    self.ctx.fillStyle = self.style.debugColor;\n                    fillText(JSON.stringify({\n                        x: cell.x,\n                        y: cell.y,\n                        h: cell.height,\n                        w: cell.width,\n                        pw: cell.paddedWidth,\n                        idx: cell.columnIndex,\n                        idx_ord: cell.sortColumnIndex\n                    }, null, '\\t'),\n                        cell.x + 14, cell.y + 14);\n                    fillText(JSON.stringify(cell.text.lines.map(function (l) { return {w: l.width, v: l.value.length }; }), null, '\\t'),\n                        cell.x + 14, cell.y + 30);\n                });\n            }\n        }\n        function getFrozenColumnsWidth() {\n            var w = 0,\n                s = self.getSchema(),\n                x = 0,\n                n = Math.min(self.frozenColumn, s.length),\n                column;\n            hiddenFrozenColumnCount = 0;\n            while (x < n) {\n                column = s[x];\n                if (column.hidden) {\n                    hiddenFrozenColumnCount += 1;\n                } else {\n                    w += self.getColummnWidth(x);\n                }\n                x += 1;\n            }\n            return w;\n        }\n        /**\n         * Redraws the grid. No matter what the change, this is the only method required to refresh everything.\n         * @memberof canvasDatagrid\n         * @name draw\n         * @method\n         */\n         // r = literal row index\n         // rd = row data array\n         // i = user order index\n         // o = literal data index\n         // y = y drawing cursor\n         // x = x drawing cursor\n         // s = visible schema array\n         // cx = current x drawing cursor sub calculation var\n         // cy = current y drawing cursor sub calculation var\n         // a = static cell (like corner cell)\n         // p = perf counter\n         // l = data length\n         // u = current cell\n         // h = current height\n         // w = current width\n        self.draw = function (internal) {\n            if (self.dispatchEvent('beforedraw', {})) { return; }\n            if (!self.isChildGrid && (!self.height || !self.width)) {\n                return;\n            }\n            if (self.isChildGrid && internal) {\n                requestAnimationFrame(self.parentGrid.draw);\n                return;\n            }\n            if (self.intf.visible === false) {\n                return;\n            }\n            // initial values\n            var checkScrollHeight, rowHeaderCell, p, cx, cy, treeGrid, rowOpen,\n                rowHeight, cornerCell, y, x, c, h, w, s, r, rd, aCell,\n                data = (self.data || []),\n                bc = self.style.gridBorderCollapse === 'collapse',\n                selectionBorders = [],\n                moveBorders = [],\n                selectionHandles = [],\n                rowHeaders = [],\n                l = data.length,\n                u = self.currentCell || {},\n                columnHeaderCellHeight = self.getColumnHeaderCellHeight(),\n                rowHeaderCellWidth = self.getRowHeaderCellWidth(),\n                cellHeight = self.style.cellHeight;\n            drawCount += 1;\n            p = performance.now();\n            self.visibleRowHeights = [];\n            // if data length has changed, there is no way to know\n            if (data.length > self.orders.rows.length) {\n                self.createRowOrders();\n            }\n            function drawScrollBars() {\n                var drawCorner,\n                    en = self.scrollBox.entities,\n                    m = (self.style.scrollBarBoxMargin * 2);\n                self.ctx.strokeStyle = self.style.scrollBarBorderColor;\n                self.ctx.lineWidth = self.style.scrollBarBorderWidth;\n                en.horizontalBox.x = rowHeaderCellWidth + self.style.scrollBarBoxMargin\n                    + ((en.horizontalBar.width - self.scrollBox.scrollBoxWidth)\n                        * (self.scrollBox.scrollLeft / self.scrollBox.scrollWidth));\n                en.verticalBox.y = columnHeaderCellHeight + self.style.scrollBarBoxMargin\n                    + ((en.verticalBar.height - self.scrollBox.scrollBoxHeight)\n                        * (self.scrollBox.scrollTop / self.scrollBox.scrollHeight));\n                if (self.scrollBox.horizontalBarVisible) {\n                    self.ctx.fillStyle = self.style.scrollBarBackgroundColor;\n                    fillRect(en.horizontalBar.x, en.horizontalBar.y, en.horizontalBar.width + m, en.horizontalBar.height);\n                    strokeRect(en.horizontalBar.x, en.horizontalBar.y, en.horizontalBar.width + m, en.horizontalBar.height);\n                    self.ctx.fillStyle = self.style.scrollBarBoxColor;\n                    if (self.scrollBox.horizontalBoxVisible) {\n                        if (/horizontal/.test(u.context)) {\n                            self.ctx.fillStyle = self.style.scrollBarActiveColor;\n                        }\n                        radiusRect(en.horizontalBox.x, en.horizontalBox.y,\n                            en.horizontalBox.width, en.horizontalBox.height, self.style.scrollBarBoxBorderRadius);\n                        self.ctx.stroke();\n                        self.ctx.fill();\n                    }\n                    drawCorner = true;\n                    self.visibleCells.unshift(en.horizontalBar);\n                    self.visibleCells.unshift(en.horizontalBox);\n                }\n                if (self.scrollBox.verticalBarVisible) {\n                    self.ctx.fillStyle = self.style.scrollBarBackgroundColor;\n                    fillRect(en.verticalBar.x, en.verticalBar.y, en.verticalBar.width, en.verticalBar.height + m);\n                    strokeRect(en.verticalBar.x, en.verticalBar.y, en.verticalBar.width, en.verticalBar.height + m);\n                    if (self.scrollBox.verticalBoxVisible) {\n                        self.ctx.fillStyle = self.style.scrollBarBoxColor;\n                        if (/vertical/.test(u.context)) {\n                            self.ctx.fillStyle = self.style.scrollBarActiveColor;\n                        }\n                        radiusRect(en.verticalBox.x, en.verticalBox.y, en.verticalBox.width,\n                            en.verticalBox.height, self.style.scrollBarBoxBorderRadius);\n                        self.ctx.stroke();\n                        self.ctx.fill();\n                    }\n                    drawCorner = true;\n                    self.visibleCells.unshift(en.verticalBar);\n                    self.visibleCells.unshift(en.verticalBox);\n                }\n                if (drawCorner) {\n                    //corner\n                    self.ctx.strokeStyle = self.style.scrollBarCornerBorderColor;\n                    self.ctx.fillStyle = self.style.scrollBarCornerBackgroundColor;\n                    radiusRect(en.corner.x, en.corner.y, en.corner.width, en.corner.height, 0);\n                    self.ctx.stroke();\n                    self.ctx.fill();\n                    self.visibleCells.unshift(en.corner);\n                }\n            }\n            function createHandlesOverlayArray(cell) {\n                if (self.attributes.allowMovingSelection || self.mobile) {\n                    if (cell.selectionBorderTop && cell.selectionBorderRight && self.mobile) {\n                        selectionHandles.push([cell, 'tr']);\n                        cell.selectionHandle = 'tr';\n                    }\n                    if (cell.selectionBorderTop && cell.selectionBorderLeft && self.mobile) {\n                        selectionHandles.push([cell, 'tl']);\n                        cell.selectionHandle = 'tl';\n                    }\n                    if (cell.selectionBorderBottom && cell.selectionBorderLeft && self.mobile) {\n                        selectionHandles.push([cell, 'bl']);\n                        cell.selectionHandle = 'bl';\n                    }\n                    if (cell.selectionBorderBottom && cell.selectionBorderRight\n                            && (self.attributes.selectionHandleBehavior !== 'none' || self.mobile)) {\n                        selectionHandles.push([cell, 'br']);\n                        cell.selectionHandle = 'br';\n                    }\n                }\n            }\n            function createBorderOverlayArray(cell, drawArray, propPrefix, offsetPoint) {\n                offsetPoint = offsetPoint || {x: 0, y: 0};\n                cell.selectionBorder = '';\n                if (!cell.isRowHeader\n                        && self.selections[cell.rowIndex + -offsetPoint.y]\n                        && self.selections[cell.rowIndex + -offsetPoint.y].indexOf(cell.columnIndex + -offsetPoint.x) !== -1) {\n                    if ((!self.selections[cell.rowIndex - 1 + -offsetPoint.y]\n                            || self.selections[cell.rowIndex - 1 + -offsetPoint.y].indexOf(cell.columnIndex + -offsetPoint.x) === -1\n                            || cell.rowIndex === 0)\n                            && !cell.isHeader) {\n                        drawArray.push([cell, 't']);\n                        cell[propPrefix + 'BorderTop'] = true;\n                        cell[propPrefix + 'Border'] += 't';\n                    }\n                    if (!self.selections[cell.rowIndex + 1 + -offsetPoint.y]\n                            || self.selections[cell.rowIndex + 1 + -offsetPoint.y].indexOf(cell.columnIndex + -offsetPoint.x) === -1) {\n                        drawArray.push([cell, 'b']);\n                        cell[propPrefix + 'BorderBottom'] = true;\n                        cell[propPrefix + 'Border'] += 'b';\n                    }\n                    if (!self.selections[cell.rowIndex + -offsetPoint.y] || cell.columnIndex === 0\n                            || self.selections[cell.rowIndex + -offsetPoint.y].indexOf(cell.columnIndex - 1 + -offsetPoint.x) === -1) {\n                        drawArray.push([cell, 'l']);\n                        cell[propPrefix + 'BorderLeft'] = true;\n                        cell[propPrefix + 'Border'] += 'l';\n                    }\n                    if (!self.selections[cell.rowIndex + -offsetPoint.y] || cell.columnIndex === s.length\n                            || self.selections[cell.rowIndex + -offsetPoint.y].indexOf(cell.columnIndex + 1 + -offsetPoint.x) === -1) {\n                        drawArray.push([cell, 'r']);\n                        cell[propPrefix + 'BorderRight'] = true;\n                        cell[propPrefix + 'Border'] += 'r';\n                    }\n                }\n            }\n            function drawCell(d, rowOrderIndex, rowIndex) {\n                return function drawEach(header, headerIndex, columnOrderIndex) {\n                    if (header.hidden) { return 0; }\n                    var cellStyle = header.style || 'cell',\n                        cellGridAttributes,\n                        cell,\n                        isHeader = /HeaderCell/.test(cellStyle),\n                        isCorner = /cornerCell/.test(cellStyle),\n                        isRowHeader = 'rowHeaderCell' === cellStyle,\n                        isColumnHeader = 'columnHeaderCell' === cellStyle,\n                        selected = self.selections[rowOrderIndex] && self.selections[rowOrderIndex].indexOf(columnOrderIndex) !== -1,\n                        hovered = self.hovers.rowIndex === rowOrderIndex && self.hovers.columnIndex === columnOrderIndex,\n                        active = self.activeCell.rowIndex === rowOrderIndex && self.activeCell.columnIndex === columnOrderIndex,\n                        isColumnHeaderCellCap = cellStyle === 'columnHeaderCellCap',\n                        rawValue = d ? d[header.name] : undefined,\n                        isGrid = header.type === 'canvas-datagrid',\n                        activeHeader = (self.orders.rows[self.activeCell.rowIndex] === rowOrderIndex\n                                || self.orders.columns[self.activeCell.columnIndex] === headerIndex)\n                            && (columnOrderIndex === -1 || rowOrderIndex === -1)\n                            ? (isRowHeader ? 'activeRowHeaderCell' : 'activeColumnHeaderCell') : false,\n                        val,\n                        f = self.formatters[header.type || 'string'],\n                        orderByArrowSize = 0,\n                        treeArrowSize = 0,\n                        cellWidth = self.sizes.columns[headerIndex] || header.width,\n                        ev = {\n                            value: rawValue,\n                            row: d,\n                            header: header\n                        };\n                    if (isColumnHeaderCellCap) {\n                        cellWidth = w - x;\n                    }\n                    // if no data or schema are defined, a width is provided to the stub column\n                    if (cellWidth === undefined) {\n                        cellWidth = self.style.cellWidth;\n                    }\n                    cellWidth = cellWidth * self.scale;\n                    if (x + cellWidth + self.style.cellBorderWidth < 0) {\n                        x += cellWidth + self.style.cellBorderWidth;\n                    }\n                    if (active && cellStyle !== 'cornerCell') {\n                        cellStyle = 'activeCell';\n                    }\n                    if (self.visibleRows.indexOf(rowIndex) === -1 && !isHeader) {\n                        self.visibleRows.push(rowIndex);\n                    }\n                    val = self.dispatchEvent('formatcellvalue', ev);\n                    cx = x;\n                    cy = y;\n                    if (cellStyle === 'cornerCell') {\n                        cx = 0;\n                        cy = 0;\n                    } else if (isRowHeader) {\n                        cx = 0;\n                    } else if (isHeader) {\n                        cy = 0;\n                    }\n                    cell = {\n                        type: isGrid ? 'canvas-datagrid-cell' : header.type,\n                        style: cellStyle,\n                        nodeType: 'canvas-datagrid-cell',\n                        x: cx,\n                        y: cy,\n                        fontHeight: (self.style[cellStyle + 'FontHeight'] || 0) * self.scale,\n                        horizontalAlignment: self.style[cellStyle + 'HorizontalAlignment'],\n                        verticalAlignment: self.style[cellStyle + 'VerticalAlignment'],\n                        paddingLeft: (self.style[cellStyle + 'PaddingLeft'] || 0) * self.scale,\n                        paddingTop: (self.style[cellStyle + 'PaddingTop'] || 0) * self.scale,\n                        paddingRight: (self.style[cellStyle + 'PaddingRight'] || 0) * self.scale,\n                        paddingBottom: (self.style[cellStyle + 'PaddingBottom'] || 0) * self.scale,\n                        whiteSpace: self.style.cellWhiteSpace,\n                        lineHeight: self.style.cellLineHeight,\n                        lineSpacing: self.style.cellLineSpacing,\n                        offsetTop: self.canvasOffsetTop + cy,\n                        offsetLeft: self.canvasOffsetLeft + cx,\n                        scrollTop: self.scrollBox.scrollTop,\n                        scrollLeft: self.scrollBox.scrollLeft,\n                        active: active || activeHeader,\n                        hovered: hovered,\n                        selected: selected,\n                        width: cellWidth,\n                        height: cellHeight,\n                        offsetWidth: cellWidth,\n                        offsetHeight: cellHeight,\n                        parentNode: self.intf.parentNode,\n                        offsetParent: self.intf.parentNode,\n                        data: d,\n                        isCorner: isCorner,\n                        isHeader: isHeader,\n                        isColumnHeader: isColumnHeader,\n                        isColumnHeaderCellCap: isColumnHeaderCellCap,\n                        isRowHeader: isRowHeader,\n                        rowOpen: rowOpen,\n                        header: header,\n                        columnIndex: columnOrderIndex,\n                        rowIndex: rowOrderIndex,\n                        sortColumnIndex: headerIndex,\n                        sortRowIndex: rowIndex,\n                        isGrid: isGrid,\n                        isNormal: !isGrid && !isCorner && !isHeader,\n                        gridId: (self.attributes.name || '') + rowIndex + ':' + headerIndex,\n                        parentGrid: self.intf,\n                        innerHTML: '',\n                        activeHeader: activeHeader,\n                        value: isHeader && !isRowHeader ? (header.title || header.name) : rawValue\n                    };\n                    cell.calculatedLineHeight = (cell.fontHeight * cell.lineHeight) + cell.lineSpacing;\n                    cell.paddedWidth = cell.width - cell.paddingRight - cell.paddingLeft;\n                    cell.paddedHeight = cell.height - cell.paddingTop - cell.paddingBottom;\n                    ev.cell = cell;\n                    cell.userHeight = cell.isHeader ? self.sizes.rows[-1] : rowHeight;\n                    cell.userWidth = cell.isHeader ? self.sizes.columns.cornerCell : self.sizes.columns[headerIndex];\n                    self.visibleCells.unshift(cell);\n                    if (self.dispatchEvent('beforerendercell', ev)) { return; }\n                    self.ctx.fillStyle = self.style[cellStyle + 'BackgroundColor'];\n                    self.ctx.strokeStyle = self.style[cellStyle + 'BorderColor'];\n                    self.ctx.lineWidth = self.style[cellStyle + 'BorderWidth'];\n                    if (hovered) {\n                        self.ctx.fillStyle = self.style[cellStyle + 'HoverBackgroundColor'];\n                        self.ctx.strokeStyle = self.style[cellStyle + 'HoverBorderColor'];\n                    }\n                    if (selected) {\n                        self.ctx.fillStyle = self.style[cellStyle + 'SelectedBackgroundColor'];\n                        self.ctx.strokeStyle = self.style[cellStyle + 'SelectedBorderColor'];\n                    }\n                    if (activeHeader) {\n                        self.ctx.fillStyle = self.style[activeHeader + 'BackgroundColor'];\n                    }\n                    self.dispatchEvent('rendercell', ev);\n                    if (cell.isGrid) {\n                        if (cell.height !== rowHeight) {\n                            cell.height = rowHeight || self.style.cellHeightWithChildGrid;\n                            checkScrollHeight = true;\n                        }\n                        cell.width = self.sizes.columns[headerIndex] || self.style.cellWidthWithChildGrid;\n                    }\n                    if (rowOpen && !cell.isRowHeader) {\n                        cell.height = self.sizes.rows[rowIndex] || self.style.cellHeight;\n                    }\n                    if (!cell.isGrid) {\n                        fillRect(cx, cy, cell.width, cell.height);\n                        strokeRect(cx, cy, cell.width, cell.height);\n                    }\n                    self.ctx.save();\n                    radiusRect(cell.x, cell.y, cell.width, cell.height, 0);\n                    self.ctx.clip();\n                    self.dispatchEvent('afterrendercell', ev);\n                    if (cell.height !== cellHeight && !(rowOpen && !cell.isRowHeader)) {\n                        self.sizes.rows[isHeader ? -1 : rowIndex] = cell.height;\n                        checkScrollHeight = true;\n                    }\n                    if (cell.width !== cellWidth) {\n                        self.sizes.columns[headerIndex] = cell.width;\n                        checkScrollHeight = true;\n                    }\n                    if (isRowHeader && self.attributes.tree) {\n                        if (!self.dispatchEvent('rendertreearrow', ev)) {\n                            treeArrowSize = drawTreeArrow(cell, self.style[cellStyle + 'PaddingLeft'], cy, 0);\n                        }\n                    }\n                    if ((self.attributes.showRowNumbers && isRowHeader)\n                            || !isRowHeader) {\n                        if (cell.isGrid && !self.dispatchEvent('beforerendercellgrid', ev)) {\n                            if (!self.childGrids[cell.gridId]) {\n                                // HACK: this only allows setting of the child grids styles if data is set _after_\n                                // this is less than desirable.  An interface needs to be made to effect the\n                                // style of all cell grids.  One for individual grids already exists.\n                                cellGridAttributes = self.cellGridAttributes;\n                                cellGridAttributes.name = self.attributes.saveAppearance ? cell.gridId : undefined;\n                                cellGridAttributes.component = false;\n                                cellGridAttributes.parentNode = cell;\n                                cellGridAttributes.data = rawValue;\n                                ev.cellGridAttributes = cellGridAttributes;\n                                if (self.dispatchEvent('beforecreatecellgrid', ev)) { return; }\n                                self.childGrids[cell.gridId] = self.createGrid(cellGridAttributes);\n                                self.sizes.rows[rowIndex]\n                                    = self.sizes.rows[rowIndex] || self.style.cellGridHeight;\n                                checkScrollHeight = true;\n                            }\n                            cell.grid = self.childGrids[cell.gridId];\n                            cell.grid.parentNode = cell;\n                            cell.grid.visible = true;\n                            cell.grid.draw();\n                            self.dispatchEvent('rendercellgrid', ev);\n                        } else if (!cell.isGrid) {\n                            if (self.childGrids[cell.gridId]) {\n                                self.childGrids[cell.gridId].parentNode.offsetHeight = 0;\n                            }\n                            if (isHeader && self.orderBy === header.name) {\n                                if (!self.dispatchEvent('renderorderbyarrow', ev)) {\n                                    orderByArrowSize = drawOrderByArrow(cx + self.style[cellStyle + 'PaddingLeft'], 0);\n                                }\n                            }\n                            self.ctx.fillStyle = self.style[cellStyle + 'Color'];\n                            if (hovered) {\n                                self.ctx.fillStyle = self.style[cellStyle + 'HoverColor'];\n                            }\n                            if (selected) {\n                                self.ctx.fillStyle = self.style[cellStyle + 'SelectedColor'];\n                            }\n                            if (activeHeader) {\n                                self.ctx.fillStyle = self.style[activeHeader + 'Color'];\n                            }\n                            cell.treeArrowWidth = treeArrowSize;\n                            cell.orderByArrowWidth = orderByArrowSize;\n                            // create text ref to see if height needs to expand\n                            val = val !== undefined ? val : f\n                                ? f(ev) : '';\n                            if (val === undefined && !f) {\n                                val = '';\n                                console.warn('canvas-datagrid: Unknown format '\n                                    + header.type + ' add a cellFormater');\n                            }\n                            cell.formattedValue = ((val !== undefined && val !== null) ? val : '').toString();\n                            if (self.columnFilters && self.columnFilters[val] !== undefined && isHeader) {\n                                cell.formattedValue = self.attributes.filterTextPrefix + val;\n                            }\n                            self.ctx.font = (self.style[cellStyle + 'FontHeight'] * self.scale) + 'px ' + self.style[cellStyle + 'FontName'];\n                            if (!self.dispatchEvent('formattext', ev)) {\n                                cell.text = wrapText(cell, ' ');\n                            }\n                            if (!self.dispatchEvent('rendertext', ev)) {\n                                if (cell.innerHTML || header.type === 'html') {\n                                    drawHtml(cell);\n                                } else {\n                                    drawText(cell);\n                                }\n                            }\n                        }\n                    }\n                    if (active) {\n                        aCell = cell;\n                    }\n                    createBorderOverlayArray(cell, selectionBorders, 'selection');\n                    // createBorderOverlayArray calculates data for createHandlesOverlayArray so it must go 2nd\n                    createHandlesOverlayArray(cell);\n                    if (self.movingSelection) {\n                        createBorderOverlayArray(cell, moveBorders, 'move', self.moveOffset);\n                    }\n                    self.ctx.restore();\n                    x += cell.width + (bc ? 0 : self.style.cellBorderWidth);\n                    return cell.width;\n                };\n            }\n            function drawRowHeader(rowData, index, rowOrderIndex) {\n                var a, i;\n                if (self.attributes.showRowHeaders) {\n                    x = 0;\n                    i = index + 1;\n                    rowHeaderCell = {'rowHeaderCell': i };\n                    a = {\n                        name: 'rowHeaderCell',\n                        width: self.sizes.columns[-1] || self.style.rowHeaderCellWidth,\n                        style: 'rowHeaderCell',\n                        type: 'string',\n                        data: i,\n                        index: -1\n                    };\n                    rowOpen = self.openChildren[index];\n                    drawCell(rowHeaderCell, index, rowOrderIndex)(a, -1, -1);\n                }\n            }\n            function drawHeaders() {\n                var d, g = s.length, i, o, columnHeaderCell, header, nonFrozenHeaderWidth;\n                function drawHeaderColumnRange(start, end) {\n                    end = Math.min(end, g);\n                    for (o = start; o < end; o += 1) {\n                        i = self.orders.columns[o];\n                        header = s[i];\n                        if (!header.hidden) {\n                            d = {\n                                title: header.title,\n                                name: header.name,\n                                width: header.width || self.style.cellWidth,\n                                style: 'columnHeaderCell',\n                                type: 'string',\n                                index: o,\n                                order: i\n                            };\n                            columnHeaderCell = {'columnHeaderCell': header.title || header.name};\n                            x += drawCell(columnHeaderCell, -1, -1)(d, i, o);\n                            if (x > self.width + self.scrollBox.scrollLeft) {\n                                break;\n                            }\n                        }\n                    }\n                }\n                rowHeaders.forEach(function (rArgs, rhIndex) {\n                    y = rArgs[3];\n                    cellHeight = rArgs[4];\n                    if (rhIndex === self.frozenRow) {\n                        self.ctx.save();\n                        radiusRect(0, self.lastFrozenRowPixel, self.width, self.height - self.lastFrozenRowPixel, 0);\n                        self.ctx.clip();\n                    }\n                    drawRowHeader(rArgs[0], rArgs[1], rArgs[2]);\n                });\n                self.ctx.restore();\n                if (self.attributes.showColumnHeaders) {\n                    x = -self.scrollBox.scrollLeft + self.scrollPixelLeft + self.style.columnHeaderCellBorderWidth;\n                    if (self.attributes.showRowHeaders) {\n                        x += rowHeaderCellWidth;\n                    }\n                    y = 0;\n                    // cell height might have changed during drawing\n                    cellHeight = self.getColumnHeaderCellHeight();\n                    drawHeaderColumnRange(self.scrollIndexLeft, g);\n                    nonFrozenHeaderWidth = x;\n                    x = self.style.columnHeaderCellBorderWidth;\n                    if (self.attributes.showRowHeaders) {\n                        x += rowHeaderCellWidth;\n                    }\n                    drawHeaderColumnRange(0, self.frozenColumn);\n                    // fill in the space right of the headers\n                    x = nonFrozenHeaderWidth;\n                    if (x < w) {\n                        c = {\n                            name: '',\n                            width: self.style.scrollBarWidth,\n                            style: 'columnHeaderCellCap',\n                            isColumnHeaderCell: true,\n                            isColumnHeaderCellCap: true,\n                            type: 'string',\n                            index: s.length\n                        };\n                        drawCell({endCap: ''}, -1, -1)(c, -1, -1);\n                    }\n                    // fill in the space right of the headers\n                    if (self.attributes.showRowHeaders) {\n                        cornerCell = {'cornerCell': '' };\n                        x = 0;\n                        c = {\n                            name: 'cornerCell',\n                            width: self.style.rowHeaderCellWidth,\n                            style: 'cornerCell',\n                            type: 'string',\n                            index: -1\n                        };\n                        drawCell(cornerCell, -1, -1)(c, -1, -1);\n                    }\n                }\n            }\n            function drawRow(r, d) {\n                var i, treeHeight, rowSansTreeHeight, o, g = s.length;\n                if (y - (cellHeight * 2) > h) {\n                    return false;\n                }\n                rd = data[r];\n                rowOpen = self.openChildren[r];\n                rowSansTreeHeight = (self.sizes.rows[r] || self.style.cellHeight) * self.scale;\n                treeHeight = (rowOpen ? self.sizes.trees[r] : 0) * self.scale;\n                rowHeight = (rowSansTreeHeight + treeHeight);\n                if (y < -rowHeight) {\n                    return false;\n                }\n                if (self.attributes.showRowHeaders) {\n                    x += rowHeaderCellWidth;\n                }\n                cellHeight = rowHeight;\n                //draw normal columns\n                for (o = (self.scrollIndexLeft); o < g; o += 1) {\n                    i = self.orders.columns[o];\n                    x += drawCell(rd, r, d)(s[i], i, o);\n                    if (x > self.width) {\n                        self.scrollIndexRight = o;\n                        self.scrollPixelRight = x;\n                        break;\n                    }\n                }\n                //draw frozen columns\n                x = 0;\n                if (self.attributes.showRowHeaders) {\n                    x += rowHeaderCellWidth;\n                }\n                for (o = 0; o < self.frozenColumn; o += 1) {\n                    i = self.orders.columns[o];\n                    x += drawCell(rd, r, d)(s[i], i, o);\n                    if (x > self.width) {\n                        break;\n                    }\n                }\n                self.lastFrozenColumnPixel = x;\n                // cell height might have changed during drawing\n                cellHeight = rowHeight;\n                x = -self.scrollBox.scrollLeft + self.scrollPixelLeft + self.style.cellBorderWidth;\n                // don't draw a tree for the new row\n                treeGrid = self.childGrids[r];\n                if (r !== data.length && rowOpen) {\n                    treeGrid.visible = true;\n                    treeGrid.parentNode = {\n                        offsetTop: y + rowSansTreeHeight + self.canvasOffsetTop,\n                        offsetLeft: rowHeaderCellWidth - 1 + self.canvasOffsetLeft,\n                        offsetHeight: treeHeight,\n                        offsetWidth: self.width - rowHeaderCellWidth - self.style.scrollBarWidth - 1,\n                        offsetParent: self.intf.parentNode,\n                        parentNode: self.intf.parentNode,\n                        style: self.style,\n                        nodeType: 'canvas-datagrid-tree',\n                        scrollTop: self.scrollBox.scrollTop,\n                        scrollLeft: self.scrollBox.scrollLeft,\n                        rowIndex: r\n                    };\n                    self.visibleCells.unshift({\n                        rowIndex: r,\n                        columnIndex: 0,\n                        y: treeGrid.parentNode.offsetTop,\n                        x: treeGrid.parentNode.offsetLeft,\n                        height: treeGrid.height,\n                        width: treeGrid.width,\n                        style: 'tree-grid',\n                        type: treeGrid.parentNode.nodeType\n                    });\n                    treeGrid.draw();\n                } else if (treeGrid) {\n                    treeGrid.parentNode.offsetHeight = 0;\n                    delete self.sizes.trees[r];\n                }\n                rowHeaders.push([rd, r, d, y, rowHeight]);\n                self.visibleRowHeights[r] = rowHeight;\n                y += cellHeight + (bc ? 0 : self.style.cellBorderWidth);\n                return true;\n            }\n            function initDraw() {\n                self.visibleRows = [];\n                s = self.getSchema();\n                self.visibleCells = [];\n                self.canvasOffsetTop = self.isChildGrid ? self.parentNode.offsetTop : 0;\n                self.canvasOffsetLeft = self.isChildGrid ? self.parentNode.offsetLeft : 0;\n                h = self.height;\n                w = self.width;\n            }\n            function drawBackground() {\n                radiusRect(0, 0, w, h, 0);\n                self.ctx.clip();\n                self.ctx.fillStyle = self.style.gridBackgroundColor;\n                fillRect(0, 0, w, h);\n            }\n            function drawFrozenRows() {\n                var n, ln = Math.min(data.length, self.frozenRow);\n                x = -self.scrollBox.scrollLeft + self.scrollPixelLeft + self.style.cellBorderWidth;\n                y = columnHeaderCellHeight;\n                for (r = 0; r < ln; r += 1) {\n                    n = self.orders.rows[r];\n                    if (!drawRow(n, r)) {\n                        break;\n                    }\n                }\n                if (self.attributes.allowFreezingRows) {\n                    // HACK great, another stupid magic number.\n                    // Background will appear as a 0.5px artifact behind the row freeze bar without this hack\n                    y += self.style.frozenMarkerBorderWidth + self.style.frozenMarkerWidth - 0.4999999999;\n                }\n                self.lastFrozenRowPixel = y;\n            }\n            function drawRows() {\n                self.ctx.save();\n                if (self.frozenRow > 0) {\n                    radiusRect(0, self.lastFrozenRowPixel, self.width, self.height - self.lastFrozenRowPixel, 0);\n                    self.ctx.clip();\n                }\n                var o, n, i, g = s.length;\n                x = -self.scrollBox.scrollLeft + self.scrollPixelLeft + self.style.cellBorderWidth;\n                if (!self.attributes.snapToRow) {\n                    y += -self.scrollBox.scrollTop + self.scrollPixelTop + self.style.cellBorderWidth;\n                }\n                for (r = self.frozenRow + self.scrollIndexTop; r < l; r += 1) {\n                    n = self.orders.rows[r];\n                    self.scrollIndexBottom = r;\n                    self.scrollPixelBottom = y;\n                    if (!drawRow(n, r)) {\n                        break;\n                    }\n                }\n                if (self.attributes.showNewRow) {\n                    if (self.attributes.showRowHeaders) {\n                        x += rowHeaderCellWidth;\n                    }\n                    rowHeight = cellHeight = self.style.cellHeight;\n                    rowOpen = false;\n                    for (o = self.scrollIndexLeft; o < g; o += 1) {\n                        i = self.orders.columns[o];\n                        x += drawCell(self.newRow, data.length, data.length)(s[i], i, o);\n                        if (x > self.width + self.scrollBox.scrollLeft) {\n                            break;\n                        }\n                    }\n                    rowHeaders.push([self.newRow, data.length, data.length, y, rowHeight]);\n                }\n                self.ctx.restore();\n            }\n            function drawMoveMarkers() {\n                if (!self.movingSelection) { return; }\n                self.ctx.lineWidth = self.style.moveOverlayBorderWidth;\n                self.ctx.strokeStyle = self.style.moveOverlayBorderColor;\n                self.ctx.setLineDash(self.style.moveOverlayBorderSegments);\n                moveBorders.forEach(function (c) {\n                    addBorderLine(c[0], c[1]);\n                });\n                self.ctx.setLineDash([]);\n            }\n            function drawReorderMarkers() {\n                if (!self.reorderObject) { return; }\n                var b = {\n                        height: self.reorderObject.height,\n                        width: self.reorderObject.width,\n                        x: self.reorderObject.x + self.reorderObject.dragOffset.x,\n                        y: self.reorderObject.y + self.reorderObject.dragOffset.y\n                    },\n                    m = {\n                        width: w,\n                        height: h,\n                        x: 0,\n                        y: 0\n                    };\n                self.ctx.fillStyle = self.style.reorderMarkerBackgroundColor;\n                self.ctx.lineWidth = self.style.reorderMarkerBorderWidth;\n                self.ctx.strokeStyle = self.style.reorderMarkerBorderColor;\n                if (self.dragMode === 'row-reorder') {\n                    b.width = w;\n                    b.x = 0;\n                    m.width = w;\n                    m.height = self.currentCell.height;\n                    m.y = self.currentCell.y;\n                    fillRect(b.x, b.y, b.width, b.height);\n                    strokeRect(b.x, b.y, b.width, b.height);\n                    self.ctx.lineWidth = self.style.reorderMarkerIndexBorderWidth;\n                    self.ctx.strokeStyle = self.style.reorderMarkerIndexBorderColor;\n                    if (self.currentCell.rowIndex !== self.reorderObject.rowIndex\n                            && self.currentCell.rowIndex > -1\n                            && self.currentCell.rowIndex < l) {\n                        addBorderLine(m, self.reorderTarget.sortRowIndex > self.reorderObject.sortRowIndex ? 'b' : 't');\n                    }\n                } else if (self.dragMode === 'column-reorder' && self.reorderObject) {\n                    b.height = h;\n                    b.y = 0;\n                    m.height = h;\n                    m.width = self.currentCell.width;\n                    m.y = 0;\n                    m.x = self.currentCell.x;\n                    fillRect(b.x, b.y, b.width, b.height);\n                    strokeRect(b.x, b.y, b.width, b.height);\n                    self.ctx.lineWidth = self.style.reorderMarkerIndexBorderWidth;\n                    self.ctx.strokeStyle = self.style.reorderMarkerIndexBorderColor;\n                    if (self.currentCell.sortColumnIndex !== self.reorderObject.sortColumnIndex\n                            && self.currentCell.sortColumnIndex > -1\n                            && self.currentCell.sortColumnIndex < s.length) {\n                        addBorderLine(m, self.reorderTarget.columnIndex > self.reorderObject.columnIndex ? 'r' : 'l');\n                    }\n                }\n            }\n            function drawBorder() {\n                self.ctx.lineWidth = self.style.gridBorderWidth;\n                self.ctx.strokeStyle = self.style.gridBorderColor;\n                strokeRect(0, 0, self.width, self.height);\n            }\n            function drawSelectionBorders() {\n                self.ctx.lineWidth = self.style.selectionOverlayBorderWidth;\n                self.ctx.strokeStyle = self.style.selectionOverlayBorderColor;\n                function dsb(c) {\n                    addBorderLine(c[0], c[1]);\n                }\n                selectionBorders.filter(function (c) {\n                    return c[0].rowIndex < self.frozenRow && c[0].columnIndex < self.frozenColumn;\n                }).forEach(dsb);\n                self.ctx.save();\n                clipFrozenArea(0);\n                selectionBorders.filter(function (c) {\n                    return c[0].rowIndex >= self.frozenRow && c[0].columnIndex >= self.frozenColumn;\n                }).forEach(dsb);\n                self.ctx.restore();\n                self.ctx.save();\n                clipFrozenArea(1);\n                selectionBorders.filter(function (c) {\n                    return c[0].rowIndex >= self.frozenRow && c[0].columnIndex < self.frozenColumn;\n                }).forEach(dsb);\n                self.ctx.restore();\n                self.ctx.save();\n                clipFrozenArea(2);\n                selectionBorders.filter(function (c) {\n                    return c[0].rowIndex < self.frozenRow && c[0].columnIndex >= self.frozenColumn;\n                }).forEach(dsb);\n                self.ctx.restore();\n            }\n            function drawSelectionHandles() {\n                if (self.mobile || self.attributes.allowMovingSelection) {\n                    self.ctx.lineWidth = self.style.selectionHandleBorderWidth;\n                    self.ctx.strokeStyle = self.style.selectionHandleBorderColor;\n                    self.ctx.fillStyle = self.style.selectionHandleColor;\n                    selectionHandles.forEach(function (c) {\n                        addselectionHandle(c[0], c[1]);\n                        var az = self.attributes.touchSelectHandleZone / 2,\n                            ax = c[0].x + (c[1] === 'tl' || c[1] === 'bl' ? 0 : c[0].width) - az,\n                            ay = c[0].y + (c[1] === 'bl' || c[1] === 'br' ? c[0].height : 0) - az;\n                        self.visibleCells.unshift({\n                            x: ax,\n                            y: ay,\n                            height: self.style.selectionHandleSize + az,\n                            width: self.style.selectionHandleSize + az,\n                            style: 'selection-handle-' + c[1]\n                        });\n                    });\n                }\n            }\n            function drawActiveCell() {\n                if (!aCell) { return; }\n                self.ctx.save();\n                var cl = self.activeCell.columnIndex + 1 > self.frozenColumn || self.activeCell.rowIndex + 1 > self.frozenRow,\n                    acx = cl ? self.lastFrozenColumnPixel : 0,\n                    acy = cl ? self.lastFrozenRowPixel : 0,\n                    acw = cl ? self.width - self.lastFrozenColumnPixel : self.width,\n                    ach = cl ? self.height - self.lastFrozenRowPixel : self.height;\n                radiusRect(acx, acy, acw, ach, 0);\n                self.ctx.clip();\n                if (self.attributes.selectionMode === 'row') {\n                    if (self.activeCell && self.activeCell.rowIndex === aCell.rowIndex) {\n                        self.ctx.lineWidth = self.style.activeCellOverlayBorderWidth;\n                        self.ctx.strokeStyle = self.style.activeCellOverlayBorderColor;\n                        strokeRect(0, aCell.y, self.getHeaderWidth() + rowHeaderCellWidth, self.visibleRowHeights[aCell.rowIndex]);\n                    }\n                } else {\n                    self.ctx.lineWidth = self.style.activeCellOverlayBorderWidth;\n                    self.ctx.strokeStyle = self.style.activeCellOverlayBorderColor;\n                    strokeRect(aCell.x, aCell.y, aCell.width, aCell.height);\n                }\n                self.ctx.restore();\n            }\n            function drawFrozenMarkers() {\n                var my = self.lastFrozenRowPixel - self.style.frozenMarkerWidth,\n                    mx = self.lastFrozenColumnPixel - self.style.frozenMarkerBorderWidth,\n                    xHover = self.currentCell && self.currentCell.style === 'frozen-row-marker',\n                    yHover = self.currentCell && self.currentCell.style === 'frozen-column-marker';\n                self.ctx.lineWidth = self.style.frozenMarkerBorderWidth;\n                if (self.attributes.allowFreezingColumns) {\n                    self.ctx.fillStyle = yHover ? self.style.frozenMarkerHoverColor : self.style.frozenMarkerColor;\n                    self.ctx.strokeStyle = yHover ? self.style.frozenMarkerHoverBorderColor : self.style.frozenMarkerBorderColor;\n                    fillRect(mx, 0, self.style.frozenMarkerWidth, self.height);\n                    strokeRect(mx, 0, self.style.frozenMarkerWidth, self.height);\n                    self.visibleCells.unshift({\n                        x: mx,\n                        y: 0,\n                        height: self.height,\n                        width: self.style.frozenMarkerWidth + self.style.frozenMarkerBorderWidth,\n                        style: 'frozen-column-marker'\n                    });\n                }\n                if (self.attributes.allowFreezingRows) {\n                    self.ctx.fillStyle = xHover ? self.style.frozenMarkerHoverColor : self.style.frozenMarkerColor;\n                    self.ctx.strokeStyle = xHover ? self.style.frozenMarkerHoverBorderColor : self.style.frozenMarkerBorderColor;\n                    fillRect(0, my, self.width, self.style.frozenMarkerWidth);\n                    strokeRect(0, my, self.width, self.style.frozenMarkerWidth);\n                    self.visibleCells.unshift({\n                        x: 0,\n                        y: my,\n                        height: self.style.frozenMarkerWidth + self.style.frozenMarkerBorderWidth,\n                        width: self.width,\n                        style: 'frozen-row-marker'\n                    });\n                }\n                if (self.freezeMarkerPosition) {\n                    self.ctx.fillStyle = self.style.frozenMarkerActiveColor;\n                    self.ctx.strokeStyle = self.style.frozenMarkerActiveBorderColor;\n                    if (self.dragMode === 'frozen-column-marker') {\n                        fillRect(self.freezeMarkerPosition.x, 0, self.style.frozenMarkerWidth, self.height);\n                        strokeRect(self.freezeMarkerPosition.x, 0, self.style.frozenMarkerWidth, self.height);\n                    } else {\n                        fillRect(0, self.freezeMarkerPosition.y, self.width, self.style.frozenMarkerWidth);\n                        strokeRect(0, self.freezeMarkerPosition.y, self.width, self.style.frozenMarkerWidth);\n                    }\n                }\n            }\n            function drawPerfLines() {\n                if (!self.attributes.showPerformance) { return; }\n                var pw = 250,\n                    px = self.width - pw - self.style.scrollBarWidth - (self.style.scrollBarBorderWidth * 2),\n                    py = columnHeaderCellHeight,\n                    ph = 100;\n                if (scrollDebugCounters.length === 0) { scrollDebugCounters = fillArray(0, perfWindowSize, 1, function () { return [0, 0]; }); }\n                if (touchPPSCounters.length === 0) { touchPPSCounters = fillArray(0, perfWindowSize, 1, function () { return [0, 0]; }); }\n                if (entityCount.length === 0) { entityCount = fillArray(0, perfWindowSize, 1, 0); }\n                self.ctx.lineWidth = 0.5;\n                function dpl(name, perfArr, arrIndex, max, color, useAbs, rowIndex) {\n                    var v;\n                    drawPerfLine(pw, ph, px, py, perfArr, arrIndex, max, color, useAbs);\n                    self.ctx.fillStyle = color;\n                    fillRect(3 + px, py + 9 + (rowIndex * 11), 8, 8);\n                    self.ctx.fillStyle = self.style.debugPerfChartTextColor;\n                    v = arrIndex !== undefined ? perfArr[0][arrIndex] : perfArr[0];\n                    fillText(name + ' ' + (isNaN(v) ? 0 : v).toFixed(3), 14 + px, py + 16 + (rowIndex * 11));\n                }\n                self.ctx.textAlign = 'left';\n                self.ctx.font = self.style.debugFont;\n                self.ctx.fillStyle = self.style.debugPerfChartBackground;\n                fillRect(px, py, pw, ph);\n                [['Scroll Height', scrollDebugCounters, 0, self.scrollBox.scrollHeight, self.style.debugScrollHeightColor, false],\n                    ['Scroll Width', scrollDebugCounters, 1, self.scrollBox.scrollWidth, self.style.debugScrollWidthColor, false],\n                    ['Performance', perfCounters, undefined, 200, self.style.debugPerformanceColor, false],\n                    ['Entities', entityCount, undefined, 1500, self.style.debugEntitiesColor, false],\n                    ['TouchPPSX', touchPPSCounters, 0, 1000, self.style.debugTouchPPSXColor, true],\n                    ['TouchPPSY', touchPPSCounters, 1, 1000, self.style.debugTouchPPSYColor, true]\n                    ].forEach(function (i, index) {\n                    i.push(index);\n                    dpl.apply(null, i);\n                });\n                self.ctx.fillStyle = self.style.debugPerfChartBackground;\n                entityCount.pop();\n                entityCount.unshift(self.visibleCells.length);\n                scrollDebugCounters.pop();\n                scrollDebugCounters.unshift([self.scrollBox.scrollTop, self.scrollBox.scrollLeft]);\n                touchPPSCounters.pop();\n                touchPPSCounters.unshift([self.yPPS, self.xPPS]);\n            }\n            function drawDebug() {\n                self.ctx.save();\n                var d;\n                if (self.attributes.showPerformance || self.attributes.debug) {\n                    if (perfCounters.length === 0) { perfCounters = fillArray(0, perfWindowSize, 1, 0); }\n                    perfCounters.pop();\n                    perfCounters.unshift(performance.now() - p);\n                }\n                if (!self.attributes.debug) {\n                    self.ctx.restore();\n                    return;\n                }\n                self.ctx.font = self.style.debugFont;\n                d = {};\n                d.perf = (perfCounters.reduce(function (a, b) {\n                    return a + b;\n                }, 0) / Math.min(drawCount, perfCounters.length)).toFixed(1);\n                d.perfDelta = perfCounters[0].toFixed(1);\n                d.frozenColumnsWidth = getFrozenColumnsWidth();\n                d.htmlImages = Object.keys(self.htmlImageCache).length;\n                d.reorderObject = 'x: ' + (self.reorderObject || {columnIndex: 0}).columnIndex + ', y: ' + (self.reorderObject || {rowIndex: 0}).rowIndex;\n                d.reorderTarget = 'x: ' + (self.reorderTarget || {columnIndex: 0}).columnIndex + ', y: ' + (self.reorderTarget || {rowIndex: 0}).rowIndex;\n                d.scale = self.scale;\n                d.startScale = self.startScale;\n                d.scaleDelta = self.scaleDelta;\n                d.zoomDeltaStart = self.zoomDeltaStart;\n                d.touchLength = self.touchLength;\n                d.touches = 'y0: ' + (self.touchPosition || {y: 0}).y + ' y1: ' + (self.touchPosition1 || {y: 0}).y;\n                d.scrollBox = self.scrollBox.toString();\n                d.scrollIndex = 'x: ' + self.scrollIndexLeft + ', y: ' + self.scrollIndexTop;\n                d.scrollPixel = 'x: ' + self.scrollPixelLeft + ', y: ' + self.scrollPixelTop;\n                d.canvasOffset = 'x: ' + self.canvasOffsetLeft + ', y: ' + self.canvasOffsetTop;\n                d.touchDelta = 'x: ' + self.touchDelta.x + ', y: ' + self.touchDelta.y;\n                d.touchAnimateTo = 'x: ' + self.touchAnimateTo.x + ', y: ' + self.touchAnimateTo.y;\n                d.scrollAnimation = 'x: ' + self.scrollAnimation.x + ', y: ' + self.scrollAnimation.y;\n                d.touchPPS = 'x: ' + self.xPPS + ', y: ' + self.yPPS;\n                d.touchPPST = 'x: ' + self.xPPST + ', y: ' + self.yPPST;\n                d.touchDuration = self.touchDuration;\n                d.pointerLockPosition =  self.pointerLockPosition ?\n                        self.pointerLockPosition.x + ', ' + self.pointerLockPosition.y : '';\n                d.size = 'w: ' + self.width + ', h: ' + self.height;\n                d.mouse = 'x: ' + self.mouse.x + ', y: ' + self.mouse.y;\n                d.touch = !self.touchStart\n                    ? '' : 'x: ' + self.touchStart.x + ', y: ' + self.touchStart.y;\n                d.entities = self.visibleCells.length;\n                d.hasFocus = self.hasFocus;\n                d.dragMode = self.dragMode;\n                if (self.currentCell) {\n                    d.columnIndex = self.currentCell.columnIndex;\n                    d.rowIndex = self.currentCell.rowIndex;\n                    d.sortColumnIndex = self.currentCell.sortColumnIndex;\n                    d.sortRowIndex = self.currentCell.sortRowIndex;\n                    d.context = self.currentCell.context;\n                    d.dragContext = self.currentCell.dragContext;\n                    d.style = self.currentCell.style;\n                    d.type = self.currentCell.type;\n                }\n                self.ctx.textAlign = 'right';\n                self.ctx.fillStyle = self.style.debugBackgroundColor;\n                fillRect(0, 0, self.width, self.height);\n                Object.keys(d).forEach(function (key, index) {\n                    var m = key + ': ' + d[key],\n                        lh = 14;\n                    self.ctx.fillStyle = self.style.debugColor;\n                    fillText(m, w - 20, (self.attributes.showPerformance ? 140 : 24) + (index * lh));\n                });\n                self.ctx.restore();\n            }\n            self.ctx.save();\n            initDraw();\n            drawBackground();\n            drawFrozenRows();\n            drawRows();\n            drawActiveCell();\n            drawHeaders();\n            drawFrozenMarkers();\n            drawSelectionHandles();\n            drawReorderMarkers();\n            drawMoveMarkers();\n            drawBorder();\n            drawSelectionBorders();\n            drawScrollBars();\n            if (checkScrollHeight) {\n                self.resize(true);\n            }\n            drawDebug();\n            drawPerfLines();\n            if (self.dispatchEvent('afterdraw', {})) { return; }\n            self.ctx.restore();\n        };\n    };\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }),\n/* 4 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true, plusplus: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function () {\n    'use strict';\n    return function (self) {\n        var wheeling;\n        self.stopPropagation = function (e) { e.stopPropagation(); };\n        /**\n         * Adds an event listener to the given event.\n         * @memberof canvasDatagrid\n         * @name addEventListener\n         * @method\n         * @param {string} ev The name of the event to subscribe to.\n         * @param {function} fn The event procedure to execute when the event is raised.\n         */\n        self.addEventListener = function (ev, fn) {\n            self.events[ev] = self.events[ev] || [];\n            self.events[ev].unshift(fn);\n        };\n        /**\n         * Removes the given listener function from the given event.  Must be an actual reference to the function that was bound.\n         * @memberof canvasDatagrid\n         * @name removeEventListener\n         * @method\n         * @param {string} ev The name of the event to unsubscribe from.\n         * @param {function} fn The event procedure to execute when the event is raised.\n         */\n        self.removeEventListener = function (ev, fn) {\n            (self.events[ev] || []).forEach(function removeEachListener(sfn, idx) {\n                if (fn === sfn) {\n                    self.events[ev].splice(idx, 1);\n                }\n            });\n        };\n        /**\n         * Fires the given event, padding an event object to the event subscribers.\n         * @memberof canvasDatagrid\n         * @name dispatchEvent\n         * @method\n         * @param {number} ev The name of the event to dispatch.\n         * @param {number} e The event object.\n         */\n        self.dispatchEvent = function (ev, e) {\n            e = ev.type ? ev : (e || {});\n            ev = ev.type || ev;\n            var defaultPrevented;\n            function preventDefault() {\n                defaultPrevented = true;\n            }\n            if (!self.events[ev]) { return; }\n            self.events[ev].forEach(function dispatchEachEvent(fn) {\n                e.ctx = self.ctx;\n                e.preventDefault = preventDefault;\n                fn.apply(self.intf, [e]);\n            });\n            return defaultPrevented;\n        };\n        self.getRatio = function () {\n            return Math.min(self.attributes.maxPixelRatio, (window.devicePixelRatio || 1) /\n                (self.ctx.webkitBackingStorePixelRatio ||\n                    self.ctx.mozBackingStorePixelRatio ||\n                    self.ctx.msBackingStorePixelRatio ||\n                    self.ctx.oBackingStorePixelRatio ||\n                    self.ctx.backingStorePixelRatio || 1));\n        };\n        self.resize = function (drawAfterResize) {\n            if (!self.canvas) { return; }\n            var x,\n                v = {\n                    x: 0,\n                    y: 0,\n                    height: 0,\n                    width: 0,\n                    style: 'vertical-scroll-bar'\n                },\n                n = {\n                    x: 0,\n                    y: 0,\n                    height: 0,\n                    width: 0,\n                    style: 'horizontal-scroll-bar'\n                },\n                vb = {\n                    x: 0,\n                    y: 0,\n                    height: 0,\n                    width: 0,\n                    style: 'vertical-scroll-box'\n                },\n                nb = {\n                    x: 0,\n                    y: 0,\n                    height: 0,\n                    width: 0,\n                    style: 'horizontal-scroll-box'\n                },\n                co = {\n                    x: 0,\n                    y: 0,\n                    height: 0,\n                    width: 0,\n                    isCorner: true,\n                    isScrollBoxCorner: true,\n                    style: 'scroll-box-corner'\n                },\n                m = (self.style.scrollBarBoxMargin * 2),\n                b = (self.style.scrollBarBorderWidth * 2),\n                d = self.style.scrollBarBoxMargin * 0.5,\n                sbw = self.style.scrollBarWidth + (self.style.scrollBarBorderWidth * 2),\n                ratio = self.getRatio(),\n                bm = self.style.gridBorderCollapse === 'collapse' ? 1 : 2,\n                cellBorder = self.style.cellBorderWidth * bm,\n                columnHeaderCellBorder = self.style.columnHeaderCellBorderWidth * bm,\n                dataHeight = 0,\n                dataWidth = 0,\n                dims,\n                l = (self.data || []).length,\n                columnHeaderCellHeight = self.getColumnHeaderCellHeight(),\n                rowHeaderCellWidth = self.getRowHeaderCellWidth(),\n                ch = self.style.cellHeight,\n                s = self.getSchema();\n            // sets actual DOM canvas element\n            function checkScrollBoxVisibility() {\n                self.scrollBox.horizontalBarVisible = (self.style.width !== 'auto' && dataWidth > self.scrollBox.width && self.style.overflowX !== 'hidden')\n                    || self.style.overflowX === 'scroll';\n                self.scrollBox.horizontalBoxVisible = dataWidth > self.scrollBox.width;\n                self.scrollBox.verticalBarVisible = (self.style.height !== 'auto' && dataHeight > self.scrollBox.height && self.style.overflowY !== 'hidden')\n                    || self.style.overflowY === 'scroll';\n                self.scrollBox.verticalBoxVisible = dataHeight > self.scrollBox.height;\n            }\n            function setScrollBoxSize() {\n                self.scrollBox.width = self.width - rowHeaderCellWidth;\n                self.scrollBox.height = self.height - columnHeaderCellHeight;\n            }\n            function setCanvasSize() {\n                if (self.isChildGrid) {\n                    return;\n                }\n                dims = {\n                    // HACK +1 ? maybe it's a magic cell border?  Required to line up properly in auto height mode.\n                    height: columnHeaderCellHeight + dataHeight + cellBorder + 1,\n                    width: dataWidth + rowHeaderCellWidth + cellBorder\n                };\n                ['width', 'height'].forEach(function (dim) {\n                    //TODO: support inherit\n                    if (['auto', undefined].indexOf(self.style[dim]) !== -1\n                            && ['auto', undefined].indexOf(self.appliedInlineStyles[dim]) !== -1) {\n                        self.parentNodeStyle[dim] = dims[dim] + 'px';\n                    } else {\n                        self.parentNodeStyle[dim] = self.style[dim];\n                        if (self.isComponet) {\n                            self.canvas.style[dim] = self.style[dim];\n                        }\n                    }\n                });\n            }\n            self.scrollCache.x = [];\n            self.scrollCache.y = [];\n            for (x = 0; x < l; x += 1) {\n                self.scrollCache.y[x] = dataHeight;\n                dataHeight += (((self.sizes.rows[x] || ch) + (self.sizes.trees[x] || 0)) * self.scale)\n                    // HACK? if an expanded tree row is frozen it is necessary to add the tree row's height a second time.\n                    + (self.frozenRow > x ? (self.sizes.trees[x] || 0) : 0);\n            }\n            if (l > 1) {\n                self.scrollCache.y[x] = dataHeight;\n            }\n            dataWidth = s.reduce(function reduceSchema(accumulator, column, columnIndex) {\n                // intentional redefintion of column.  This causes scrollCache to be in the correct order\n                column = s[self.orders.columns[columnIndex]];\n                if (column.hidden) {\n                    self.scrollCache.x[columnIndex] = accumulator;\n                    return accumulator;\n                }\n                var va = accumulator + self.getColummnWidth(self.orders.columns[columnIndex]);\n                self.scrollCache.x[columnIndex] = va;\n                return va;\n            }, 0) || 0;\n            if (self.attributes.showNewRow) {\n                dataHeight += ch;\n            }\n            if (self.attributes.snapToRow) {\n              dataHeight += self.style.cellHeight;\n            }\n            setCanvasSize();\n            if (self.isChildGrid) {\n                self.width = self.parentNode.offsetWidth;\n                self.height = self.parentNode.offsetHeight;\n            } else if (self.height !== self.canvas.offsetHeight || self.width !== self.canvas.offsetWidth) {\n                self.height = self.canvas.offsetHeight;\n                self.width = self.canvas.offsetWidth;\n                self.canvasOffsetLeft = self.args.canvasOffsetLeft || 0;\n                self.canvasOffsetTop = self.args.canvasOffsetTop || 0;\n            }\n            /// calculate scroll bar dimensions\n            // non-controversial\n            self.scrollBox.top = columnHeaderCellHeight + columnHeaderCellBorder;\n            self.scrollBox.left = rowHeaderCellWidth;\n            // width and height of scroll box\n            setScrollBoxSize();\n            // is the data larger than the scroll box\n            checkScrollBoxVisibility();\n            // if the scroll box is visible, make room for it by expanding the size of the element\n            // if the other dimension is set to auto\n            if (self.scrollBox.horizontalBarVisible) {\n                if (self.style.height === 'auto' && !self.isChildGrid) {\n                    self.height += sbw;\n                }\n                dataHeight += sbw;\n                setCanvasSize();\n                setScrollBoxSize();\n                checkScrollBoxVisibility();\n            }\n            if (self.scrollBox.verticalBarVisible) {\n                if (self.style.width === 'auto' && !self.isChildGrid) {\n                    self.width += sbw;\n                }\n                dataWidth += sbw;\n                setCanvasSize();\n                setScrollBoxSize();\n                checkScrollBoxVisibility();\n            }\n            // set again after bar visibility checks\n            setScrollBoxSize();\n            self.scrollBox.scrollWidth = dataWidth - self.scrollBox.width;\n            self.scrollBox.scrollHeight = dataHeight - self.scrollBox.height;\n            self.scrollBox.widthBoxRatio = self.scrollBox.width / dataWidth;\n            self.scrollBox.scrollBoxWidth = self.scrollBox.width\n                * self.scrollBox.widthBoxRatio\n                - self.style.scrollBarWidth - b - d;\n            // TODO: This heightBoxRatio number is terribly wrong.\n            // They should be a result of the size of the grid/canvas?\n            // it being off causes the scroll bar to \"slide\" under\n            // the dragged mouse.\n            // https://github.com/TonyGermaneri/canvas-datagrid/issues/97\n            self.scrollBox.heightBoxRatio = (self.scrollBox.height - columnHeaderCellHeight) / dataHeight;\n            self.scrollBox.scrollBoxHeight = self.scrollBox.height\n                * self.scrollBox.heightBoxRatio\n                - self.style.scrollBarWidth - b - d;\n            self.scrollBox.scrollBoxWidth = Math.max(self.scrollBox.scrollBoxWidth, self.style.scrollBarBoxMinSize);\n            self.scrollBox.scrollBoxHeight = Math.max(self.scrollBox.scrollBoxHeight, self.style.scrollBarBoxMinSize);\n            // horizontal\n            n.x += rowHeaderCellWidth;\n            n.y += self.height - self.style.scrollBarWidth - d;\n            n.width = self.width - self.style.scrollBarWidth - rowHeaderCellWidth - d - m;\n            n.height = self.style.scrollBarWidth + self.style.scrollBarBorderWidth + d;\n            // horizontal box\n            nb.y = n.y + self.style.scrollBarBoxMargin;\n            nb.width = self.scrollBox.scrollBoxWidth;\n            nb.height = self.style.scrollBarBoxWidth;\n            // vertical\n            v.x += self.width - self.style.scrollBarWidth - self.style.scrollBarBorderWidth - d;\n            v.y += columnHeaderCellHeight;\n            v.width = self.style.scrollBarWidth + self.style.scrollBarBorderWidth + d;\n            v.height = self.height - columnHeaderCellHeight - self.style.scrollBarWidth - d - m;\n            // vertical box\n            vb.x = v.x + self.style.scrollBarBoxMargin;\n            vb.width = self.style.scrollBarBoxWidth;\n            vb.height = self.scrollBox.scrollBoxHeight;\n            // corner\n            co.x = n.x + n.width + m;\n            co.y = v.y + v.height + m;\n            co.width = self.style.scrollBarWidth + self.style.scrollBarBorderWidth;\n            co.height = self.style.scrollBarWidth + self.style.scrollBarBorderWidth;\n            self.scrollBox.entities = {\n                horizontalBar: n,\n                horizontalBox: nb,\n                verticalBar: v,\n                verticalBox: vb,\n                corner: co\n            };\n            self.scrollBox.bar = {\n                v: v,\n                h: n\n            };\n            self.scrollBox.box = {\n                v: vb,\n                h: nb\n            };\n            /// calculate page and dom elements\n            self.page = Math.max(1, self.visibleRows.length - 3 - self.attributes.pageUpDownOverlap);\n            // set canvas drawing related items\n            if (!self.isChildGrid) {\n                self.canvas.width = self.width * ratio;\n                self.canvas.height = self.height * ratio;\n                self.ctx.scale(ratio, ratio);\n            }\n            // resize any open dom elements (input/textarea)\n            self.resizeEditInput();\n            self.scroll(true);\n            if (drawAfterResize) {\n                self.draw(true);\n            }\n            self.dispatchEvent('resize', {});\n            return true;\n        };\n        self.scroll = function (dontDraw) {\n            var s = self.getSchema(),\n                l = (self.data || []).length,\n                ch = self.style.cellHeight;\n            // go too far in leaps, then get focused\n            self.scrollIndexTop = Math.floor((l * (self.scrollBox.scrollTop / self.scrollBox.scrollHeight)) - 100);\n            self.scrollIndexTop = Math.max(self.scrollIndexTop, 0);\n            self.scrollPixelTop = self.scrollCache.y[self.scrollIndexTop];\n            // sometimes the grid is rendered but the height is zero\n            if (self.scrollBox.scrollHeight === 0) {\n                self.scrollIndexTop = 0;\n            }\n            self.scrollPixelTop = 0;\n            self.scrollIndexLeft = self.frozenColumn;\n            self.scrollPixelLeft = 0;\n            while (self.scrollPixelTop < self.scrollBox.scrollTop && self.scrollIndexTop < self.data.length) {\n                // start on index +1 since index 0 was used in \"go too far\" section above\n                self.scrollIndexTop += 1;\n                self.scrollPixelTop = self.scrollCache.y[self.scrollIndexTop];\n            }\n            while (self.scrollPixelLeft < (self.scrollBox.scrollLeft + 1) && self.scrollIndexLeft < s.length) {\n                self.scrollPixelLeft = self.scrollCache.x[self.scrollIndexLeft];\n                self.scrollIndexLeft += 1;\n            }\n            if (s.length > 0) {\n                self.scrollIndexLeft = Math.max(self.scrollIndexLeft - 1, 0);\n                self.scrollPixelLeft -= self.getColummnWidth(self.orders.columns[self.scrollIndexLeft]);\n            }\n            if ((self.data || []).length > 0) {\n                self.scrollIndexTop = Math.max(self.scrollIndexTop - 1, 0);\n                self.scrollPixelTop = Math.max((self.scrollPixelTop\n                    - (\n                        self.data[self.scrollIndexTop] ? (self.sizes.rows[self.scrollIndexTop] || ch)\n                                + (self.sizes.trees[self.scrollIndexTop] || 0)\n                        : ch\n                    ) * self.scale), 0);\n            }\n            self.ellipsisCache = {};\n            if (!dontDraw) {\n                self.draw(true);\n            }\n            //TODO: figure out why this has to be delayed for child grids\n            //BUG: wheeling event on 3rd level hierarchy fails to move input box\n            requestAnimationFrame(self.resizeEditInput);\n            self.dispatchEvent('scroll', {top: self.scrollBox.scrollTop, left: self.scrollBox.scrollLeft});\n        };\n        self.mousemove = function (e, overridePos) {\n            if (self.contextMenu || self.input) {\n                return;\n            }\n            self.mouse = overridePos || self.getLayerPos(e);\n            var ctrl = (e.ctrlKey || e.metaKey || self.attributes.persistantSelectionMode),\n                i,\n                s = self.getSchema(),\n                dragBounds,\n                sBounds,\n                x = self.mouse.x,\n                y = self.mouse.y,\n                o = self.getCellAt(x, y),\n                delta,\n                ev = {NativeEvent: e, cell: o, x: x, y: y},\n                previousCell = self.currentCell;\n            clearTimeout(self.scrollTimer);\n            if (!self.isInGrid({x: x, y: y})) {\n                self.hasFocus = false;\n            }\n            if (self.dispatchEvent('mousemove', ev)) {\n                return;\n            }\n            if (o && self.currentCell) {\n                self.rowBoundaryCrossed = self.currentCell.rowIndex !== o.rowIndex;\n                self.columnBoundaryCrossed = self.currentCell.columnIndex !== o.columnIndex;\n                self.cellBoundaryCrossed = self.rowBoundaryCrossed || self.columnBoundaryCrossed;\n                ['row', 'column', 'cell'].forEach(function (prefix) {\n                    if (self[prefix + 'BoundaryCrossed']) {\n                        ev.cell = previousCell;\n                        self.dispatchEvent(prefix + 'mouseout', ev);\n                        ev.cell = o;\n                        self.dispatchEvent(prefix + 'mouseover', ev);\n                    }\n                });\n            }\n            self.currentCell = o;\n            if (!self.hasFocus) {\n                return;\n            }\n            self.hovers = {};\n            if (!self.draggingItem\n                    && o\n                    && self.scrollModes.indexOf(o.context) === -1) {\n                self.dragItem = o;\n                self.dragMode = o.dragContext;\n                self.cursor = o.context;\n                if (o.context === 'cell') {\n                    self.cursor = 'default';\n                    self.hovers = { rowIndex: o.rowIndex, columnIndex: o.columnIndex };\n                }\n                if ((self.selecting || self.reorderObject)\n                        && o.context === 'cell') {\n                    delta = {\n                        x: Math.abs(self.dragStart.x - x),\n                        y: Math.abs(self.dragStart.y - y)\n                    };\n                    if (self.dragStartObject.columnIndex !== -1 && e.shiftKey) {\n                        self.dragStartObject = {\n                            rowIndex: self.activeCell.rowIndex,\n                            columnIndex: self.activeCell.columnIndex\n                        };\n                    }\n                    dragBounds = {\n                        top: Math.min(self.dragStartObject.rowIndex, o.rowIndex),\n                        left: Math.min(self.dragStartObject.columnIndex, o.columnIndex),\n                        bottom: Math.max(self.dragStartObject.rowIndex, o.rowIndex),\n                        right: Math.max(self.dragStartObject.columnIndex, o.columnIndex)\n                    };\n                    if (self.dragStartObject.columnIndex === -1) {\n                        sBounds = self.getSelectionBounds();\n                        dragBounds.left = -1;\n                        dragBounds.right = s.length - 1;\n                        dragBounds.top = Math.min(sBounds.top, o.rowIndex);\n                        dragBounds.bottom = Math.max(sBounds.bottom, o.rowIndex);\n                    }\n                    if (self.dragStartObject.rowIndex !== o.rowIndex\n                                || self.dragStartObject.columnIndex !== o.columnIndex) {\n                        self.ignoreNextClick = true;\n                    }\n                    if (self.cellBoundaryCrossed || (delta.x === 0 && delta.y === 0) || (self.attributes.selectionMode === 'row')) {\n                        if (((self.attributes.selectionMode === 'row') || self.dragStartObject.columnIndex === -1)\n                                && self.rowBoundaryCrossed) {\n                            self.selectRow(o.rowIndex, ctrl, null, true);\n                        } else if (self.attributes.selectionMode !== 'row') {\n                            if (!self.dragAddToSelection && o.rowIndex !== undefined) {\n                                if (self.selections[o.rowIndex] && self.selections[o.rowIndex].indexOf(o.columnIndex) !== -1) {\n                                    self.selections[o.rowIndex].splice(self.selections[o.rowIndex].indexOf(o.columnIndex), 1);\n                                }\n                            } else {\n                                self.selections[o.rowIndex] = self.selections[o.rowIndex] || [];\n                                if (self.selections[o.rowIndex].indexOf(o.columnIndex) === -1) {\n                                    self.selections[o.rowIndex].push(o.columnIndex);\n                                }\n                            }\n                        }\n                    }\n                    if ((!self.selectionBounds || (dragBounds.top !== self.selectionBounds.top\n                            || dragBounds.left !== self.selectionBounds.left\n                            || dragBounds.bottom !== self.selectionBounds.bottom\n                            || dragBounds.right !== self.selectionBounds.right)) && !ctrl) {\n                        self.selections = [];\n                        sBounds = dragBounds;\n                        if (self.attributes.selectionMode === 'row') {\n                            for (i = sBounds.top; i <= sBounds.bottom; i += 1) {\n                                self.selectRow(i, true, null, true);\n                            }\n                        } else if (dragBounds.top !== -1) {\n                            self.selectArea(sBounds, true);\n                        }\n                    }\n                    self.autoScrollZone(e, x, y, ctrl);\n                }\n            }\n            self.cellBoundaryCrossed = false;\n            self.rowBoundaryCrossed = false;\n            self.columnBoundaryCrossed = false;\n            self.draw(true);\n        };\n        self.click = function (e, overridePos) {\n            var i,\n                startingBounds = JSON.stringify(self.getSelectionBounds()),\n                ctrl = (e.ctrlKey || e.metaKey || self.attributes.persistantSelectionMode),\n                pos = overridePos || self.getLayerPos(e);\n            self.currentCell = self.getCellAt(pos.x, pos.y);\n            if (self.currentCell.grid !== undefined) {\n                return;\n            }\n            function checkSelectionChange() {\n                var ev, sb = self.getSelectionBounds();\n                if (startingBounds === JSON.stringify(sb)) {\n                    return;\n                }\n                ev = {\n                    selections: self.selections,\n                    selectionBounds: self.getSelectionBounds()\n                };\n                Object.defineProperty(ev, 'selectedData', {\n                    get: function () {\n                        return self.getSelectedData();\n                    }\n                });\n                self.dispatchEvent('selectionchanged', ev);\n            }\n            if (self.input) {\n                self.endEdit();\n            }\n            if (self.ignoreNextClick) {\n                self.ignoreNextClick = false;\n                return;\n            }\n            i = self.currentCell;\n            if (self.dispatchEvent('click', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            if (['rowHeaderCell', 'columnHeaderCell'].indexOf(self.currentCell.style) === -1 && !ctrl) {\n                self.setActiveCell(i.columnIndex, i.rowIndex);\n            }\n            if (self.currentCell.context === 'cell') {\n                if (self.currentCell.style === 'cornerCell') {\n                    self.selectAll();\n                    self.draw();\n                    checkSelectionChange();\n                    return;\n                }\n                if (self.currentCell.style === 'columnHeaderCell') {\n                    if (self.attributes.columnHeaderClickBehavior === 'sort') {\n                        if (self.orderBy === i.header.name) {\n                            self.orderDirection = self.orderDirection === 'asc' ? 'desc' : 'asc';\n                        } else {\n                            self.orderDirection = 'asc';\n                        }\n                        self.order(i.header.name, self.orderDirection);\n                        checkSelectionChange();\n                        return;\n                    }\n                    if (self.attributes.columnHeaderClickBehavior === 'select') {\n                        self.selectColumn(i.header.index, ctrl, e.shiftKey);\n                        self.draw();\n                        return;\n                    }\n                }\n                self.selections[i.rowIndex] = self.selections[i.rowIndex] || [];\n                if (((self.attributes.selectionMode === 'row') || self.currentCell.style === 'rowHeaderCell')) {\n                    if (self.currentCell.style === 'rowHeaderCell'\n                            && self.attributes.tree && pos.x > 0\n                            && pos.x - self.currentCell.x < self.style.treeArrowWidth\n                            + self.style.treeArrowMarginLeft\n                            + self.style.treeArrowMarginRight + self.style.treeArrowClickRadius\n                            && pos.y - self.currentCell.y < self.style.treeArrowHeight\n                            + self.style.treeArrowMarginTop + self.style.treeArrowClickRadius\n                            && pos.y > 0) {\n                        self.toggleTree(i.rowIndex);\n                        return;\n                    }\n                }\n                if (e.shiftKey && !ctrl) {\n                    self.selectionBounds = self.getSelectionBounds();\n                    self.selectArea(undefined, false);\n                }\n            }\n            checkSelectionChange();\n            self.draw(true);\n        };\n        self.dragResizeColumn = function (e) {\n            var pos, x, y;\n            pos = self.getLayerPos(e);\n            x = self.resizingStartingWidth + pos.x - self.dragStart.x;\n            y = self.resizingStartingHeight + pos.y - self.dragStart.y;\n            if (x < self.style.minColumnWidth) {\n                x = self.style.minColumnWidth;\n            }\n            if (y < self.style.minRowHeight) {\n                y = self.style.minRowHeight;\n            }\n            if (self.dispatchEvent('resizecolumn', {x: x, y: y, draggingItem: self.draggingItem})) { return false; }\n            if (self.scrollBox.scrollLeft > self.scrollBox.scrollWidth - self.attributes.resizeScrollZone\n                    && self.dragMode === 'ew-resize') {\n                self.resize(true);\n                self.scrollBox.scrollLeft += x;\n            }\n            if (self.dragMode === 'ew-resize') {\n                self.sizes.columns[self.draggingItem.header.style === 'rowHeaderCell'\n                       ? 'cornerCell' : self.draggingItem.sortColumnIndex] = x;\n                if (['rowHeaderCell', 'cornerCell'].indexOf(self.draggingItem.header.style) !== -1) {\n                    self.resize(true);\n                }\n                self.resizeChildGrids();\n                return;\n            }\n            if (self.dragMode === 'ns-resize') {\n                if (self.draggingItem.rowOpen) {\n                    self.sizes.trees[self.draggingItem.rowIndex] = y;\n                } else if (self.attributes.globalRowResize) {\n                    self.style.cellHeight = y;\n                } else {\n                    self.sizes.rows[self.draggingItem.rowIndex] = y;\n                }\n                self.dispatchEvent('resizerow', {row: y});\n                self.resizeChildGrids();\n                return;\n            }\n            self.ellipsisCache = {};\n        };\n        self.stopDragResize = function () {\n            self.resize();\n            document.body.removeEventListener('mousemove', self.dragResizeColumn, false);\n            document.body.removeEventListener('mouseup', self.stopDragResize, false);\n            self.setStorageData();\n            self.draw(true);\n            self.ignoreNextClick = true;\n        };\n        self.scrollGrid = function (e) {\n            var pos = self.getLayerPos(e);\n            if (self.attributes.scrollPointerLock && self.pointerLockPosition\n                    && ['horizontal-scroll-box', 'vertical-scroll-box'].indexOf(self.scrollStartMode) !== -1) {\n                self.pointerLockPosition.x += e.movementX;\n                self.pointerLockPosition.y += e.movementY;\n                self.pointerLockPosition.x = Math.min(self.width - self.style.scrollBarWidth, Math.max(0, self.pointerLockPosition.x));\n                self.pointerLockPosition.y = Math.min(self.height - self.style.scrollBarWidth, Math.max(0, self.pointerLockPosition.y));\n                pos = self.pointerLockPosition;\n            }\n            self.scrollMode = self.getCellAt(pos.x, pos.y).context;\n            if (self.scrollMode === 'horizontal-scroll-box' && self.scrollStartMode !== 'horizontal-scroll-box') {\n                self.scrollStartMode = 'horizontal-scroll-box';\n                self.dragStart = pos;\n                self.scrollStart.left = self.scrollBox.scrollLeft;\n                clearTimeout(self.scrollTimer);\n                return;\n            }\n            if (self.scrollMode === 'vertical-scroll-box' && self.scrollStartMode !== 'vertical-scroll-box') {\n                self.scrollStartMode = 'vertical-scroll-box';\n                self.dragStart = pos;\n                self.scrollStart.top = self.scrollBox.scrollTop;\n                clearTimeout(self.scrollTimer);\n                return;\n            }\n            if (self.scrollStartMode === 'vertical-scroll-box'\n                    && self.scrollMode !== 'vertical-scroll-box') {\n                self.scrollMode = 'vertical-scroll-box';\n            }\n            if (self.scrollStartMode === 'horizontal-scroll-box'\n                    && self.scrollMode !== 'horizontal-scroll-box') {\n                self.scrollMode = 'horizontal-scroll-box';\n            }\n            clearTimeout(self.scrollTimer);\n            if (self.scrollModes.indexOf(self.scrollMode) === -1) {\n                return;\n            }\n            if (self.scrollMode === 'vertical-scroll-box') {\n                self.scrollBox.scrollTop = self.scrollStart.top + ((pos.y - self.dragStart.y)\n                    / self.scrollBox.heightBoxRatio);\n            } else if (self.scrollMode === 'vertical-scroll-top') {\n                self.scrollBox.scrollTop -= (self.page * self.style.cellHeight);\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            } else if (self.scrollMode === 'vertical-scroll-bottom') {\n                self.scrollBox.scrollTop += (self.page * self.style.cellHeight);\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            }\n            if (self.scrollMode === 'horizontal-scroll-box') {\n                self.scrollBox.scrollLeft = self.scrollStart.left + ((pos.x - self.dragStart.x)\n                    / self.scrollBox.widthBoxRatio);\n            } else if (self.scrollMode === 'horizontal-scroll-right') {\n                self.scrollBox.scrollLeft += self.attributes.selectionScrollIncrement;\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            } else if (self.scrollMode === 'horizontal-scroll-left') {\n                self.scrollBox.scrollLeft -= self.attributes.selectionScrollIncrement;\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            }\n        };\n        self.stopScrollGrid = function () {\n            clearTimeout(self.scrollTimer);\n            if (document.exitPointerLock) {\n                document.exitPointerLock();\n            }\n            document.removeEventListener('mousemove', self.scrollGrid, false);\n        };\n        self.dragReorder = function (e) {\n            var pos, x, y,\n                columReorder = self.dragMode === 'column-reorder',\n                rowReorder = self.dragMode === 'row-reorder';\n            pos = self.getLayerPos(e);\n            x = pos.x - self.dragStart.x;\n            y = pos.y - self.dragStart.y;\n            if (!self.attributes.allowColumnReordering && columReorder) {\n                return;\n            }\n            if (!self.attributes.allowRowReordering && rowReorder) {\n                return;\n            }\n            if (self.dispatchEvent('reordering', {\n                    NativeEvent: e,\n                    source: self.dragStartObject,\n                    target: self.currentCell,\n                    dragMode: self.dragMode\n                })) {\n                return;\n            }\n            if (Math.abs(x) > self.attributes.reorderDeadZone || Math.abs(y) > self.attributes.reorderDeadZone) {\n                self.reorderObject = self.draggingItem;\n                self.reorderTarget = self.currentCell;\n                self.reorderObject.dragOffset = {\n                    x: x,\n                    y: y\n                };\n                self.autoScrollZone(e, columReorder ? pos.x : -1, rowReorder ? pos.y : -1, false);\n            }\n        };\n        self.stopDragReorder = function (e) {\n            var oIndex,\n                tIndex,\n                cr = {\n                    'row-reorder': self.orders.rows,\n                    'column-reorder': self.orders.columns\n                },\n                i = {\n                    'row-reorder': 'rowIndex',\n                    'column-reorder': 'sortColumnIndex'\n                }[self.dragMode];\n            document.body.removeEventListener('mousemove', self.dragReorder, false);\n            document.body.removeEventListener('mouseup', self.stopDragReorder, false);\n            if (self.reorderObject\n                    && self.reorderTarget\n                    && ((self.dragMode === 'column-reorder' && self.reorderTarget.sortColumnIndex > -1\n                        && self.reorderTarget.sortColumnIndex < self.getSchema().length)\n                    || (self.dragMode === 'row-reorder' && self.reorderTarget.rowIndex > -1\n                        && self.reorderTarget.rowIndex < self.data.length))\n                    && self.reorderObject[i] !== self.reorderTarget[i]\n                    && !self.dispatchEvent('reorder', {\n                        NativeEvent: e,\n                        source: self.reorderObject,\n                        target: self.reorderTarget,\n                        dragMode: self.dragMode\n                    })) {\n                self.ignoreNextClick = true;\n                oIndex = cr[self.dragMode].indexOf(self.reorderObject[i]);\n                tIndex = cr[self.dragMode].indexOf(self.reorderTarget[i]);\n                cr[self.dragMode].splice(oIndex, 1);\n                cr[self.dragMode].splice(tIndex, 0, self.reorderObject[i]);\n                if(self.dragMode === 'column-reorder') {\n                  self.orders.columns = cr[self.dragMode];\n                } else {\n                  self.orders.rows = cr[self.dragMode];\n                }\n                self.resize();\n                self.setStorageData();\n            }\n            self.reorderObject = undefined;\n            self.reorderTarget = undefined;\n            self.draw(true);\n        };\n        self.dragMove = function (e) {\n            if (self.dispatchEvent('moving', {NativeEvent: e, cell: self.currentCell})) { return; }\n            var pos = self.getLayerPos(e);\n            self.moveOffset = {\n                x: self.currentCell.columnIndex - self.dragStartObject.columnIndex,\n                y: self.currentCell.rowIndex - self.dragStartObject.rowIndex\n            };\n            if (Math.abs(pos.x) > self.attributes.reorderDeadZone || Math.abs(pos.y) > self.attributes.reorderDeadZone) {\n                setTimeout(function () {\n                    self.autoScrollZone(e, pos.x, pos.y, false);\n                }, 1);\n            }\n        };\n        self.stopDragMove = function (e) {\n            document.body.removeEventListener('mousemove', self.dragMove, false);\n            document.body.removeEventListener('mouseup', self.stopDragMove, false);\n            var b = self.getSelectionBounds();\n            if (self.dispatchEvent('endmove', {NativeEvent: e, cell: self.currentCell})) {\n                self.movingSelection = undefined;\n                self.moveOffset = undefined;\n                self.draw(true);\n                return;\n            }\n            if (self.moveOffset) {\n                self.moveTo(self.movingSelection, b.left + self.moveOffset.x, b.top + self.moveOffset.y);\n                self.moveSelection(self.moveOffset.x, self.moveOffset.y);\n            }\n            self.movingSelection = undefined;\n            self.moveOffset = undefined;\n            self.draw(true);\n        };\n        self.freezeMove = function (e) {\n            if (self.dispatchEvent('freezemoving', {NativeEvent: e, cell: self.currentCell})) { return; }\n            var pos = self.getLayerPos(e);\n            self.ignoreNextClick = true;\n            self.freezeMarkerPosition = pos;\n            if (self.currentCell && self.currentCell.rowIndex !== undefined && self.dragMode === 'frozen-row-marker') {\n                self.scrollBox.scrollTop = 0;\n                self.frozenRow = self.currentCell.rowIndex + 1;\n            }\n            if (self.currentCell && self.currentCell.columnIndex !== undefined && self.dragMode === 'frozen-column-marker') {\n                self.scrollBox.scrollLeft = 0;\n                self.frozenColumn = self.currentCell.columnIndex + 1;\n            }\n            if (Math.abs(pos.x) > self.attributes.reorderDeadZone || Math.abs(pos.y) > self.attributes.reorderDeadZone) {\n                setTimeout(function () {\n                    self.autoScrollZone(e, pos.x, pos.y, false);\n                }, 1);\n            }\n        };\n        self.stopFreezeMove = function (e) {\n            document.body.removeEventListener('mousemove', self.freezeMove, false);\n            document.body.removeEventListener('mouseup', self.stopFreezeMove, false);\n            self.freezeMarkerPosition = undefined;\n            if (self.dispatchEvent('endfreezemove', {NativeEvent: e, cell: self.currentCell})) {\n                self.frozenRow = self.startFreezeMove.x;\n                self.frozenColumn = self.startFreezeMove.y;\n                self.draw(true);\n                return;\n            }\n            self.draw(true);\n        };\n        self.mousedown = function (e, overridePos) {\n            self.lastMouseDownTarget = e.target;\n            if (self.dispatchEvent('mousedown', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            if (e.button === 2 || self.input) { return; }\n            var ctrl = (e.ctrlKey || e.metaKey),\n                move = /-move/.test(self.dragMode),\n                freeze = /frozen-row-marker|frozen-column-marker/.test(self.dragMode),\n                resize = /-resize/.test(self.dragMode);\n            self.dragStart = overridePos || self.getLayerPos(e);\n            self.scrollStart = {\n                left: self.scrollBox.scrollLeft,\n                top: self.scrollBox.scrollTop\n            };\n            self.dragStartObject = self.getCellAt(self.dragStart.x, self.dragStart.y);\n            self.dragAddToSelection = !self.dragStartObject.selected;\n            if (!ctrl && !e.shiftKey && !/(vertical|horizontal)-scroll-(bar|box)/\n                    .test(self.dragStartObject.context)\n                    && self.currentCell\n                    && !self.currentCell.isColumnHeader\n                    && !move\n                    && !freeze\n                    && !resize) {\n                self.selections = [];\n            }\n            if (self.dragStartObject.isGrid) {\n                return;\n            }\n            if (self.scrollModes.indexOf(self.dragStartObject.context) !== -1) {\n                self.scrollMode = self.dragStartObject.context;\n                self.scrollStartMode = self.dragStartObject.context;\n                self.scrollGrid(e);\n                if (self.attributes.scrollPointerLock\n                        && ['horizontal-scroll-box', 'vertical-scroll-box'].indexOf(self.scrollStartMode) !== -1) {\n                    self.pointerLockPosition = {\n                        x: self.dragStart.x,\n                        y: self.dragStart.y\n                    };\n                    self.canvas.requestPointerLock();\n                }\n                document.addEventListener('mousemove', self.scrollGrid, false);\n                document.addEventListener('mouseup', self.stopScrollGrid, false);\n                self.ignoreNextClick = true;\n                return;\n            }\n            if (self.dragMode === 'cell') {\n                self.selecting = true;\n                if ((self.attributes.selectionMode === 'row' || self.dragStartObject.columnIndex === -1)\n                        && self.dragStartObject.rowIndex > -1) {\n                    self.selectRow(self.dragStartObject.rowIndex, ctrl, null);\n                } else if (self.attributes.selectionMode !== 'row') {\n                    self.mousemove(e);\n                }\n                return;\n            }\n            if (move) {\n                self.draggingItem = self.dragItem;\n                self.movingSelection = self.selections.concat([]);\n                self.dragging = self.dragStartObject;\n                if (self.dispatchEvent('beginmove', {NativeEvent: e, cell: self.currentCell})) { return; }\n                document.body.addEventListener('mousemove', self.dragMove, false);\n                document.body.addEventListener('mouseup', self.stopDragMove, false);\n                return self.mousemove(e);\n            }\n            if (freeze) {\n                self.draggingItem = self.dragItem;\n                self.startFreezeMove = {\n                    x: self.frozenRow,\n                    y: self.frozenColumn\n                };\n                if (self.dispatchEvent('beginfreezemove', {NativeEvent: e})) { return; }\n                document.body.addEventListener('mousemove', self.freezeMove, false);\n                document.body.addEventListener('mouseup', self.stopFreezeMove, false);\n                return self.mousemove(e);\n            }\n            if (resize) {\n                self.draggingItem = self.dragItem;\n                if (self.draggingItem.rowOpen) {\n                    self.resizingStartingHeight = self.sizes.trees[self.draggingItem.rowIndex];\n                } else {\n                    self.resizingStartingHeight = self.sizes.rows[self.draggingItem.rowIndex] || self.style.cellHeight;\n                }\n                self.resizingStartingWidth = self.sizes.columns[self.draggingItem.header.style === 'rowHeaderCell'\n                       ? 'cornerCell' : self.draggingItem.sortColumnIndex] || self.draggingItem.width;\n                document.body.addEventListener('mousemove', self.dragResizeColumn, false);\n                document.body.addEventListener('mouseup', self.stopDragResize, false);\n                return;\n            }\n            if (['row-reorder', 'column-reorder'].indexOf(self.dragMode) !== -1) {\n                self.draggingItem = self.dragStartObject;\n                document.body.addEventListener('mousemove', self.dragReorder, false);\n                document.body.addEventListener('mouseup', self.stopDragReorder, false);\n                return;\n            }\n        };\n        self.mouseup = function (e) {\n            clearTimeout(self.scrollTimer);\n            self.cellBoundaryCrossed = true;\n            self.rowBoundaryCrossed = true;\n            self.columnBoundaryCrossed = true;\n            self.selecting = undefined;\n            self.draggingItem = undefined;\n            self.dragStartObject = undefined;\n            if (self.dispatchEvent('mouseup', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus && e.target !== self.canvas) {\n                return;\n            }\n            if (self.currentCell && self.currentCell.grid !== undefined) {\n                return;\n            }\n            if (self.contextMenu || self.input) { return; }\n            if (self.dragStart && self.isInGrid(self.dragStart)) {\n                self.controlInput.focus();\n            }\n            e.preventDefault();\n        };\n        // gets the horizontal adjacent cells as well as first/last based on column visibility\n        self.getAdjacentCells = function () {\n            var x,\n                i,\n                s = self.getSchema(),\n                o = {};\n            for (x = 0; x < s.length; x += 1) {\n                i = self.orders.columns[x];\n                if (!s[i].hidden) {\n                    if (o.first === undefined) {\n                        o.first = x;\n                        o.left = x;\n                    }\n                    o.last = x;\n                    if (x > self.activeCell.columnIndex && o.right === undefined) {\n                        o.right = x;\n                    }\n                    if (x < self.activeCell.columnIndex) {\n                        o.left = x;\n                    }\n                }\n            }\n            if (o.right === undefined) {\n                o.right = o.last;\n            }\n            return o;\n        };\n        self.keydown = function (e) {\n            var i,\n                ev,\n                adjacentCells = self.getAdjacentCells(),\n                x = self.activeCell.columnIndex,\n                y = self.activeCell.rowIndex,\n                ctrl = (e.ctrlKey || e.metaKey),\n                last = self.data.length - 1,\n                s = self.getSchema(),\n                cols = s.length - 1;\n            if (self.dispatchEvent('keydown', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            if (self.attributes.showNewRow) {\n                last += 1;\n            }\n            if (e.keyCode === 9) {\n                e.preventDefault();\n            }\n            // esc\n            if (e.keyCode === 27) {\n                self.selections = [];\n                self.draw(true);\n            // ctrl + a\n            } else if (ctrl && e.keyCode === 65) {\n                self.selectAll();\n            //ArrowDown\n            } else if (e.keyCode === 40) {\n                y += 1;\n            //ArrowUp\n            } else if (e.keyCode === 38) {\n                y -= 1;\n            //ArrowLeft Tab\n            } else if (e.keyCode === 37 || (e.shiftKey && e.keyCode === 9)) {\n                x = adjacentCells.left;\n            //ArrowRight Tab\n            } else if (e.keyCode === 39 || (!e.shiftKey && e.keyCode === 9)) {\n                x = adjacentCells.right;\n            //PageUp\n            } else if (e.keyCode === 33) {\n                y -= self.page;\n                e.preventDefault();\n            //PageDown\n            } else if (e.keyCode === 34) {\n                y += self.page;\n                e.preventDefault();\n            //Home ArrowUp\n            } else if (e.keyCode === 36 || (ctrl && e.keyCode === 38)) {\n                y = 0;\n            //End ArrowDown\n            } else if (e.keyCode === 35 || (ctrl && e.keyCode === 40)) {\n                y = self.data.length - 1;\n            //ArrowRight\n            } else if (ctrl && e.keyCode === 39) {\n                x = adjacentCells.last;\n            //ArrowLeft\n            } else if (ctrl && e.keyCode === 37) {\n                x = adjacentCells.first;\n            }\n            //Enter\n            if (e.keyCode === 13) {\n                return self.beginEditAt(x, y, e);\n            }\n            //Space\n            if (e.keyCode === 32) {\n                self.selections = [];\n                self.selections[Math.max(y, 0)] = [];\n                self.selections[Math.max(y, 0)].push(x);\n                self.selectionBounds = self.getSelectionBounds();\n                if (self.attributes.selectionMode === 'row') {\n                    for (i = self.selectionBounds.top; i <= self.selectionBounds.bottom; i += 1) {\n                        self.selectRow(i, ctrl, null, true);\n                    }\n                } else {\n                    self.selectArea(undefined, ctrl);\n                }\n                e.preventDefault();\n                self.draw(true);\n                return;\n            }\n            if (x < 0 || Number.isNaN(x)) {\n                x = adjacentCells.first;\n            }\n            if (y > last) {\n                y = last;\n            }\n            if (y < 0 || Number.isNaN(y)) {\n                y = 0;\n            }\n            if (x > cols) {\n                x = adjacentCells.last;\n            }\n            // TODO - most likley some column order related bugs in key based selection\n            // Arrows\n            if (e.shiftKey && [37, 38, 39, 40].indexOf(e.keyCode) !== -1) {\n                self.selections[Math.max(y, 0)] = self.selections[Math.max(y, 0)] || [];\n                self.selections[Math.max(y, 0)].push(x);\n                self.selectionBounds = self.getSelectionBounds();\n                self.selectArea(undefined, ctrl);\n                self.draw(true);\n            }\n            if (x !== self.activeCell.columnIndex || y !== self.activeCell.rowIndex) {\n                self.scrollIntoView(\n                  x !== self.activeCell.columnIndex ? x : undefined,\n                  y !== self.activeCell.rowIndex && !Number.isNaN(y) ? y : undefined\n                );\n\n                self.setActiveCell(x, y);\n                if (!e.shiftKey && self.attributes.selectionFollowsActiveCell) {\n                    if (!ctrl) {\n                        self.selections = [];\n                    }\n                    self.selections[y] = self.selections[y] || [];\n                    self.selections[y].push(x);\n                    ev = {\n                        selectedData: self.getSelectedData(),\n                        selections: self.selections,\n                        selectionBounds: self.getSelectionBounds()\n                    };\n                    Object.defineProperty(ev, 'selectedData', {\n                        get: function () {\n                            return self.getSelectedData();\n                        }\n                    });\n                    self.dispatchEvent('selectionchanged', ev);\n                }\n                self.draw(true);\n            }\n        };\n        self.keyup = function (e) {\n            if (self.dispatchEvent('keyup', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n        };\n        self.keypress = function (e) {\n            if (!self.hasFocus) {\n                return;\n            }\n            if (self.dispatchEvent('keypress', {NativeEvent: e, cell: self.currentCell})) { return; }\n        };\n        self.dblclick = function (e) {\n            if (self.dispatchEvent('dblclick', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            if (self.currentCell.context === 'ew-resize'\n                    && self.currentCell.style === 'columnHeaderCell') {\n                self.fitColumnToValues(self.currentCell.header.name);\n            } else if (self.currentCell.context === 'ew-resize'\n                    && self.currentCell.style === 'cornerCell') {\n                self.autosize();\n            } else if (['cell', 'activeCell'].indexOf(self.currentCell.style) !== -1) {\n                self.beginEditAt(self.currentCell.columnIndex, self.currentCell.rowIndex);\n            }\n        };\n        self.scrollWheel = function (e) {\n            var l,\n                t,\n                ev = e,\n                deltaX = e.deltaX === undefined ? e.NativeEvent.deltaX : e.deltaX,\n                deltaY = e.deltaY === undefined ? e.NativeEvent.deltaY : e.deltaY,\n                deltaMode = e.deltaMode === undefined ? e.NativeEvent.deltaMode : e.deltaMode;\n            if (wheeling) {\n                return;\n            }\n            if (self.dispatchEvent('wheel', {NativeEvent: e})) {\n                return;\n            }\n            var e = e.NativeEvent || e;\n            self.touchHaltAnimation = true;\n            l = self.scrollBox.scrollLeft;\n            t = self.scrollBox.scrollTop;\n            if (self.hasFocus) {\n                //BUG Issue 42: https://github.com/TonyGermaneri/canvas-datagrid/issues/42\n                //https://stackoverflow.com/questions/20110224/what-is-the-height-of-a-line-in-a-wheel-event-deltamode-dom-delta-line\n                if (deltaMode === 1) {\n                    // line mode = 17 pixels per line\n                    deltaY = deltaY * 17;\n                }\n                if ((self.scrollBox.scrollTop  < self.scrollBox.scrollHeight && deltaY > 0)\n                        || (self.scrollBox.scrollLeft < self.scrollBox.scrollWidth && deltaX > 0)\n                        || (self.scrollBox.scrollTop > 0 && deltaY < 0)\n                        || (self.scrollBox.scrollLeft > 0 && deltaX < 0)) {\n                    ev.preventDefault(e);\n                }\n                wheeling = setTimeout(function () {\n                    wheeling = undefined;\n                    self.scrollBox.scrollTo(deltaX + l, deltaY + t);\n                }, 1);\n            }\n        };\n        self.pasteItem = function (clipData, x, y, mimeType) {\n            var l, s = self.getVisibleSchema(), yi = y - 1, sel = [];\n            function normalizeRowData(importingRow, existingRow, offsetX, schema, mimeType, rowIndex) {\n                var r = existingRow;\n                if (!Array.isArray(importingRow) && importingRow !== null && typeof importingRow === 'object') {\n                    importingRow = Object.keys(importingRow).map(function (colKey) {\n                        return importingRow[colKey];\n                    });\n                }\n                if (/^text\\/html/.test(mimeType)) {\n                    importingRow = importingRow.substring(4, importingRow.length - 5).split('</td><td>');\n                }\n                if (typeof importingRow === 'string') {\n                    importingRow = [importingRow];\n                }\n                sel[rowIndex] = [];\n                importingRow.forEach(function (cellData, colIndex) {\n                    var cName = schema[colIndex + offsetX].name;\n                    if (importingRow[colIndex] === undefined || importingRow[colIndex] === null) {\n                        r[cName] = existingRow[cName];\n                        return;\n                    }\n                    sel[rowIndex].push(colIndex + offsetX);\n                    r[cName] = importingRow[colIndex];\n                });\n                return r;\n            }\n            if (/^text\\/html/.test(mimeType)) {\n                if (!/^(<meta[^>]+>)?<table>/.test(clipData.substring(0, 29))) {\n                    console.warn('Unrecognized HTML format.  HTML must be a simple table, e.g.: <table><tr><td>data</td></tr></table>.  Data with the mime type text/html not in this format will not be imported as row data.');\n                    return;\n                }\n                // strip table beginning and ending off, then split at rows\n                clipData = clipData.substring(clipData.indexOf('<table><tr>') + 11, clipData.length - 13).split('</tr><tr>');\n                // ditch any headers on the table\n                clipData = clipData.filter(function (row) {\n                    return !/^<th>|^<thead>/.test(row);\n                });\n            } else {\n                clipData = clipData.split('\\n');\n            }\n            l = clipData.length;\n            clipData.forEach(function (rowData) {\n                yi += 1;\n                var i = self.orders.rows[yi];\n                self.data[i] = normalizeRowData(rowData, self.data[i], x, s, mimeType, i);\n            });\n            self.selections = sel;\n            return l;\n        };\n        self.getNextVisibleColumnIndex = function (visibleColumnIndex) {\n            var x, s = self.getVisibleSchema();\n            for (x = 0; x < s.length; x += 1) {\n                if (s[x].columnIndex === visibleColumnIndex) {\n                    return s[x + 1].columnIndex;\n                }\n            }\n            return -1;\n        };\n        self.getVisibleColumnIndexOf = function (columnIndex) {\n            var x, s = self.getVisibleSchema();\n            for (x = 0; x < s.length; x += 1) {\n                if (s[x].columnIndex === columnIndex) {\n                    return x;\n                }\n            }\n            return -1;\n        };\n        self.paste = function (e) {\n            var d;\n            function getItem(dti) {\n                var type = dti.type;\n                dti.getAsString(function (s) {\n                    self.pasteItem(s, self.getVisibleColumnIndexOf(self.activeCell.columnIndex), self.activeCell.rowIndex, type);\n                    self.draw();\n                });\n            }\n            d = Array.prototype.filter.call(e.clipboardData.items, function (dti) {\n                return dti.type === 'text/html';\n            })[0] || Array.prototype.filter(function (dti) {\n                return dti.type === 'text/csv';\n            })[0] || Array.prototype.filter(function (dti) {\n                return dti.type === 'text/plain';\n            })[0];\n            if (!d) {\n                console.warn('Cannot find supported clipboard data type.  Supported types are text/html, text/csv, text/plain.');\n                return;\n            }\n            getItem(d);\n        };\n        self.cut = function (e) {\n            self.copy(e);\n            self.forEachSelectedCell(function (data, index, colName) {\n                data[index][colName] = '';\n            });\n        };\n        self.copy = function (e) {\n            if (self.dispatchEvent('copy', {NativeEvent: e})) { return; }\n            if (!self.hasFocus || !e.clipboardData) { return; }\n            var t,\n                d,\n                data = (self.data || []),\n                tableRows = [],\n                textRows = [],\n                outputHeaders = {},\n                outputHeaderKeys,\n                sData = self.getSelectedData(),\n                s = self.getSchema();\n            function htmlSafe(v) {\n                return v.replace(/</g, '&lt;').replace(/>/g, '&gt;');\n            }\n            function fCopyCell(v) {\n                v = v === null || v === undefined ? '' : v;\n                return '<td>' + (typeof v === 'string' ? htmlSafe(v) : v) + '</td>';\n            }\n            function addHeaders(headers, useHtml) {\n                if (!s.length || headers.length < 2) { return ''; }\n                var h = [];\n                if (useHtml) {\n                    h.push('<tr>');\n                }\n                s.forEach(function (column, columnIndex) {\n                    // intentional redefinition of column\n                    column = s[self.orders.columns[columnIndex]];\n                    if (!column.hidden && headers.indexOf(column.name) !== -1) {\n                        var ev = {NativeEvent: e, column: column};\n                        if(self.dispatchEvent('copyonschema', ev)) {\n                            column = ev.column;\n                        }\n\n                        var hVal = (column.name || column.title) || '';\n                        if (useHtml) {\n                            h.push('<th>' + htmlSafe(hVal) + '</th>');\n                        } else {\n                            h.push('\"' + hVal.replace(/\"/g, '\"\"') + '\"');\n                        }\n                    }\n                });\n                h.push(useHtml ? '</tr>' : '\\n');\n                return h.join(useHtml ? '' : ',');\n            }\n            function addCellValue(val, trRow, textRow, column) {\n                // escape strings\n                if (val !== null\n                        && val !== false\n                        && val !== undefined\n                        && val.replace) {\n                    trRow.push(fCopyCell(val));\n                    textRow.push('\"' + val.replace(/\"/g, '\"\"') + '\"');\n                    return;\n                }\n                if (val !== undefined) {\n                    textRow.push(val);\n                    trRow.push(fCopyCell(val));\n                    return;\n                }\n                // issue #66\n                textRow.push('');\n                trRow.push('<td>&nbsp;</td>');\n            }\n            if (sData.length > 0) {\n                sData.forEach(function (row) {\n                    var rowKeys = Object.keys(row);\n                    if (row) {\n                        var trRow = [],\n                            textRow = [],\n                            sSorted = [];\n                        // HACK: https://github.com/TonyGermaneri/canvas-datagrid/issues/181\n                        // I can't use sort here or O(1), so hacks\n                        s.forEach(function (column, columnIndex) {\n                            sSorted.push(s[self.orders.columns[columnIndex]]);\n                        });\n                        sSorted.forEach(function (column, columnIndex) {\n                            if (rowKeys.indexOf(column.name) !== -1) {\n                                outputHeaders[column.name] = true;\n                                // escape strings\n                                addCellValue(row[column.name], trRow, textRow, column);\n                            }\n                        });\n                        tableRows.push(trRow.join(''));\n                        textRows.push(textRow.join(','));\n                    }\n                });\n                outputHeaderKeys = Object.keys(outputHeaders);\n                t = addHeaders(outputHeaderKeys) + textRows.join('\\n');\n                d = '<table>' + addHeaders(outputHeaderKeys, true) + '<tr>' + tableRows.join('</tr><tr>') + '</tr></table>';\n                if (outputHeaderKeys.length === 1) {\n                    // if there was only one cell selected, remove the quotes from the string\n                    t = t.substring(1, t.length -1);\n                }\n                e.clipboardData.setData('text/html', d);\n                e.clipboardData.setData('text/plain', t);\n                e.clipboardData.setData('text/csv', t);\n                e.clipboardData.setData('application/json', JSON.stringify(sData));\n                e.preventDefault();\n            }\n        };\n        return;\n    };\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }),\n/* 5 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true, plusplus: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function () {\n    'use strict';\n    return function (self) {\n        var touchTimerMs = 50,\n            debounceTouchMove,\n            touchMoving,\n            touchScrollTimeout;\n        self.scrollAnimation = {};\n        self.touchDelta = {};\n        self.touchAnimateTo = {};\n        self.animationFrames = 0;\n        self.getTouchPos = function (e, touchIndex) {\n            var t = touchIndex ? e.touches[touchIndex] : e.touches[0],\n                rect = self.canvas.getBoundingClientRect(),\n                pos;\n            if (!t) { return; }\n            pos = {\n                x: t.clientX - rect.left,\n                y: t.clientY - rect.top\n            };\n            if (self.isChildGrid) {\n                pos.x -= self.canvasOffsetLeft;\n                pos.y -= self.canvasOffsetTop;\n            }\n            return {\n                x: pos.x,\n                y: pos.y,\n                rect: rect\n            };\n        };\n        // shamelessly stolen from from https://gist.github.com/gre/1650294\n        self.easingFunctions = {\n            linear: function (t) { return t; },\n            easeInQuad: function (t) { return t * t; },\n            easeOutQuad: function (t) { return t * (2 - t); },\n            easeInOutQuad: function (t) { return t < 0.5 ? 2 * t * t : -1 + (4 - 2 * t) * t; },\n            easeInCubic: function (t) { return t * t * t; },\n            easeOutCubic: function (t) { return (--t) * t * t + 1; },\n            easeInOutCubic: function (t) { return t < 0.5 ? 4 * t * t * t : (t - 1) * (2 * t - 2) * (2 * t - 2) + 1; },\n            easeInQuart: function (t) { return t * t * t * t; },\n            easeOutQuart: function (t) { return 1 - (--t) * t * t * t; },\n            easeInOutQuart: function (t) { return t < 0.5 ? 8 * t  * t  * t * t : 1 - 8 * (--t) * t * t * t; },\n            easeInQuint: function (t) { return t * t * t * t * t; },\n            easeOutQuint: function (t) { return 1 + (--t) * t *  t * t * t; },\n            easeInOutQuint: function (t) { return t < 0.5 ? 16 * t * t * t * t * t : 1 + 16 * (--t) * t * t * t * t; }\n        };\n        self.easing = function (t, b, c, d) {\n            return c * self.easingFunctions[self.attributes.touchEasingMethod](t / d) + b;\n        };\n        self.calculatePPSTimed = function () {\n            self.xPPST = -((self.touchDelta.x - self.touchSigmaTimed.x) / (self.touchDelta.t - self.touchSigmaTimed.t));\n            self.yPPST = -((self.touchDelta.y - self.touchSigmaTimed.y) / (self.touchDelta.t - self.touchSigmaTimed.t));\n            self.touchSigmaTimed = {\n                x: self.touchDelta.x,\n                y: self.touchDelta.y,\n                t: performance.now()\n            };\n        };\n        self.calculatePPS = function () {\n            self.xPPS = -((self.touchDelta.x - self.touchSigma.x) / (self.touchDelta.t - self.touchSigma.t));\n            self.yPPS = -((self.touchDelta.y - self.touchSigma.y) / (self.touchDelta.t - self.touchSigma.t));\n            self.touchSigma = {\n                x: self.touchDelta.x,\n                y: self.touchDelta.y,\n                t: performance.now()\n            };\n        };\n        self.touchEndAnimation = function () {\n            if (!self.canvas || !self.scrollBox.scrollTo) { return requestAnimationFrame(self.touchEndAnimation); }\n            var n = performance.now(),\n                d = self.attributes.touchReleaseAnimationDurationMs,\n                t;\n            t = n - self.touchDelta.t;\n            self.animationFrames += 1;\n            self.scrollAnimation.x = self.easing(t, self.touchDelta.scrollLeft, self.touchAnimateTo.x, d);\n            self.scrollAnimation.y = self.easing(t, self.touchDelta.scrollTop, self.touchAnimateTo.y, d);\n            if (t > d || (self.scrollAnimation.y === self.scrollBox.scrollTop\n                    && self.scrollAnimation.x === self.scrollBox.scrollLeft) || self.stopAnimation) {\n                return;\n            }\n            self.scrollBox.scrollTo(self.scrollAnimation.x, self.scrollAnimation.y);\n            requestAnimationFrame(self.touchEndAnimation);\n        };\n        self.touchEditCell = function (cell) {\n            self.beginEditAt(cell.columnIndex, cell.rowIndex);\n        };\n        self.touchCell = function (e) {\n            return function () {\n                clearInterval(self.calculatePPSTimer);\n                var i, pos = self.getTouchPos(e);\n                if (Math.abs(self.touchDelta.x) + Math.abs(self.touchDelta.y) < self.attributes.touchDeadZone) {\n                    i = self.getCellAt(pos.x, pos.y);\n                    if (!i) { return; }\n                    if (self.touchingCell && self.touchingCell.rowIndex === i.rowIndex\n                            && self.touchingCell.columnIndex === i.columnIndex) {\n                        self.touchEditCell(i);\n                        return;\n                    }\n                    if (self.input && self.input.editCell) {\n                        self.endEdit();\n                    }\n                    self.touchingCell = i;\n                    self.selectArea({\n                        top: i.rowIndex,\n                        bottom: i.rowIndex,\n                        left: i.columnIndex,\n                        right: i.columnIndex\n                    });\n                    self.draw(true);\n                }\n            };\n        };\n        self.touchstart = function (e) {\n            if (e.changedTouches[0]) {\n                self.touchStart = self.getTouchPos(e);\n                self.startingCell = self.getCellAt(self.touchStart.x, self.touchStart.y, true);\n            }\n            if (self.dispatchEvent('touchstart', {NativeEvent: e, cell: self.startingCell})) { return; }\n            self.disposeContextMenu();\n            clearInterval(self.calculatePPSTimer);\n            clearTimeout(self.touchContextTimeout);\n            self.touchStartEvent = e;\n            self.stopAnimation = true;\n            self.animationFrames = 0;\n            self.stopPropagation(e);\n            e.preventDefault();\n            if (e.touches.length === 1 && e.changedTouches[0] && !self.zoomAltered) {\n                self.touchLength = 1;\n                self.touchStart = self.touchStart || self.touchStart1;\n                self.touchScrollStart = {\n                    x: self.scrollBox.scrollLeft,\n                    y: self.scrollBox.scrollTop,\n                    t: performance.now()\n                };\n                self.touchDelta = {\n                    x: 0,\n                    y: 0,\n                    scrollLeft: self.scrollBox.scrollLeft,\n                    scrollTop: self.scrollBox.scrollTop,\n                    t: self.touchScrollStart.t\n                };\n                self.touchSigma = {\n                    x: self.touchDelta.x,\n                    y: self.touchDelta.y,\n                    t: self.touchDelta.t\n                };\n                self.touchSigmaTimed = {\n                    x: self.touchDelta.x,\n                    y: self.touchDelta.y,\n                    t: self.touchDelta.t\n                };\n                self.touchContextTimeout = setTimeout(function () {\n                    self.contextmenuEvent(e, self.touchStart);\n                }, self.attributes.touchContextMenuTimeMs);\n                self.calculatePPSTimer = setInterval(self.calculatePPSTimed, touchTimerMs);\n                if (self.startingCell && (self.startingCell.isGrid || ['tree', 'inherit'].indexOf(self.startingCell.context) !== -1)) {\n                    self.hasFocus = false;\n                    return;\n                }\n                self.hasFocus = true;\n                if (self.startingCell.isHeader) {\n                    if (self.startingCell.isRowHeader) {\n                        self.selectArea({\n                            top: self.startingCell.rowIndex,\n                            bottom: self.startingCell.rowIndex,\n                            left: 0,\n                            right: self.getVisibleSchema().length - 1,\n                        });\n                        self.draw(true);\n                    } else if (self.startingCell.isColumnHeader) {\n                        if (self.attributes.columnHeaderClickBehavior === 'sort') {\n                            if (self.orderBy === self.startingCell.header.name) {\n                                self.orderDirection = self.orderDirection === 'asc' ? 'desc' : 'asc';\n                            } else {\n                                self.orderDirection = 'asc';\n                            }\n                            self.order(self.startingCell.header.name, self.orderDirection);\n                        }\n                        if (self.attributes.columnHeaderClickBehavior === 'select') {\n                            self.selectArea({\n                                top: 0,\n                                bottom: self.data.length - 1,\n                                left: self.startingCell.columnIndex,\n                                right: self.startingCell.columnIndex,\n                            });\n                            self.draw(true);\n                        }\n                    }\n                    self.touchEndEvents(e);\n                    return;\n                }\n            }\n            if (self.zoomAltered) { return; }\n            document.body.addEventListener('touchmove', self.touchmove, {passive: false});\n            document.body.addEventListener('touchend', self.touchend, false);\n            document.body.addEventListener('touchcancel', self.touchcancel, false);\n            self.draw(true);\n        };\n        self.touchSelect = function (cell, handleType) {\n            if (cell.rowIndex === undefined || cell.columnIndex === undefined) { return; }\n            self.touchSelecting = true;\n            var bounds = self.getSelectionBounds();\n            if (handleType === 'selection-handle-bl'\n                    && cell.rowIndex >= bounds.top\n                    && cell.columnIndex <= bounds.right) {\n                bounds.bottom = cell.rowIndex;\n                bounds.left = cell.columnIndex;\n            } else if (handleType === 'selection-handle-tl'\n                    && cell.rowIndex <= bounds.bottom\n                    && cell.columnIndex <= bounds.right) {\n                bounds.top = cell.rowIndex;\n                bounds.left = cell.columnIndex;\n            } else if (handleType === 'selection-handle-tr'\n                    && cell.rowIndex <= bounds.bottom\n                    && cell.columnIndex >= bounds.left) {\n                bounds.top = cell.rowIndex;\n                bounds.right = cell.columnIndex;\n            } else if (handleType === 'selection-handle-br'\n                    && cell.rowIndex >= bounds.top\n                    && cell.columnIndex >= bounds.left) {\n                bounds.bottom = cell.rowIndex;\n                bounds.right = cell.columnIndex;\n            }\n            if (self.attributes.selectionMode === 'row' || cell.rowIndex === -1) {\n                bounds.left = 0;\n                bounds.right = self.getSchema().length - 1;\n            } else {\n                bounds.left = Math.max(0, bounds.left);\n            }\n            self.selectArea(bounds);\n            self.draw(true);\n        };\n        function touchMove(e) {\n            var ch, rw, rScrollZone, lScrollZone, bScrollZone, tScrollZone, sbw, t1, t2;\n            if (self.dispatchEvent('beforetouchmove', {NativeEvent: e})) { return; }\n            clearTimeout(touchScrollTimeout);\n            if (e.changedTouches[0]) {\n                self.touchPosition = self.getTouchPos(e);\n            }\n            if (e.changedTouches[1]) {\n                self.touchPosition1 = self.getTouchPos(e, 1);\n            }\n            if (Math.abs(self.touchDelta.x) + Math.abs(self.touchDelta.y) > self.attributes.touchDeadZone) {\n                clearTimeout(self.touchContextTimeout);\n            }\n            if (e.touches.length === 2 && self.touchPosition && self.touchPosition1) {\n                t1 = self.touchPosition.y;\n                t2 = self.touchPosition1.y;\n                if (!self.zoomDeltaStart) {\n                    self.zoomDeltaStart = Math.abs(t1 - t2);\n                    self.startScale = self.scale;\n                }\n                self.touchLength = 2;\n                self.scaleDelta = self.zoomDeltaStart - Math.abs(t1 - t2);\n                self.scale = self.startScale - (self.scaleDelta * self.attributes.touchZoomSensitivity);\n                self.scale = Math.min(Math.max(self.scale, self.attributes.touchZoomMin), self.attributes.touchZoomMax);\n                self.zoomAltered = true;\n                self.resize(true);\n                self.resizeChildGrids();\n                return;\n            }\n            if (self.zoomAltered) { return; }\n            self.touchLength = 1;\n            self.touchPosition = self.touchPosition || self.touchPosition1;\n            ch = self.getColumnHeaderCellHeight();\n            rw = self.getRowHeaderCellWidth();\n            rScrollZone = self.width - self.style.scrollBarWidth - self.touchPosition.x < self.attributes.selectionScrollZone;\n            lScrollZone = self.touchPosition.x - rw < self.attributes.selectionScrollZone;\n            bScrollZone = self.height - self.style.scrollBarWidth - self.touchPosition.y < self.attributes.selectionScrollZone;\n            tScrollZone = self.touchPosition.y - ch < self.attributes.selectionScrollZone;\n            sbw = self.style.scrollBarWidth;\n            function touchScroll() {\n                var x = self.scrollBox.scrollLeft,\n                    y = self.scrollBox.scrollTop;\n                x += (rScrollZone ? self.attributes.selectionScrollIncrement : 0);\n                y += (bScrollZone ? self.attributes.selectionScrollIncrement : 0);\n                y -= (tScrollZone ? self.attributes.selectionScrollIncrement : 0);\n                x -= (lScrollZone ? self.attributes.selectionScrollIncrement : 0);\n                self.scrollBox.scrollTo(x, y);\n                touchScrollTimeout = setTimeout(touchScroll, self.attributes.scrollRepeatRate);\n            }\n            e.stopPropagation();\n            self.touchDelta = {\n                x: self.touchPosition.x - self.touchStart.x,\n                y: self.touchPosition.y - self.touchStart.y,\n                scrollLeft: self.scrollBox.scrollLeft,\n                scrollTop: self.scrollBox.scrollTop,\n                t: performance.now()\n            };\n            self.currentCell = self.getCellAt(self.touchPosition.x, self.touchPosition.y);\n            self.dispatchEvent('touchmove', {NativeEvent: e, cell: self.currentCell});\n            self.calculatePPS();\n            self.touchDuration = performance.now() - self.touchScrollStart.t;\n            self.stopAnimation = true;\n            self.animationFrames = 0;\n            if (self.touchSelecting && (rScrollZone || lScrollZone || tScrollZone || bScrollZone)) {\n                touchScroll();\n            }\n            if (/vertical-scroll-/.test(self.startingCell.style)) {\n                self.scrollBox.scrollTop = self.scrollBox.scrollHeight\n                    * ((self.touchPosition.y - ch - sbw) / (self.scrollBox.height - sbw - ch));\n                return;\n            }\n            if (/horizontal-scroll-/.test(self.startingCell.style)) {\n                self.scrollBox.scrollLeft = self.scrollBox.scrollWidth\n                    * ((self.touchPosition.x - rw - sbw) / (self.scrollBox.width - sbw - rw));\n                return;\n            }\n            if (/selection-handle-/.test(self.startingCell.style)) {\n                self.touchSelect(self.currentCell, self.startingCell.style);\n                return;\n            }\n            self.scrollBox.scrollTo(self.touchScrollStart.x - self.touchDelta.x,\n                self.touchScrollStart.y - self.touchDelta.y);\n        };\n        self.touchmove = function (e) {\n            if (touchMoving) {\n                return;\n            }\n            requestAnimationFrame(function () {\n                touchMoving = true;\n                touchMove(e);\n                touchMoving = false;\n            });\n        };\n        self.touchEndEvents = function (e) {\n            self.zoomDeltaStart = undefined;\n            self.touchSelecting = false;\n            clearInterval(self.touchScrollTimeout);\n            clearInterval(self.touchContextTimeout);\n            clearInterval(self.calculatePPSTimer);\n            e.stopPropagation();\n            document.body.removeEventListener('touchmove', self.touchmove, {passive: false});\n            document.body.removeEventListener('touchend', self.touchend, false);\n            document.body.removeEventListener('touchcancel', self.touchcancel, false);\n        };\n        self.touchend = function (e) {\n            if (self.dispatchEvent('touchend', {NativeEvent: e, cell: self.currentCell})) { return; }\n            self.zoomDeltaStart = undefined;\n            if (e.changedTouches[0]) {\n                self.touchPosition = undefined;\n            }\n            if (e.changedTouches[1]) {\n                self.touchPosition1 = undefined;\n            }\n            if (self.zoomAltered) {\n                if (e.touches.length === 0) {\n                    self.zoomAltered = false;\n                }\n                return;\n            }\n            var dz = Math.abs(self.touchDelta.x) + Math.abs(self.touchDelta.y) < self.attributes.touchDeadZone;\n            if (isNaN(self.xPPS)) {\n                self.xPPS = 0;\n            }\n            if (isNaN(self.yPPS)) {\n                self.yPPS = 0;\n            }\n            if (isNaN(self.xPPST)) {\n                self.xPPST = 0;\n            }\n            if (isNaN(self.yPPST)) {\n                self.yPPST = 0;\n            }\n            self.touchAnimateTo.x = self.xPPS * self.attributes.touchReleaseAcceleration;\n            self.touchAnimateTo.y = self.yPPS * self.attributes.touchReleaseAcceleration;\n            self.calculatePPSTimed();\n            if (dz && !self.contextMenu) {\n                self.touchCell(self.touchStartEvent)();\n            } else if (self.animationFrames === 0\n                    && (Math.abs(self.xPPST) > self.attributes.scrollAnimationPPSThreshold\n                        || Math.abs(self.yPPST) > self.attributes.scrollAnimationPPSThreshold)\n                    && !/-scroll-/.test(self.startingCell.style)\n                    && !dz) {\n                self.stopAnimation = false;\n                self.touchEndAnimation();\n            }\n            self.touchEndEvents(e);\n        };\n        self.touchcancel = function (e) {\n            if (self.dispatchEvent('touchcancel', {NativeEvent: e, cell: self.currentCell})) { return; }\n            self.touchEndEvents(e);\n        };\n    };\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }),\n/* 6 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true*/\n/*globals HTMLElement: false, Reflect: false, define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function () {\n    'use strict';\n    return function (self, ctor) {\n        self.scale = 1;\n        self.orders = {\n            rows: [],\n            columns: []\n        };\n        self.appliedInlineStyles = {};\n        self.cellGridAttributes = {};\n        self.treeGridAttributes = {};\n        self.visibleRowHeights = [];\n        self.hasFocus = false;\n        self.activeCell = {\n            columnIndex: 0,\n            rowIndex: 0\n        };\n        self.innerHTML = '';\n        self.storageName = 'canvasDataGrid';\n        self.invalidSearchExpClass = 'canvas-datagrid-invalid-search-regExp';\n        self.localStyleLibraryStorageKey = 'canvas-datagrid-user-style-library';\n        self.dataType = 'application/x-canvas-datagrid';\n        self.orderBy = null;\n        self.orderDirection = 'asc';\n        self.orderings = {\n            columns: [],\n            add: function (orderBy, orderDirection, sortFunction) {\n                self.orderings.columns = self.orderings.columns.filter(function (col) {\n                    return col.orderBy !== orderBy;\n                });\n                self.orderings.columns.push({\n                    orderBy: orderBy,\n                    orderDirection: orderDirection,\n                    sortFunction: sortFunction\n                });\n            },\n            sort: function () {\n                self.orderings.columns.forEach(function (col) {\n                    self.data.sort(col.sortFunction(col.orderBy, col.orderDirection));\n                });\n            }\n        };\n        self.columnFilters = {};\n        self.filters = {};\n        self.frozenRow = 0;\n        self.frozenColumn = 0;\n        self.ellipsisCache = {};\n        self.scrollCache = { x: [], y: [] };\n        self.scrollBox = {};\n        self.visibleRows = [];\n        self.visibleCells = [];\n        self.sizes = {\n            rows: {},\n            columns: {},\n            trees: {}\n        };\n        self.currentFilter = function () {\n            return true;\n        };\n        self.selections = [];\n        self.hovers = {};\n        self.attributes = {};\n        self.style = {};\n        self.formatters = {};\n        self.sorters = {};\n        self.parsers = {};\n        self.schemaHashes = {};\n        self.events = {};\n        self.changes = [];\n        self.scrollIndexTop = 0;\n        self.scrollPixelTop = 0;\n        self.scrollIndexLeft = 0;\n        self.scrollPixelLeft = 0;\n        self.childGrids = {};\n        self.openChildren = {};\n        self.scrollModes = [\n            'vertical-scroll-box',\n            'vertical-scroll-top',\n            'vertical-scroll-bottom',\n            'horizontal-scroll-box',\n            'horizontal-scroll-right',\n            'horizontal-scroll-left'\n        ];\n        self.componentL1Events = {};\n        self.eventNames = ['afterdraw', 'afterrendercell', 'attributechanged', 'beforebeginedit',\n            'beforecreatecellgrid', 'beforedraw', 'beforeendedit', 'beforerendercell', 'beforerendercellgrid',\n            'beginedit', 'cellmouseout', 'cellmouseover', 'click', 'collapsetree', 'contextmenu', 'copy',\n            'datachanged', 'dblclick', 'endedit', 'expandtree', 'formatcellvalue', 'keydown', 'keypress',\n            'keyup', 'mousedown', 'mousemove', 'mouseup', 'newrow', 'ordercolumn', 'rendercell', 'rendercellgrid',\n            'renderorderbyarrow', 'rendertext', 'rendertreearrow', 'reorder', 'reordering', 'resize',\n            'resizecolumn', 'resizerow', 'schemachanged', 'scroll', 'selectionchanged', 'stylechanged',\n            'touchcancel', 'touchend', 'touchmove', 'touchstart', 'wheel'];\n        self.mouse = { x: 0, y: 0};\n        self.getSelectedData = function (expandToRow) {\n            var d = [], s = self.getSchema(), l = self.data.length;\n            if (l === 0) { return []; }\n            self.selections.forEach(function (row, index) {\n                if (!row) { return; }\n                if (index === l) { return; }\n                if (row.length === 0) {\n                    d[index] = null;\n                    return;\n                }\n                d[index] = {};\n                row.forEach(function (col) {\n                    var orderedIndex;\n                    if (col === -1 || !s[col]) { return; }\n                    orderedIndex = self.orders.columns[col];\n                    if (!expandToRow && s[orderedIndex].hidden) { return; }\n                    if (self.data[index]) {\n                        d[index][s[orderedIndex].name] = self.data[index][s[orderedIndex].name];\n                    }\n                });\n            });\n            return d;\n        };\n        self.getColumnHeaderCellHeight = function () {\n            if (!self.attributes.showColumnHeaders) { return 0; }\n            return ((self.sizes.rows[-1] || self.style.columnHeaderCellHeight) * self.scale);\n        };\n        self.getRowHeaderCellWidth = function () {\n            if (!self.attributes.showRowHeaders) { return 0; }\n            return (self.sizes.columns[-1] || self.style.rowHeaderCellWidth) * self.scale;\n        };\n        self.setStorageData = function () {\n            if (!self.attributes.saveAppearance || !self.attributes.name) { return; }\n            var visibility = {};\n            self.getSchema().forEach(function (column) {\n                visibility[column.name] = !column.hidden;\n            });\n            localStorage.setItem(self.storageName + '-' + self.attributes.name, JSON.stringify({\n                sizes: {\n                    rows: self.sizes.rows,\n                    columns: self.sizes.columns\n                },\n                orders: {\n                    rows: self.orders.rows,\n                    columns: self.orders.columns\n                },\n                orderBy: self.orderBy,\n                orderDirection: self.orderDirection,\n                visibility: visibility\n            }));\n        };\n        self.getSchema = function () {\n            return self.schema || self.tempSchema || [];\n        };\n        function fillArray(low, high) {\n            var i = [], x;\n            for (x = low; x <= high; x += 1) {\n                i[x] = x;\n            }\n            return i;\n        }\n        self.createColumnOrders = function () {\n            var s = self.getSchema();\n            self.orders.columns = fillArray(0, s.length - 1);\n        };\n        self.createRowOrders = function () {\n            self.orders.rows = fillArray(0, self.data.length - 1);\n        };\n        self.getVisibleSchema = function () {\n            return self.getSchema().filter(function (col) {\n                return !col.hidden;\n            });\n        };\n        self.applyDefaultValue = function (row, header) {\n            var d = header.defaultValue || '';\n            if (typeof d === 'function') {\n                d = d.apply(self.intf, [header]);\n            }\n            row[header.name] = d;\n        };\n        self.createNewRowData = function () {\n            self.newRow = {};\n            self.getSchema().forEach(function forEachHeader(header) {\n                self.applyDefaultValue(self.newRow, header);\n            });\n        };\n        self.getSchemaNameHash = function (key) {\n            var n = 0;\n            while (self.schemaHashes[key]) {\n                n += 1;\n                key = key + n;\n            }\n            return key;\n        };\n        self.filter = function (type) {\n            var f = self.filters[type];\n            if (!f && type !== undefined) {\n                console.warn('Cannot find filter for type %s, falling back to substring match.', type);\n                f = self.filters.string;\n            }\n            return f;\n        };\n        self.applyFilter = function () {\n            self.refreshFromOrigialData();\n            Object.keys(self.columnFilters).forEach(function (filter) {\n                var header = self.getHeaderByName(filter);\n                if (!header) {\n                    return;\n                }\n                self.currentFilter = header.filter || self.filter(header.type || 'string');\n                self.data = self.data.filter(function (row) {\n                    return self.currentFilter(row[filter], self.columnFilters[filter]);\n                });\n            });\n            self.resize();\n            self.draw(true);\n        };\n        self.applyDataTransforms = function () {\n            self.applyFilter();\n            self.orderings.sort();\n        }\n        self.getBestGuessDataType = function (columnName, data) {\n            var t, x, l = data.length;\n            for (x = 0; x < l; x += 1) {\n                if (data[x] !== undefined && data[x] !== null && [null, undefined].indexOf(data[x][columnName]) !== -1) {\n                    t = typeof data[x];\n                    return t === 'object' ? 'string' : t;\n                }\n            }\n            return 'string';\n        };\n        self.drawChildGrids = function () {\n            Object.keys(self.childGrids).forEach(function (gridKey) {\n                self.childGrids[gridKey].draw();\n            });\n        };\n        self.resizeChildGrids = function () {\n            Object.keys(self.childGrids).forEach(function (gridKey) {\n                self.childGrids[gridKey].resize();\n            });\n        };\n        self.autoScrollZone = function (e, x, y, ctrl) {\n            var setTimer,\n                rowHeaderCellWidth = self.getRowHeaderCellWidth(),\n                columnHeaderCellHeight = self.getColumnHeaderCellHeight();\n            if (y !== -1) {\n                if (x > self.width - self.attributes.selectionScrollZone && x < self.width) {\n                    self.scrollBox.scrollLeft += self.attributes.selectionScrollIncrement;\n                    setTimer = true;\n                }\n                if (x - self.attributes.selectionScrollZone - rowHeaderCellWidth < 0) {\n                    self.scrollBox.scrollLeft -= self.attributes.selectionScrollIncrement;\n                    setTimer = true;\n                }\n            }\n            if (y !== -1) {\n                if (y > self.height - self.attributes.selectionScrollZone && y < self.height) {\n                    self.scrollBox.scrollTop += self.attributes.selectionScrollIncrement;\n                    setTimer = true;\n                }\n                if (y - self.attributes.selectionScrollZone - columnHeaderCellHeight < 0) {\n                    self.scrollBox.scrollTop -= self.attributes.selectionScrollIncrement;\n                    setTimer = true;\n                }\n            }\n            if (setTimer && !ctrl && self.currentCell && self.currentCell.columnIndex !== -1) {\n                self.scrollTimer = setTimeout(self.mousemove, self.attributes.scrollRepeatRate, e);\n            }\n        };\n        self.refreshFromOrigialData = function () {\n            self.data = self.originalData.filter(function (row) {\n                return true;\n            });\n        };\n        self.validateColumn = function (c, s) {\n            if (!c.name) {\n                throw new Error('A column must contain at least a name.');\n            }\n            if (s.filter(function (i) { return i.name === c.name; }).length > 0) {\n                throw new Error('A column with the name '\n                    + c.name + ' already exists and cannot be added again.');\n            }\n            return true;\n        };\n        self.setDefaults = function (obj1, obj2, key, def) {\n            obj1[key] = obj2[key] === undefined ? def : obj2[key];\n        };\n        self.setAttributes = function () {\n            self.defaults.attributes.forEach(function eachAttribute(i) {\n                self.setDefaults(self.attributes, self.args, i[0], i[1]);\n            });\n        };\n        self.setStyle = function () {\n            self.defaults.styles.forEach(function eachStyle(i) {\n                self.setDefaults(self.style, self.args.style || {}, i[0], i[1]);\n            });\n        };\n        self.autosize = function (colName) {\n            self.getVisibleSchema().forEach(function (col, colIndex) {\n                if (col.name === colName || colName === undefined) {\n                    self.sizes.columns[colIndex]\n                        = Math.max(self.findColumnMaxTextLength(col.name), self.style.minColumnWidth);\n                }\n            });\n            self.sizes.columns[-1] = self.findColumnMaxTextLength('cornerCell');\n        };\n        self.dispose = function () {\n            if (!self.isChildGrid && self.canvas && self.canvas.parentNode) {\n                self.canvas.parentNode.removeChild(self.canvas);\n            }\n            if(!self.isChildGrid) {\n                document.body.removeChild(self.controlInput)\n            }\n            self.eventParent.removeEventListener('mouseup', self.mouseup, false);\n            self.eventParent.removeEventListener('mousedown', self.mousedown, false);\n            self.eventParent.removeEventListener('dblclick', self.dblclick, false);\n            self.eventParent.removeEventListener('click', self.click, false);\n            self.eventParent.removeEventListener('mousemove', self.mousemove);\n            self.eventParent.removeEventListener('wheel', self.scrollWheel, false);\n            self.canvas.removeEventListener('contextmenu', self.contextmenu, false);\n            self.canvas.removeEventListener('copy', self.copy);\n            self.controlInput.removeEventListener('copy', self.copy);\n            self.controlInput.removeEventListener('cut', self.cut);\n            self.controlInput.removeEventListener('paste', self.paste);\n            self.controlInput.removeEventListener('keypress', self.keypress, false);\n            self.controlInput.removeEventListener('keyup', self.keyup, false);\n            self.controlInput.removeEventListener('keydown', self.keydown, false);\n            window.removeEventListener('resize', self.resize);\n            if (self.observer && self.observer.disconnect) {\n                self.observer.disconnect();\n            }\n        };\n        self.tryLoadStoredSettings = function () {\n            var s;\n            self.reloadStoredValues();\n            if (self.storedSettings\n                    && typeof self.storedSettings.orders === 'object'\n                    && self.storedSettings.orders !== null) {\n                if (self.storedSettings.orders.rows.length >= (self.data || []).length) {\n                    self.orders.rows = self.storedSettings.orders.rows;\n                }\n                s = self.getSchema();\n                if (self.storedSettings.orders.columns.length === s.length) {\n                    self.orders.columns = self.storedSettings.orders.columns;\n                }\n                self.orderBy = self.storedSettings.orderBy === undefined\n                    ? s[0].name : self.storedSettings.orderBy;\n                self.orderDirection = self.storedSettings.orderDirection === undefined\n                    ? 'asc' : self.storedSettings.orderDirection;\n                if (self.storedSettings.orderBy !== undefined && self.getHeaderByName(self.orderBy) && self.orderDirection) {\n                    self.order(self.orderBy, self.orderDirection);\n                }\n            }\n        };\n        self.getDomRoot = function () {\n            return self.shadowRoot ? self.shadowRoot.host : self.parentNode;\n        };\n        self.getFontName = function (fontStyle) {\n            return fontStyle.replace(/\\d+\\.?\\d*px/, '');\n        };\n        self.getFontHeight = function (fontStyle) {\n            return parseFloat(fontStyle, 10);\n        };\n        self.parseStyleValue = function (key) {\n            if (/Font/.test(key)) {\n                self.style[key + 'Height'] = self.getFontHeight(self.style[key]);\n                self.style[key + 'Name'] = self.getFontName(self.style[key]);\n                return;\n            }\n            // when inheriting styles from already instantiated grids, don't parse already parsed values.\n            if (key === 'moveOverlayBorderSegments' && typeof self.style[key] === 'string') {\n                self.style[key] = self.style[key].split(',')\n                    .map(function (i) { return parseInt(i, 10); });\n            }\n        };\n        self.initProp = function (propName) {\n            if (!self.args[propName]) { return; }\n            Object.keys(self.args[propName]).forEach(function (key) {\n                self[propName][key] = self.args[propName][key];\n            });\n        };\n        self.getStyleProperty = function (key) {\n            if (self.styleKeys.indexOf(key) === -1) {\n                return self.parentNodeStyle[key];\n            }\n            return self.style[key];\n        };\n        self.setStyleProperty = function (key, value, supressDrawAndEvent) {\n            var isDim = ['height', 'width', 'minHeight', 'minWidth', 'maxHeight', 'maxWidth'].indexOf(key) !== -1;\n            if (self.styleKeys.indexOf(key) === -1) {\n                self.parentNodeStyle[key] = value;\n            } else {\n                if (/-/.test(key)) {\n                    key = self.dehyphenateProperty(key);\n                }\n                self.style[key] = value;\n                self.parseStyleValue(key);\n            }\n            if (isDim) {\n                self.resize();\n            }\n            if (!supressDrawAndEvent) {\n                self.draw(true);\n                self.dispatchEvent('stylechanged', {name: 'style', value: value});\n            }\n        };\n        self.reloadStoredValues = function () {\n            if (self.attributes.name && self.attributes.saveAppearance) {\n                try {\n                    self.storedSettings = localStorage.getItem(self.storageName + '-' + self.attributes.name);\n                } catch (e) {\n                    console.warn(\"Error loading stored values. \" + e.message);\n                    self.storedSettings = undefined;\n                }\n                if (self.storedSettings) {\n                    try {\n                        self.storedSettings = JSON.parse(self.storedSettings);\n                    } catch (e) {\n                        console.warn('could not read settings from localStore', e);\n                        self.storedSettings = undefined;\n                    }\n                }\n                if (self.storedSettings) {\n                    if (typeof self.storedSettings.sizes === 'object'\n                            && self.storedSettings.sizes !== null) {\n                        self.sizes.rows = self.storedSettings.sizes.rows;\n                        self.sizes.columns = self.storedSettings.sizes.columns;\n                        ['trees', 'columns', 'rows'].forEach(function (i) {\n                            if (!self.sizes[i]) {\n                                self.sizes[i] = {};\n                            }\n                        });\n                    }\n                    if (typeof self.storedSettings.visibility === 'object') {\n                        self.getSchema().forEach(function (column) {\n                            if (self.storedSettings.visibility && self.storedSettings.visibility[column.name] !== undefined) {\n                                column.hidden = !self.storedSettings.visibility[column.name];\n                            }\n                        });\n                    }\n                }\n            }\n        };\n        self.init = function () {\n            if (self.initialized) { return; }\n            function addStyleKeyIfNoneExists(key) {\n                if (self.styleKeys.indexOf(key) === -1) {\n                    self.styleKeys.push(key);\n                }\n            }\n            var publicStyleKeyIntf = {};\n            self.setAttributes();\n            self.setStyle();\n            self.initScrollBox();\n            self.setDom();\n            self.nodeType = 'canvas-datagrid';\n            self.ie = /Trident/.test(window.navigator.userAgent);\n            self.edge = /Edge/.test(window.navigator.userAgent);\n            self.webKit = /WebKit/.test(window.navigator.userAgent);\n            self.moz = /Gecko/.test(window.navigator.userAgent);\n            self.mobile = /Mobile/i.test(window.navigator.userAgent);\n            self.cursorGrab = 'grab';\n            self.cursorGrabing = 'grabbing';\n            self.cursorGrab = self.webKit ? '-webkit-grab' : self.cursorGrab;\n            self.cursorGrabing = self.moz ? '-webkit-grabbing' : self.cursorGrabbing;\n            self.pointerLockPosition = {x: 0, y: 0};\n            Object.keys(self.style).forEach(self.parseStyleValue);\n            self.intf.moveSelection = self.moveSelection;\n            self.intf.moveTo = self.moveTo;\n            self.intf.addEventListener = self.addEventListener;\n            self.intf.removeEventListener = self.removeEventListener;\n            self.intf.dispatchEvent = self.dispatchEvent;\n            /**\n             * Releases grid resources and removes grid elements.\n             * @memberof canvasDatagrid\n             * @name dispose\n             * @method\n             */\n            self.intf.dispose = self.dispose;\n            /**\n             * Appends the grid to another element later.  Not implemented.\n             * @memberof canvasDatagrid\n             * @name appendTo\n             * @method\n             * @param {number} el The element to append the grid to.\n             */\n            self.intf.appendTo = self.appendTo;\n            self.intf.getVisibleCellByIndex = self.getVisibleCellByIndex;\n            self.intf.filters = self.filters;\n            self.intf.sorters = self.sorters;\n            self.intf.autosize = self.autosize;\n            self.intf.beginEditAt = self.beginEditAt;\n            self.intf.endEdit = self.endEdit;\n            self.intf.setActiveCell = self.setActiveCell;\n            self.intf.forEachSelectedCell = self.forEachSelectedCell;\n            self.intf.scrollIntoView = self.scrollIntoView;\n            self.intf.clearChangeLog = self.clearChangeLog;\n            self.intf.gotoCell = self.gotoCell;\n            self.intf.gotoRow = self.gotoRow;\n            self.intf.getHeaderByName = self.getHeaderByName;\n            self.intf.findColumnScrollLeft = self.findColumnScrollLeft;\n            self.intf.findRowScrollTop = self.findRowScrollTop;\n            self.intf.fitColumnToValues = self.fitColumnToValues;\n            self.intf.findColumnMaxTextLength = self.findColumnMaxTextLength;\n            self.intf.disposeContextMenu = self.disposeContextMenu;\n            self.intf.getCellAt = self.getCellAt;\n            self.intf.isCellVisible = self.isCellVisible;\n            self.intf.isRowVisible = self.isRowVisible;\n            self.intf.isColumnVisible = self.isColumnVisible;\n            self.intf.order = self.order;\n            self.intf.draw = self.draw;\n            self.intf.isComponent = self.isComponent;\n            self.intf.selectArea = self.selectArea;\n            self.intf.clipElement = self.clipElement;\n            self.intf.getSchemaFromData = self.getSchemaFromData;\n            self.intf.setFilter = self.setFilter;\n            self.intf.selectRow = self.selectRow;\n            self.intf.parentGrid = self.parentGrid;\n            self.intf.toggleTree = self.toggleTree;\n            self.intf.expandTree = self.expandTree;\n            self.intf.collapseTree = self.collapseTree;\n            self.intf.canvas = self.canvas;\n            self.intf.context = self.ctx;\n            self.intf.insertRow = self.insertRow;\n            self.intf.deleteRow = self.deleteRow;\n            self.intf.addRow = self.addRow;\n            self.intf.insertColumn = self.insertColumn;\n            self.intf.deleteColumn = self.deleteColumn;\n            self.intf.addColumn = self.addColumn;\n            self.intf.getClippingRect = self.getClippingRect;\n            self.intf.setRowHeight = self.setRowHeight;\n            self.intf.setColumnWidth = self.setColumnWidth;\n            self.intf.resetColumnWidths = self.resetColumnWidths;\n            self.intf.resetRowHeights = self.resetRowHeights;\n            self.intf.resize = self.resize;\n            self.intf.selectColumn = self.selectColumn;\n            self.intf.selectRow = self.selectRow;\n            self.intf.selectAll = self.selectAll;\n            self.intf.selectNone = self.selectNone;\n            self.intf.drawChildGrids = self.drawChildGrids;\n            self.intf.assertPxColor = self.assertPxColor;\n            self.intf.clearPxColorAssertions = self.clearPxColorAssertions;\n            self.intf.integerToAlpha = self.integerToAlpha;\n            self.intf.copy = self.copy;\n            self.intf.setStyleProperty = self.setStyleProperty;\n            Object.defineProperty(self.intf, 'defaults', {\n                get: function () {\n                    return {\n                        styles: self.defaults.styles.reduce(function (a, i) { a[i[0]] = i[1]; return a; }, {}),\n                        attributes: self.defaults.attributes.reduce(function (a, i) { a[i[0]] = i[1]; return a; }, {})\n                    };\n                }\n            });\n            self.styleKeys = Object.keys(self.intf.defaults.styles);\n            self.styleKeys.map(function (i) { return self.hyphenateProperty(i, false); }).forEach(addStyleKeyIfNoneExists);\n            self.styleKeys.map(function (i) { return self.hyphenateProperty(i, true); }).forEach(addStyleKeyIfNoneExists);\n            self.DOMStyles = window.getComputedStyle(document.body, null);\n            self.styleKeys.concat(Object.keys(self.DOMStyles)).forEach(function (key) {\n                // unless this line is here, Object.keys() will not work on <instance>.style\n                publicStyleKeyIntf[key] = undefined;\n                Object.defineProperty(publicStyleKeyIntf, key, {\n                    get: function () {\n                        return self.getStyleProperty(key);\n                    },\n                    set: function (value) {\n                        if (self.initialized) {\n                            self.appliedInlineStyles[key] = value;\n                        }\n                        self.setStyleProperty(key, value);\n                    }\n                });\n            });\n            Object.defineProperty(self.intf, 'shadowRoot', {\n                get: function () {\n                    return self.shadowRoot;\n                }\n            });\n            Object.defineProperty(self.intf, 'activeCell', {\n                get: function () {\n                    return self.activeCell;\n                }\n            });\n            Object.defineProperty(self.intf, 'hasFocus', {\n                get: function () {\n                    return self.hasFocus;\n                }\n            });\n            Object.defineProperty(self.intf, 'style', {\n                get: function () {\n                    return publicStyleKeyIntf;\n                },\n                set: function (valueObject) {\n                    Object.keys(valueObject).forEach(function (key) {\n                        self.setStyleProperty(key, valueObject[key], true);\n                    });\n                    self.draw(true);\n                    self.dispatchEvent('stylechanged', {name: 'style', value: valueObject});\n                }\n            });\n            Object.defineProperty(self.intf, 'attributes', { value: {}});\n            Object.keys(self.attributes).forEach(function (key) {\n                Object.defineProperty(self.intf.attributes, key, {\n                    get: function () {\n                        return self.attributes[key];\n                    },\n                    set: function (value) {\n                        self.attributes[key] = value;\n                        if (key === 'name') {\n                            self.tryLoadStoredSettings();\n                        }\n                        self.draw(true);\n                        self.dispatchEvent('attributechanged', {name: key, value: value[key]});\n                    }\n                });\n            });\n            self.filters.string = function (value, filterFor) {\n                value = String(value);\n                var filterRegExp,\n                    regEnd = /\\/(i|g|m)*$/,\n                    pattern = regEnd.exec(filterFor),\n                    flags = pattern ? pattern[0].substring(1) : '',\n                    flagLength = flags.length;\n                self.invalidFilterRegEx = undefined;\n                if (filterFor.substring(0, 1) === '/' && pattern) {\n                    try {\n                        filterRegExp = new RegExp(filterFor.substring(1, filterFor.length - (flagLength + 1)), flags);\n                    } catch (e) {\n                        self.invalidFilterRegEx = e;\n                        return;\n                    }\n                    return filterRegExp.test(value);\n                }\n                return value.toString ? value.toString().toLocaleUpperCase()\n                    .indexOf(filterFor.toLocaleUpperCase()) !== -1 : false;\n            };\n            self.filters.number = function (value, filterFor) {\n                if (!filterFor) { return true; }\n                return value === filterFor;\n            };\n            ['formatters', 'filters', 'sorters'].forEach(self.initProp);\n            self.applyComponentStyle(false, self.intf);\n            self.reloadStoredValues();\n            if (self.args.data) {\n                self.intf.data = self.args.data;\n            }\n            if (self.intf.innerText || self.intf.textContent) {\n                if (self.intf.dataType === 'application/x-canvas-datagrid') {\n                    self.intf.dataType = 'application/json+x-canvas-datagrid';\n                }\n                self.intf.data = self.intf.innerText || self.intf.textContent;\n            }\n            if (self.args.schema) {\n                self.intf.schema = self.args.schema;\n            }\n            if (self.isChildGrid || !self.isComponent) {\n                requestAnimationFrame(function () { self.resize(true); });\n            } else {\n                self.resize(true);\n            }\n            self.initialized = true;\n            return self;\n        };\n        /**\n         * Removes focus from the grid.\n         * @memberof canvasDatagrid\n         * @name blur\n         * @method\n         */\n        self.intf.blur = function (e) {\n            self.hasFocus = false;\n        };\n        /**\n         * Focuses on the grid.\n         * @memberof canvasDatagrid\n         * @name focus\n         * @method\n         */\n        self.intf.focus = function () {\n            self.hasFocus = true;\n            self.controlInput.focus();\n        };\n        if (self.shadowRoot || self.isChildGrid) {\n            Object.defineProperty(self.intf, 'height', {\n                get: function () {\n                    if (self.shadowRoot) {\n                        return self.shadowRoot.height;\n                    }\n                    return self.parentNode.height;\n                },\n                set: function (value) {\n                    if (self.shadowRoot) {\n                        self.shadowRoot.height = value;\n                    } else {\n                        self.parentNode.height = value;\n                    }\n                    self.resize(true);\n                }\n            });\n            Object.defineProperty(self.intf, 'width', {\n                get: function () {\n                    if (self.shadowRoot) {\n                        return self.shadowRoot.width;\n                    }\n                    return self.parentNode.width;\n                },\n                set: function (value) {\n                    if (self.shadowRoot) {\n                        self.shadowRoot.width = value;\n                    } else {\n                        self.parentNode.width = value;\n                    }\n                    self.resize(true);\n                }\n            });\n            Object.defineProperty(self.intf, 'parentNode', {\n                get: function () {\n                    return self.parentNode;\n                },\n                set: function (value) {\n                    if (!self.isChildGrid) {\n                        throw new TypeError('Cannot set property parentNode which has only a getter');\n                    }\n                    self.parentNode = value;\n                }\n            });\n        }\n        Object.defineProperty(self.intf, 'visibleRowHeights', {\n            get: function () {\n                return self.visibleRowHeights;\n            }\n        });\n        Object.defineProperty(self.intf, 'openChildren', {\n            get: function () {\n                return self.openChildren;\n            }\n        });\n        Object.defineProperty(self.intf, 'childGrids', {\n            get: function () {\n                return Object.keys(self.childGrids).map(function (gridId) {\n                    return self.childGrids[gridId];\n                });\n            }\n        });\n        Object.defineProperty(self.intf, 'isChildGrid', {\n            get: function () {\n                return self.isChildGrid;\n            }\n        });\n        Object.defineProperty(self, 'cursor', {\n            get: function () {\n                return self.parentNodeStyle.cursor;\n            },\n            set: function (value) {\n                if (value === 'cell') { value = 'default'; }\n                if (self.currentCursor !== value) {\n                    self.parentNodeStyle.cursor = value;\n                    self.currentCursor = value;\n                }\n            }\n        });\n        Object.defineProperty(self.intf, 'orderDirection', {\n            get: function () {\n                return self.orderDirection;\n            },\n            set: function (value) {\n                if (value !== 'desc') {\n                    value = 'asc';\n                }\n                self.orderDirection = value;\n                self.order(self.orderBy, self.orderDirection);\n            }\n        });\n        Object.defineProperty(self.intf, 'orderBy', {\n            get: function () {\n                return self.orderBy;\n            },\n            set: function (value) {\n                if (self.getSchema().find(function (col) {\n                        return col.name === value;\n                    }) === undefined) {\n                    throw new Error('Cannot sort by unknown column name.');\n                }\n                self.orderBy = value;\n                self.order(self.orderBy, self.orderDirection);\n            }\n        });\n        if (self.isComponent) {\n            Object.defineProperty(self.intf, 'offsetHeight', {\n                get: function () {\n                    return self.canvas.offsetHeight;\n                }\n            });\n            Object.defineProperty(self.intf, 'offsetWidth', {\n                get: function () {\n                    return self.canvas.offsetWidth;\n                }\n            });\n        }\n        Object.defineProperty(self.intf, 'scrollHeight', {\n            get: function () {\n                return self.scrollBox.scrollHeight;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollWidth', {\n            get: function () {\n                return self.scrollBox.scrollWidth;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollTop', {\n            get: function () {\n                return self.scrollBox.scrollTop;\n            },\n            set: function (value) {\n                self.scrollBox.scrollTop = value;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollLeft', {\n            get: function () {\n                return self.scrollBox.scrollLeft;\n            },\n            set: function (value) {\n                self.scrollBox.scrollLeft = value;\n            }\n        });\n        Object.defineProperty(self.intf, 'sizes', {\n            get: function () {\n                return self.sizes;\n            }\n        });\n        Object.defineProperty(self.intf, 'parentDOMNode', {\n            get: function () {\n                return self.parentDOMNode;\n            }\n        });\n        Object.defineProperty(self.intf, 'input', {\n            get: function () {\n                return self.input;\n            }\n        });\n        Object.defineProperty(self.intf, 'controlInput', {\n            get: function () {\n                return self.controlInput;\n            }\n        });\n        Object.defineProperty(self.intf, 'currentCell', {\n            get: function () {\n                return self.currentCell;\n            }\n        });\n        Object.defineProperty(self.intf, 'visibleCells', {\n            get: function () {\n                return self.visibleCells;\n            }\n        });\n        Object.defineProperty(self.intf, 'visibleRows', {\n            get: function () {\n                return self.visibleRows;\n            }\n        });\n        Object.defineProperty(self.intf, 'selections', {\n            get: function () {\n                return self.selections;\n            }\n        });\n        Object.defineProperty(self.intf, 'dragMode', {\n            get: function () {\n                return self.dragMode;\n            }\n        });\n        Object.defineProperty(self.intf, 'changes', {\n            get: function () {\n                return self.changes;\n            }\n        });\n        self.intf.formatters = self.formatters;\n        Object.defineProperty(self.intf, 'dataType', {\n            get: function () {\n                return self.dataType;\n            },\n            set: function (value) {\n                if (!self.parsers[value]) {\n                    throw new Error('No parser for MIME type ' + value);\n                }\n                self.dataType = value;\n            }\n        });\n        self.eventNames.forEach(function (eventName) {\n            Object.defineProperty(self.intf, 'on' + eventName, {\n                get: function () {\n                    return self.componentL1Events[eventName];\n                },\n                set: function (value) {\n                    self.events[eventName] = [];\n                    self.componentL1Events[eventName] = value;\n                    if (!value) { return; }\n                    self.addEventListener(eventName, value);\n                }\n            });\n        });\n        Object.defineProperty(self.intf, 'frozenRow', {\n            get: function () {\n                return self.frozenRow;\n            },\n            set: function (val) {\n                if (isNaN(val)) {\n                    throw new TypeError('Expected value for frozenRow to be a number.');\n                }\n                if (self.visibleRows.length < val) {\n                    throw new RangeError('Cannot set a value larger than the number of visible rows.');\n                }\n                self.frozenRow = val;\n            }\n        });\n        Object.defineProperty(self.intf, 'frozenColumn', {\n            get: function () {\n                return self.frozenColumn;\n            },\n            set: function (val) {\n                if (isNaN(val)) {\n                    throw new TypeError('Expected value for frozenRow to be a number.');\n                }\n                if (self.getVisibleSchema().length < val) {\n                    throw new RangeError('Cannot set a value larger than the number of visible columns.');\n                }\n                self.frozenColumn = val;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollIndexRect', {\n            get: function () {\n                return {\n                    top: self.scrollIndexTop,\n                    right: self.scrollIndexRight,\n                    bottom: self.scrollIndexBottom,\n                    left: self.scrollIndexLeft\n                };\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollPixelRect', {\n            get: function () {\n                return {\n                    top: self.scrollPixelTop,\n                    right: self.scrollPixelRight,\n                    bottom: self.scrollPixelBottom,\n                    left: self.scrollPixelLeft\n                };\n            }\n        });\n        Object.defineProperty(self.intf, 'rowOrder', {\n            get: function () {\n                return self.orders.rows;\n            },\n            set: function (val) {\n                if (!Array.isArray(val)) {\n                    throw new TypeError('Value must be an array.');\n                }\n                if (!self.data || val.length < self.data.length) {\n                    throw new RangeError('Array length must be equal to or greater than number of rows.');\n                }\n                self.orders.rows = val;\n            }\n        });\n        Object.defineProperty(self.intf, 'columnOrder', {\n            get: function () {\n                return self.orders.columns;\n            },\n            set: function (val) {\n                if (!Array.isArray(val)) {\n                    throw new TypeError('Value must be an array.');\n                }\n                if (val.length < self.getSchema().length) {\n                    throw new RangeError('Array length must be equal to or greater than number of columns.');\n                }\n                self.orders.columns = val;\n            }\n        });\n        Object.defineProperty(self.intf, 'selectionBounds', {\n            get: function () {\n                return self.getSelectionBounds();\n            }\n        });\n        Object.defineProperty(self.intf, 'selectedRows', {\n            get: function () {\n                return self.getSelectedData(true);\n            }\n        });\n        Object.defineProperty(self.intf, 'selectedCells', {\n            get: function () {\n                return self.getSelectedData();\n            }\n        });\n        Object.defineProperty(self.intf, 'visibleSchema', {\n            get: function () {\n                return self.getVisibleSchema().map(function eachDataRow(col) {\n                    return col;\n                });\n            }\n        });\n        Object.defineProperty(self.intf, 'treeGridAttributes', {\n            get: function () {\n                return self.treeGridAttributes;\n            },\n            set: function setTreeGridAttributes(value) {\n                self.treeGridAttributes = value;\n            }\n        });\n        Object.defineProperty(self.intf, 'cellGridAttributes', {\n            get: function () {\n                return self.cellGridAttributes;\n            },\n            set: function setCellGridAttributes(value) {\n                self.cellGridAttributes = value;\n            }\n        });\n        Object.defineProperty(self.intf, 'ctx', {\n            get: function () {\n                return self.ctx;\n            }\n        });\n        Object.defineProperty(self.intf, 'schema', {\n            get: function schemaGetter() {\n                return self.getSchema();\n            },\n            set: function schemaSetter(value) {\n                if (value === undefined) {\n                    // Issue #89 - allow schema to be set to initialized state\n                    self.schema = undefined;\n                    self.tempSchema = undefined;\n                    self.dispatchEvent('schemachanged', {schema: undefined});\n                    return;\n                }\n                if (!Array.isArray(value) || typeof value[0] !== 'object') {\n                    throw new Error('Schema must be an array of objects.');\n                }\n                if (value[0].name === undefined) {\n                    throw new Error('Expected schema to contain an object with at least a name property.');\n                }\n                self.schema = value.map(function eachSchemaColumn(column, index) {\n                    column.width = column.width || self.style.cellWidth;\n                    column.filter = column.filter || self.filter(column.type);\n                    column.type = column.type || 'string';\n                    column.index = index;\n                    column.columnIndex = index;\n                    column.rowIndex = -1;\n                    return column;\n                });\n                self.tempSchema = undefined;\n                self.createNewRowData();\n                self.createColumnOrders();\n                self.tryLoadStoredSettings();\n                if (self.storedSettings && typeof self.storedSettings.visibility === 'object') {\n                    self.schema.forEach(function hideEachSchemaColumn(column, index) {\n                        if (self.storedSettings && self.storedSettings.visibility[column.name] !== undefined) {\n                            column.hidden = !self.storedSettings.visibility[column.name];\n                        }\n                    });\n                }\n                self.resize(true);\n                self.dispatchEvent('schemachanged', {schema: self.schema});\n            }\n        });\n        /**\n         * Gets an array of currently registered MIME types.\n         * @memberof canvasDatagrid\n         * @name getDataTypes\n         * @method\n         */\n        self.intf.getTypes = function () {\n            return Object.keys(self.parsers);\n        };\n        self.parseInnerHtml = function (data) {\n            if (!data || /^ +$/.test(data)) {\n                return [];\n            }\n            try {\n                data = JSON.parse(data);\n            } catch (e) {\n                console.warn(Error('Cannot parse application/json+x-canvas-datagrid formated data. '\n                    + e.message + '  \\nNote: canvas-datagrid.innerHTML is for string data only.  '\n                    + 'Use the canvas-datagrid.data property to set object data.'));\n            }\n            return data;\n        };\n        self.parsers['application/json+x-canvas-datagrid'] = function (data, callback) {\n            self.parsers['application/x-canvas-datagrid'](self.parseInnerHtml(data), function (data, schema) {\n                return callback(data, schema);\n            });\n        };\n        self.parsers['application/x-canvas-datagrid'] = function (data, callback) {\n            return callback(data);\n        };\n        self.intf.parsers = self.parsers;\n        // send to dataType ETL function to extract from input data\n        // and transform into native [{}, {}] format\n        self.etl = function (data, callback) {\n            if (!self.intf.parsers[self.dataType]) {\n                throw new Error('Unsupported data type.');\n            }\n            self.intf.parsers[self.dataType](data, function (data, schema) {\n                if (Array.isArray(schema)) {\n                    self.schema = schema;\n                }\n                // Issue #89 - allow schema to be auto-created every time data is set\n                if (self.attributes.autoGenerateSchema) {\n                    self.schema = self.getSchemaFromData(data);\n                }\n                if (!self.schema) {\n                    self.tempSchema = self.getSchemaFromData(data);\n                }\n                if (self.getSchema()) {\n                    self.createColumnOrders();\n                }\n                // set the unfiltered/sorted data array\n                self.originalData = data;\n                // apply filter, sort, etc to incoming dataset\n                self.applyDataTransforms();\n                // empty data was set\n                if (!self.schema && (self.data || []).length === 0) {\n                    self.tempSchema = [{name: ''}];\n                }\n                self.fitColumnToValues('cornerCell', true);\n                if ((self.tempSchema && !self.schema) || self.attributes.autoGenerateSchema) {\n                    self.createColumnOrders();\n                    self.dispatchEvent('schemachanged', {schema: self.tempSchema});\n                }\n                callback();\n            });\n        };\n        Object.defineProperty(self.intf, 'data', {\n            get: function dataGetter() {\n                return self.data;\n            },\n            set: function dataSetter(value) {\n                self.etl(value, function () {\n                    self.changes = [];\n                    self.createNewRowData();\n                    if (self.attributes.autoResizeColumns && self.data.length > 0\n                            && self.storedSettings === undefined) {\n                        self.autosize();\n                    }\n                    // set the header column to fit the numbers in it\n                    self.fitColumnToValues('cornerCell', true);\n                    self.createRowOrders();\n                    self.tryLoadStoredSettings();\n                    self.dispatchEvent('datachanged', {data: self.data});\n                    self.resize(true);\n                });\n            }\n        });\n        self.initScrollBox = function () {\n            var sHeight = 0,\n                sWidth = 0,\n                scrollTop = 0,\n                scrollLeft = 0,\n                scrollHeight = 0,\n                scrollWidth = 0,\n                scrollBoxHeight = 20,\n                scrollBoxWidth = 20;\n            function setScrollTop(value, preventScrollEvent) {\n                if (isNaN(value)) {\n                    throw new Error('ScrollTop value must be a number');\n                }\n                if (value < 0) {\n                    value = 0;\n                }\n                if (value > scrollHeight) {\n                    value = scrollHeight;\n                }\n                if (scrollHeight < 0) {\n                    value = 0;\n                }\n                scrollTop = value;\n                if (!preventScrollEvent) {\n                    self.scroll();\n                }\n            }\n            function setScrollLeft(value, preventScrollEvent) {\n                if (isNaN(value)) {\n                    throw new Error('ScrollLeft value must be a number');\n                }\n                if (value < 0) {\n                    value = 0;\n                }\n                if (value > scrollWidth) {\n                    value = scrollWidth;\n                }\n                if (scrollWidth < 0) {\n                    value = 0;\n                }\n                scrollLeft = value;\n                if (!preventScrollEvent) {\n                    self.scroll();\n                }\n            }\n            self.scrollBox.toString = function () {\n                return '{\"width\": ' + scrollWidth.toFixed(2)\n                    + ', \"height\": ' + scrollHeight.toFixed(2)\n                    + ', \"left\": ' + scrollLeft.toFixed(2)\n                    + ', \"top\": ' + scrollTop.toFixed(2)\n                    + ', \"widthRatio\": ' + self.scrollBox.widthBoxRatio.toFixed(5)\n                    + ', \"heightRatio\": ' + self.scrollBox.heightBoxRatio.toFixed(5) + '}';\n            };\n            self.scrollBox.scrollTo = function (x, y, supressDrawEvent) {\n                setScrollLeft(x, true);\n                setScrollTop(y, supressDrawEvent);\n            };\n            Object.defineProperty(self.scrollBox, 'scrollBoxHeight', {\n                get: function () {\n                    return scrollBoxHeight;\n                },\n                set: function (value) {\n                    scrollBoxHeight = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'scrollBoxWidth', {\n                get: function () {\n                    return scrollBoxWidth;\n                },\n                set: function (value) {\n                    scrollBoxWidth = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'height', {\n                get: function () {\n                    return sHeight;\n                },\n                set: function (value) {\n                    sHeight = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'width', {\n                get: function () {\n                    return sWidth;\n                },\n                set: function (value) {\n                    sWidth = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'scrollTop', {\n                get: function () {\n                    return scrollTop;\n                },\n                set: setScrollTop\n            });\n            Object.defineProperty(self.scrollBox, 'scrollLeft', {\n                get: function () {\n                    return scrollLeft;\n                },\n                set: setScrollLeft\n            });\n            Object.defineProperty(self.scrollBox, 'scrollHeight', {\n                get: function () {\n                    return scrollHeight;\n                },\n                set: function (value) {\n                    if (scrollTop > value) {\n                        scrollTop = Math.max(value, 0);\n                    }\n                    scrollHeight = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'scrollWidth', {\n                get: function () {\n                    return scrollWidth;\n                },\n                set: function (value) {\n                    if (scrollLeft > value) {\n                        scrollLeft = Math.max(value, 0);\n                    }\n                    scrollWidth = value;\n                }\n            });\n        };\n        return;\n    };\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }),\n/* 7 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false, Event: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function () {\n    'use strict';\n    return function (self) {\n        var zIndexTop, hoverScrollTimeout, autoCompleteContext;\n        function applyContextItemStyle(contextItemContainer) {\n            self.createInlineStyle(contextItemContainer, 'canvas-datagrid-context-menu-item' + (self.mobile ? '-mobile' : ''));\n            contextItemContainer.addEventListener('mouseover', function () {\n                self.createInlineStyle(contextItemContainer, 'canvas-datagrid-context-menu-item:hover');\n            });\n            contextItemContainer.addEventListener('mouseout', function () {\n                self.createInlineStyle(contextItemContainer, 'canvas-datagrid-context-menu-item');\n            });\n        }\n        function createContextMenu(ev, pos, items, parentContextMenu) {\n            var container = document.createElement('div'),\n                upArrow = document.createElement('div'),\n                downArrow = document.createElement('div'),\n                children = [],\n                selectedIndex = -1,\n                intf = {},\n                rect;\n            if (!Array.isArray(items)) { throw new Error('createContextMenu expects an array.'); }\n            function createItems() {\n                items.forEach(function (item) {\n                    var contextItemContainer = document.createElement('div'),\n                        childMenuArrow;\n                    function removeChildContext(e) {\n                        if (e.relatedTarget === container\n                                || item.contextMenu.container === e.relatedTarget\n                                || childMenuArrow === e.relatedTarget\n                                || (contextItemContainer === e.relatedTarget)\n                                || item.contextMenu.container.contains(e.relatedTarget)\n                                ) { return; }\n                        item.contextMenu.dispose();\n                        children.splice(children.indexOf(item.contextMenu), 1);\n                        item.contextMenu = undefined;\n                        contextItemContainer.removeEventListener('mouseout', removeChildContext);\n                        container.removeEventListener('mouseout', removeChildContext);\n                        contextItemContainer.setAttribute('contextOpen', '0');\n                        contextItemContainer.setAttribute('opening', '0');\n                    }\n                    function contextAddCallback(items) {\n                        // check yet again if the user hasn't moved off\n                        if (contextItemContainer.getAttribute('opening') !== '1' ||\n                                contextItemContainer.getAttribute('contextOpen') === '1') {\n                            return;\n                        }\n                        var cPos = contextItemContainer.getBoundingClientRect();\n                        cPos = {\n                            left: cPos.left + self.style.childContextMenuMarginLeft + container.offsetWidth,\n                            top: cPos.top + self.style.childContextMenuMarginTop,\n                            bottom: cPos.bottom,\n                            right: cPos.right\n                        };\n                        item.contextMenu = createContextMenu(ev, cPos, items, intf);\n                        contextItemContainer.setAttribute('contextOpen', '1');\n                        contextItemContainer.addEventListener('mouseout', removeChildContext);\n                        container.addEventListener('mouseout', removeChildContext);\n                        children.push(item.contextMenu);\n                    }\n                    function createChildContext() {\n                        var i;\n                        if (contextItemContainer.getAttribute('contextOpen') === '1') {\n                            return;\n                        }\n                        contextItemContainer.setAttribute('opening', '1');\n                        if (typeof item.items === 'function') {\n                            i  = item.items.apply(intf, [function (items) {\n                                contextAddCallback(items);\n                            }]);\n                            if (i !== undefined && Array.isArray(i)) {\n                                contextAddCallback(i);\n                            }\n                            return;\n                        }\n                        contextAddCallback(item.items);\n                    }\n                    function addItem(item) {\n                        function addContent(content) {\n                            if (content === null) { return; }\n                            if (typeof content === 'function') {\n                                return addContent(content(ev));\n                            }\n                            if (typeof content === 'object') {\n                                contextItemContainer.appendChild(content);\n                                return;\n                            }\n                            applyContextItemStyle(contextItemContainer);\n                            contextItemContainer.innerHTML = content;\n                            return;\n                        }\n                        addContent(item.title);\n                        item.contextItemContainer = contextItemContainer;\n                        if ((item.items && item.items.length > 0) || typeof item.items === 'function') {\n                            childMenuArrow = document.createElement('div');\n                            self.createInlineStyle(childMenuArrow, 'canvas-datagrid-context-child-arrow');\n                            childMenuArrow.innerHTML = self.style.childContextMenuArrowHTML;\n                            contextItemContainer.appendChild(childMenuArrow);\n                            contextItemContainer.addEventListener('mouseover', createChildContext);\n                            contextItemContainer.addEventListener('mouseout', function () {\n                                contextItemContainer.setAttribute('opening', '0');\n                            });\n                        }\n                        if (item.click) {\n                            contextItemContainer.addEventListener('click', function (ev) {\n                                item.click.apply(self, [ev]);\n                            });\n                        }\n                    }\n                    addItem(item);\n                    container.appendChild(contextItemContainer);\n                });\n            }\n            function clickIndex(idx) {\n                items[idx].contextItemContainer.dispatchEvent(new Event('click'));\n            }\n            function checkArrowVisibility() {\n                if (container.scrollTop > 0) {\n                    self.parentDOMNode.appendChild(upArrow);\n                } else if (upArrow.parentNode) {\n                    upArrow.parentNode.removeChild(upArrow);\n                }\n                if (container.scrollTop >= container.scrollHeight - container.offsetHeight && downArrow.parentNode) {\n                    downArrow.parentNode.removeChild(downArrow);\n                } else if (container.scrollHeight - container.offsetHeight > 0\n                        && !(container.scrollTop >= container.scrollHeight - container.offsetHeight)) {\n                    self.parentDOMNode.appendChild(downArrow);\n                }\n            }\n            function startHoverScroll(type) {\n                return function t() {\n                    var a = self.attributes.contextHoverScrollAmount;\n                    if (type === 'up' && container.scrollTop === 0) { return; }\n                    if (type === 'down' && container.scrollTop === container.scrollHeight) { return; }\n                    container.scrollTop += (type === 'up' ? -a : a);\n                    hoverScrollTimeout = setTimeout(t, self.attributes.contextHoverScrollRateMs, type);\n                };\n            }\n            function endHoverScroll(type) {\n                return function () {\n                    clearTimeout(hoverScrollTimeout);\n                };\n            }\n            function init() {\n                var loc = {},\n                    s = self.scrollOffset(self.canvas);\n                if (zIndexTop === undefined) {\n                    zIndexTop = self.style.contextMenuZIndex;\n                }\n                createItems();\n                self.createInlineStyle(container, 'canvas-datagrid-context-menu' + (self.mobile ? '-mobile' : ''));\n                loc.x = pos.left - s.left;\n                loc.y = pos.top - s.top;\n                loc.height = 0;\n                zIndexTop += 1;\n                container.style.position = 'absolute';\n                upArrow.style.color = self.style.contextMenuArrowColor;\n                downArrow.style.color = self.style.contextMenuArrowColor;\n                [upArrow, downArrow].forEach(function (el) {\n                    el.style.textAlign = 'center';\n                    el.style.position = 'absolute';\n                    el.style.zIndex = zIndexTop + 1;\n                });\n                container.style.zIndex = zIndexTop;\n                if (parentContextMenu && parentContextMenu.inputDropdown) {\n                    container.style.maxHeight = window.innerHeight - loc.y - self.style.autocompleteBottomMargin + 'px';\n                    container.style.minWidth = pos.width + 'px';\n                    loc.y += pos.height;\n                }\n                if (self.mobile) {\n                    container.style.width = pos.width + 'px';\n                }\n                container.style.left = loc.x + 'px';\n                container.style.top = loc.y + 'px';\n                container.addEventListener('scroll', checkArrowVisibility);\n                container.addEventListener('wheel', function (e) {\n                    if (self.hasFocus) {\n                        container.scrollTop += e.deltaY;\n                        container.scrollLeft += e.deltaX;\n                    }\n                    checkArrowVisibility();\n                });\n                upArrow.innerHTML = self.style.contextMenuArrowUpHTML;\n                downArrow.innerHTML = self.style.contextMenuArrowDownHTML;\n                container.appendChild(upArrow);\n                document.body.appendChild(downArrow);\n                document.body.appendChild(container);\n                rect = container.getBoundingClientRect();\n                // TODO: fix !(parentContextMenu && parentContextMenu.inputDropdown) state (autocomplete)\n                if (rect.bottom > window.innerHeight) {\n                    if (!(parentContextMenu && parentContextMenu.inputDropdown)) {\n                        loc.y -= (rect.bottom + self.style.contextMenuWindowMargin) - window.innerHeight;\n                    }\n                    if (loc.y < 0) { loc.y = self.style.contextMenuWindowMargin; }\n                    if (container.offsetHeight > window.innerHeight - self.style.contextMenuWindowMargin) {\n                        container.style.height = window.innerHeight - (self.style.contextMenuWindowMargin * 2) + 'px';\n                    }\n                }\n                if (rect.right > window.innerWidth) {\n                    loc.x -= rect.right - window.innerWidth + self.style.contextMenuWindowMargin;\n                }\n                if (loc.x < 0) { loc.x = self.style.contextMenuWindowMargin; }\n                if (loc.y < 0) { loc.y = self.style.contextMenuWindowMargin; }\n                container.style.left = loc.x + 'px';\n                container.style.top = loc.y + 'px';\n                rect = container.getBoundingClientRect();\n                upArrow.style.top = rect.top + 'px';\n                downArrow.style.top = rect.top + rect.height - downArrow.offsetHeight + 'px';\n                upArrow.style.left = rect.left + 'px';\n                downArrow.style.left = rect.left + 'px';\n                downArrow.style.width = container.offsetWidth + 'px';\n                upArrow.style.width = container.offsetWidth + 'px';\n                downArrow.addEventListener('mouseover', startHoverScroll('down'));\n                downArrow.addEventListener('mouseout', endHoverScroll('down'));\n                upArrow.addEventListener('mouseover', startHoverScroll('up'));\n                upArrow.addEventListener('mouseout', endHoverScroll('up'));\n                checkArrowVisibility();\n            }\n            intf.parentGrid = self.intf;\n            intf.parentContextMenu = parentContextMenu;\n            intf.container = container;\n            init();\n            intf.clickIndex = clickIndex;\n            intf.rect = rect;\n            intf.items = items;\n            intf.upArrow = upArrow;\n            intf.downArrow = downArrow;\n            intf.dispose = function () {\n                clearTimeout(hoverScrollTimeout);\n                children.forEach(function (c) {\n                    c.dispose();\n                });\n                [downArrow, upArrow, container].forEach(function (el) {\n                    if (el.parentNode) { el.parentNode.removeChild(el); }\n                });\n            };\n            Object.defineProperty(intf, 'selectedIndex', {\n                get: function () {\n                    return selectedIndex;\n                },\n                set: function (value) {\n                    if (typeof value !== 'number' || isNaN(value || !isFinite(value))) {\n                        throw new Error('Context menu selected index must be a sane number.');\n                    }\n                    selectedIndex = value;\n                    if (selectedIndex > items.length - 1) {\n                        selectedIndex = items.length - 1;\n                    }\n                    if (selectedIndex < 0) {\n                        selectedIndex = 0;\n                    }\n                    items.forEach(function (item, index) {\n                        if (index === selectedIndex) {\n                            return self.createInlineStyle(item.contextItemContainer, 'canvas-datagrid-context-menu-item:hover');\n                        }\n                        self.createInlineStyle(item.contextItemContainer, 'canvas-datagrid-context-menu-item');\n                    });\n                }\n            });\n            return intf;\n        }\n        function createFilterContextMenuItems(e) {\n            var filterContainer = document.createElement('div'),\n                filterLabel = document.createElement('div'),\n                filterAutoCompleteButton = document.createElement('button'),\n                filterInput = document.createElement('input'),\n                n = e.cell && e.cell.header ? e.cell.header.title || e.cell.header.name : '',\n                autoCompleteItems,\n                iRect;\n            function checkRegExpErrorState() {\n                filterInput.style.background = self.style.contextFilterInputBackground;\n                filterInput.style.color = self.style.contextFilterInputColor;\n                if (self.invalidFilterRegEx) {\n                    filterInput.style.background = self.style.contextFilterInvalidRegExpBackground;\n                    filterInput.style.color = self.style.contextFilterInvalidRegExpColor;\n                }\n            }\n            function fillAutoComplete() {\n                var count = 0;\n                autoCompleteItems = {};\n                self.data.forEach(function (row) {\n                    var value = row[e.cell.header.name];\n                    if (autoCompleteItems[value] || count > self.attributes.maxAutoCompleteItems) { return; }\n                    count += 1;\n                    autoCompleteItems[value] = {\n                        title: self.formatters[e.cell.header.type || 'string']({ cell: { value: value }}),\n                        click: function (e) {\n                            filterInput.value = value;\n                            e.stopPropagation();\n                            filterInput.dispatchEvent(new Event('keyup'));\n                            self.disposeAutocomplete();\n                            return;\n                        }\n                    };\n                });\n                autoCompleteItems = Object.keys(autoCompleteItems).map(function (key) {\n                    return autoCompleteItems[key];\n                });\n            }\n            function createAutoCompleteContext(ev) {\n                if (ev && [40, 38, 13, 9].indexOf(ev.keyCode) !== -1) { return; }\n                fillAutoComplete();\n                iRect = filterInput.getBoundingClientRect();\n                if (autoCompleteContext) {\n                    autoCompleteContext.dispose();\n                    autoCompleteContext = undefined;\n                }\n                autoCompleteContext = createContextMenu(e, {\n                    left: iRect.left,\n                    top: iRect.top,\n                    right: iRect.right,\n                    bottom: iRect.bottom,\n                    height: iRect.height,\n                    width: iRect.width\n                }, autoCompleteItems, {inputDropdown: true});\n                autoCompleteContext.selectedIndex = 0;\n            }\n            self.createInlineStyle(filterLabel, 'canvas-datagrid-context-menu-label');\n            self.createInlineStyle(filterAutoCompleteButton, 'canvas-datagrid-context-menu-filter-button');\n            self.createInlineStyle(filterInput, 'canvas-datagrid-context-menu-filter-input');\n            checkRegExpErrorState();\n            filterInput.onclick = self.disposeAutocomplete;\n            filterInput.addEventListener('keydown', function (e) {\n                //down\n                if (e.keyCode === 40) {\n                    autoCompleteContext.selectedIndex += 1;\n                }\n                //up\n                if (e.keyCode === 38) {\n                    autoCompleteContext.selectedIndex -= 1;\n                }\n                //enter\n                if (e.keyCode === 13) {\n                    autoCompleteContext.clickIndex(autoCompleteContext.selectedIndex);\n                    self.disposeContextMenu();\n                }\n                //tab\n                if (e.keyCode === 9) {\n                    autoCompleteContext.clickIndex(autoCompleteContext.selectedIndex);\n                    e.preventDefault();\n                }\n                //esc\n                if (e.keyCode === 27) {\n                    self.disposeContextMenu();\n                }\n            });\n            filterInput.addEventListener('keyup', function () {\n                self.setFilter(e.cell.header.name, filterInput.value);\n            });\n            filterInput.addEventListener('keyup', createAutoCompleteContext);\n            ['focus', 'blur', 'keydown', 'keyup', 'change'].forEach(function (en) {\n                filterInput.addEventListener(en, checkRegExpErrorState);\n            });\n            filterInput.value = e.cell.header ? self.columnFilters[e.cell.header.name] || '' : '';\n            filterLabel.innerHTML = self.attributes.filterOptionText.replace(/%s/g, n);\n            filterAutoCompleteButton.onclick = function () {\n                if (autoCompleteContext) {\n                    return self.disposeAutocomplete();\n                }\n                createAutoCompleteContext();\n            };\n            filterAutoCompleteButton.innerHTML = self.style.contextFilterButtonHTML;\n            filterContainer.addEventListener('click', function (e) {\n                return e.stopPropagation();\n            });\n            filterContainer.appendChild(filterLabel);\n            filterContainer.appendChild(filterInput);\n            filterContainer.appendChild(filterAutoCompleteButton);\n            e.items.push({\n                title: filterContainer\n            });\n            if (Object.keys(self.columnFilters).length) {\n                Object.keys(self.columnFilters).forEach(function (cf) {\n                    var h = self.getHeaderByName(cf);\n                    e.items.push({\n                        title: self.attributes.removeFilterOptionText.replace(/%s/g, h.title || h.name),\n                        click: function removeFilterClick(e) {\n                            e.preventDefault();\n                            self.setFilter(cf, '');\n                            self.controlInput.focus();\n                        }\n                    });\n                });\n            }\n        }\n        function addDefaultContextMenuItem(e) {\n            var isNormalCell = !(e.cell.isBackground || e.cell.isColumnHeaderCellCap\n                    || e.cell.isScrollBar || e.cell.isCorner || e.cell.isRowHeader)\n                    && e.cell.header;\n            if (self.attributes.showFilter && isNormalCell) {\n                createFilterContextMenuItems(e);\n            }\n            if (self.attributes.showCopy\n                    && self.selections.reduce(function (p, r) {\n                        return p + r.length;\n                    }, 0) > 0) {\n                e.items.push({\n                    title: self.attributes.copyText,\n                    click: function () {\n                        document.execCommand('copy');\n                        self.disposeContextMenu();\n                        self.controlInput.focus();\n                    }\n                });\n            }\n            if (self.attributes.showPaste && self.clipBoardData) {\n                e.items.push({\n                    title: self.attributes.pasteText,\n                    click: function () {\n                        self.paste(self.clipBoardData, e.cell.columnIndex, e.cell.rowIndex);\n                        self.draw();\n                    }\n                });\n            }\n            if (self.attributes.showColumnSelector) {\n                e.items.push({\n                    title: self.attributes.columnSelectorText,\n                    items: function () {\n                        var d = [];\n                        self.getSchema().forEach(function (column) {\n                            function toggleColumnVisibility(e) {\n                                column.hidden = !column.hidden;\n                                self.dispatchEvent('togglecolumn', {column: column, hidden: column.hidden});\n                                e.preventDefault();\n                                self.stopPropagation(e);\n                                self.disposeContextMenu();\n                                self.resize(true);\n                                self.setStorageData();\n                            }\n                            var el = document.createElement('div');\n                            applyContextItemStyle(el);\n                            el.addEventListener('touchstart', toggleColumnVisibility);\n                            el.addEventListener('click', toggleColumnVisibility);\n                            el.innerHTML = (column.hidden ? self.attributes.columnSelectorHiddenText\n                                    : self.attributes.columnSelectorVisibleText)\n                                    + (column.title || column.name);\n                            d.push({\n                                title: el\n                            });\n                        });\n                        return d;\n                    }\n                });\n                if (e.cell && e.cell.header && e.cell.columnIndex > -1) {\n                    e.items.push({\n                        title: self.attributes.hideColumnText\n                            .replace(/%s/ig, e.cell.header.title || e.cell.header.name),\n                        click: function (ev) {\n                            self.getSchema()[e.cell.columnIndex].hidden = true;\n                            ev.preventDefault();\n                            self.stopPropagation(ev);\n                            self.disposeContextMenu();\n                            self.setStorageData();\n                            setTimeout(function () { self.resize(true); }, 10);\n                        }\n                    });\n                }\n            }\n            if (self.attributes.saveAppearance && self.attributes.showClearSettingsOption\n                    && (Object.keys(self.sizes.rows).length > 0\n                        || Object.keys(self.sizes.columns).length > 0)) {\n                e.items.push({\n                    title: self.attributes.clearSettingsOptionText,\n                    click: function (e) {\n                        e.preventDefault();\n                        self.sizes.rows = {};\n                        self.sizes.columns = {};\n                        self.createRowOrders();\n                        self.createColumnOrders();\n                        self.storedSettings = undefined;\n                        self.dispatchEvent('resizecolumn', {columnWidth: self.style.cellWidth});\n                        self.dispatchEvent('resizerow', {cellHeight: self.style.cellHeight});\n                        self.setStorageData();\n                        self.resize(true);\n                        self.disposeContextMenu();\n                        self.controlInput.focus();\n                    }\n                });\n            }\n            if (self.attributes.allowSorting && self.attributes.showOrderByOption && isNormalCell) {\n                e.items.push({\n                    title: self.attributes.showOrderByOptionTextAsc.replace('%s', e.cell.header.title || e.cell.header.name),\n                    click: function (ev) {\n                        ev.preventDefault();\n                        self.order(e.cell.header.name, 'asc');\n                        self.controlInput.focus();\n                    }\n                });\n                e.items.push({\n                    title: self.attributes.showOrderByOptionTextDesc.replace('%s', e.cell.header.title || e.cell.header.name),\n                    click: function (ev) {\n                        ev.preventDefault();\n                        self.order(e.cell.header.name, 'desc');\n                        self.disposeContextMenu();\n                        self.controlInput.focus();\n                    }\n                });\n            }\n        }\n        self.disposeAutocomplete = function () {\n            if (autoCompleteContext) {\n                autoCompleteContext.dispose();\n                autoCompleteContext = undefined;\n            }\n        };\n        self.disposeContextMenu = function () {\n            document.removeEventListener('click', self.disposeContextMenu);\n            zIndexTop = self.style.contextMenuZIndex;\n            self.disposeAutocomplete();\n            if (self.contextMenu) {\n                self.contextMenu.dispose();\n            }\n            self.contextMenu = undefined;\n        };\n        self.contextmenuEvent = function (e, overridePos) {\n            if (!self.hasFocus && e.target !== self.canvas) {\n                return;\n            }\n            function createDiposeEvent() {\n                requestAnimationFrame(function () {\n                    document.addEventListener('click', self.disposeContextMenu);\n                    document.removeEventListener('mouseup', createDiposeEvent);\n                });\n            }\n            var contextPosition,\n                items = [],\n                pos = overridePos || self.getLayerPos(e),\n                ev = {\n                    NativeEvent: e,\n                    cell: self.getCellAt(pos.x, pos.y),\n                    items: items\n                };\n            if (!ev.cell.isGrid) {\n                addDefaultContextMenuItem(ev);\n            }\n            if (self.dispatchEvent('contextmenu', ev)) {\n                return;\n            }\n            if (!ev.cell.isGrid) {\n                if (self.contextMenu) {\n                    self.disposeContextMenu();\n                }\n                contextPosition = {\n                    left: pos.x + pos.rect.left\n                        + self.style.contextMenuMarginLeft + self.canvasOffsetLeft,\n                    top: pos.y + pos.rect.top\n                        + self.style.contextMenuMarginTop + self.canvasOffsetTop,\n                    right: ev.cell.width + ev.cell.x + pos.rect.left,\n                    bottom: ev.cell.height + ev.cell.y + pos.rect.top,\n                    height: ev.cell.height,\n                    width: ev.cell.width\n                };\n                if (self.mobile) {\n                    contextPosition.left = self.style.mobileContextMenuMargin + 'px';\n                    contextPosition.width = self.width - (self.style.mobileContextMenuMargin * 2) + 'px';\n                }\n                self.contextMenu = createContextMenu(ev, contextPosition, items);\n                document.addEventListener('mouseup', createDiposeEvent);\n                e.preventDefault();\n            }\n        };\n        return;\n    };\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }),\n/* 8 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function () {\n    'use strict';\n    return function (self) {\n        self.getClippingRect = function (ele) {\n            var boundingRect = self.position(self.parentNode),\n                eleRect = self.position(ele),\n                s = self.scrollOffset(self.canvas),\n                clipRect = {\n                    x: 0,\n                    y: 0,\n                    h: 0,\n                    w: 0\n                },\n                parentRect = {\n                    x: -Infinity,\n                    y: -Infinity,\n                    h: Infinity,\n                    w: Infinity\n                },\n                columnHeaderCellHeight = self.getColumnHeaderCellHeight(),\n                rowHeaderCellWidth = self.getRowHeaderCellWidth();\n            boundingRect.top -= s.top;\n            boundingRect.left -= s.left;\n            eleRect.top -= s.top;\n            eleRect.left -= s.left;\n            clipRect.h = boundingRect.top + boundingRect.height - ele.offsetTop - self.style.scrollBarWidth;\n            clipRect.w = boundingRect.left + boundingRect.width - ele.offsetLeft - self.style.scrollBarWidth;\n            clipRect.x = boundingRect.left + (eleRect.left * -1) + rowHeaderCellWidth;\n            clipRect.y = boundingRect.top + (eleRect.top * -1) + columnHeaderCellHeight;\n            return {\n                x: clipRect.x > parentRect.x ? clipRect.x : parentRect.x,\n                y: clipRect.y > parentRect.y ? clipRect.y : parentRect.y,\n                h: clipRect.h < parentRect.h ? clipRect.h : parentRect.h,\n                w: clipRect.w < parentRect.w ? clipRect.w : parentRect.w\n            };\n        };\n        self.clipElement = function (ele) {\n            var clipRect = self.getClippingRect(ele);\n            if (clipRect.w < 0) { clipRect.w = 0; }\n            if (clipRect.h < 0) { clipRect.h = 0; }\n            ele.style.clip = 'rect('\n                + clipRect.y + 'px,'\n                + clipRect.w + 'px,'\n                + clipRect.h + 'px,'\n                + clipRect.x + 'px'\n                + ')';\n            // INFO https://developer.mozilla.org/en-US/docs/Web/CSS/clip\n            // clip has been \"deprecated\" for clipPath.  Of course nothing but chrome\n            // supports clip path, so we'll keep using clip until someday clipPath becomes\n            // more widely support.  The code below works correctly, but setting clipPath and clip\n            // at the same time has undesirable results.\n            // ele.style.clipPath = 'polygon('\n            //     + clipRect.x + 'px ' + clipRect.y + 'px,'\n            //     + clipRect.x + 'px ' + clipRect.h + 'px,'\n            //     + clipRect.w + 'px ' + clipRect.h + 'px,'\n            //     + clipRect.w + 'px ' + clipRect.y + 'px'\n            //     + ')';\n        };\n        self.scrollOffset = function (e) {\n            var x = 0, y = 0, scrollingElement = document.scrollingElement || { scrollLeft: 0, scrollTop: 0 };\n            while (e.parentNode && e.nodeName !== 'CANVAS-DATAGRID' && e !== self.intf) {\n                if (e.nodeType !== 'canvas-datagrid-tree'\n                        && e.nodeType !== 'canvas-datagrid-cell') {\n                    x -= e.scrollLeft;\n                    y -= e.scrollTop;\n                }\n                e = e.parentNode;\n            }\n            return {\n                left: x - scrollingElement.scrollLeft,\n                top: y - scrollingElement.scrollTop\n            };\n        };\n        self.resizeEditInput = function () {\n            if (self.input && self.input.editCell) {\n                var pos = self.canvas.getBoundingClientRect(),\n                    s = self.scrollOffset(self.intf),\n                    bm = self.style.gridBorderCollapse === 'collapse' ? 1 : 2,\n                    borderWidth = (self.style.cellBorderWidth * bm),\n                    cell = self.getVisibleCellByIndex(self.input.editCell.columnIndex, self.input.editCell.rowIndex)\n                        || {x: -100, y: -100, height: 0, width: 0};\n                if (self.mobile) {\n                    self.input.style.left = '0';\n                    self.input.style.top = (self.height - self.style.mobileEditInputHeight) - borderWidth - 1 + 'px';\n                    self.input.style.height = self.style.mobileEditInputHeight + 'px';\n                    self.input.style.width = self.width - borderWidth - 1 + 'px';\n                    return;\n                }\n                self.input.style.left = pos.left + cell.x + self.canvasOffsetLeft - s.left + 'px';\n                self.input.style.top = pos.top + cell.y - self.style.cellBorderWidth + self.canvasOffsetTop - s.top + 'px';\n                self.input.style.height = cell.height - borderWidth + 'px';\n                self.input.style.width = cell.width - self.style.cellPaddingLeft + 'px';\n                self.clipElement(self.input);\n            }\n        };\n        self.position = function (e, ignoreScrollOffset) {\n            var x = 0, y = 0, s = e, h, w;\n            while (e.offsetParent && e.nodeName !== 'CANVAS-DATAGRID') {\n                x += e.offsetLeft;\n                y += e.offsetTop;\n                h = e.offsetHeight;\n                w = e.offsetWidth;\n                e = e.offsetParent;\n            }\n            if (ignoreScrollOffset) {\n                return {left: x, top: y, height: h, width: w};\n            }\n            e = s;\n            s = self.scrollOffset(e);\n            return { left: x + s.left, top: y + s.top, height: h, width: w };\n        };\n        self.getLayerPos = function (e) {\n            var rect = self.canvas.getBoundingClientRect(),\n                pos = {\n                    x: e.clientX - rect.left,\n                    y: e.clientY - rect.top\n                };\n            if (self.isChildGrid) {\n                pos.x -= self.canvasOffsetLeft;\n                pos.y -= self.canvasOffsetTop;\n            }\n            return {\n                x: pos.x,\n                y: pos.y,\n                rect: rect\n            };\n        };\n        /**\n         * Ends editing, optionally aborting the edit.\n         * @memberof canvasDatagrid\n         * @name endEdit\n         * @method\n         * @param {boolean} abort When true, abort the edit.\n         */\n        self.endEdit = function (abort) {\n            var cell = self.input.editCell,\n                y = cell.rowIndex;\n            function abortEdit() {\n                abort = true;\n            }\n            if (self.dispatchEvent('beforeendedit', {\n                    cell: cell,\n                    newValue: self.input.value,\n                    oldValue: cell.value,\n                    abort: abortEdit,\n                    input: self.input\n                })) { return false; }\n            if (self.input.value !== cell.value && !abort) {\n                self.changes[y] = self.changes[y] || {};\n                self.changes[y][cell.header.name] = self.input.value;\n                if (!cell.data) {\n                    self.data[cell.rowIndex] = {};\n                    cell.data = self.data[cell.rowIndex];\n                }\n                cell.data[cell.header.name] = self.input.value;\n                if (y === self.data.length) {\n                    if (self.dispatchEvent('newrow', {\n                            value: self.input.value,\n                            defaultValue: cell.value,\n                            aborted: abort,\n                            cell: cell,\n                            input: self.input\n                        })) { return false; }\n                    self.addRow(cell.data);\n                    self.createNewRowData();\n                }\n                self.draw(true);\n            }\n            if (self.input.parentNode) {\n                self.input.parentNode.removeChild(self.input);\n            }\n            self.intf.focus();\n            self.dispatchEvent('endedit', {\n                cell: cell,\n                value: self.input.value,\n                aborted: abort,\n                input: self.input\n            });\n            self.input = undefined;\n            return true;\n        };\n        /**\n         * Begins editing at cell x, row y.\n         * @memberof canvasDatagrid\n         * @name beginEditAt\n         * @method\n         * @param {number} x The column index of the cell to edit.\n         * @param {number} y The row index of the cell to edit.\n         */\n        self.beginEditAt = function (x, y, NativeEvent) {\n            if (!self.attributes.editable) { return; }\n            if (self.input) {\n                self.endEdit();\n            }\n            var cell = self.getVisibleCellByIndex(x, y),\n                s = self.getSchema(),\n                adjacentCells,\n                enumItems,\n                enu,\n                option,\n                valueInEnum;\n            if (!(cell && cell.header)) { return; }\n            //HACK for IE10, does not like literal enum\n            enu = cell.header['enum'];\n            if (self.dispatchEvent('beforebeginedit', {cell: cell, NativeEvent: NativeEvent})) { return false; }\n            self.scrollIntoView(x, y);\n            self.setActiveCell(x, y);\n            adjacentCells = self.getAdjacentCells();\n            if (enu) {\n                self.input = document.createElement('select');\n            } else {\n                self.input = document.createElement(self.attributes.multiLine\n                    ? 'textarea' : 'input');\n            }\n            cell = self.getVisibleCellByIndex(x, y);\n            //HACK on mobile devices sometimes edit can begin without the cell being in view, I don't know how.\n            if (!cell) { return; }\n            if (enu) {\n                // add enums\n                if (typeof enu === 'function') {\n                    enumItems = enu.apply(self.intf, [{cell: cell}]);\n                } else if (Array.isArray(enu)) {\n                    enumItems = enu;\n                }\n                enumItems.forEach(function (e) {\n                    var i = document.createElement('option'),\n                        val,\n                        title;\n                    if (Array.isArray(e)) {\n                        val = e[0];\n                        title = e[1];\n                    } else {\n                        val = e;\n                        title = e;\n                    }\n                    if (val === cell.value) { valueInEnum = true; }\n                    i.value = val;\n                    i.innerHTML = title;\n                    self.input.appendChild(i);\n                });\n                if (!valueInEnum) {\n                    option = document.createElement('option');\n                    option.value = cell.value;\n                    option.innerHTML = cell.value;\n                    self.input.appendChild(option);\n                }\n                self.input.addEventListener('change', function () {\n                    self.endEdit();\n                    self.draw(true);\n                });\n            }\n            // if the user has not prevented the default action, append to the body\n            if (!self.dispatchEvent('appendeditinput', {cell: cell, input:self.input})) { \n                document.body.appendChild(self.input);\n            }\n            self.createInlineStyle(self.input, self.mobile ? 'canvas-datagrid-edit-mobile-input' : 'canvas-datagrid-edit-input');\n            self.input.style.position = 'absolute';\n            self.input.editCell = cell;\n            self.resizeEditInput();\n            self.input.style.zIndex = self.style.editCellZIndex;\n            self.input.style.fontSize = (parseInt(self.style.editCellFontSize, 10) * self.scale) + 'px';\n            self.input.value = [null, undefined].indexOf(cell.value) !== -1 ? '' : cell.value;\n            self.input.focus();\n            self.input.addEventListener('click', self.stopPropagation);\n            self.input.addEventListener('dblclick', self.stopPropagation);\n            self.input.addEventListener('mouseup', self.stopPropagation);\n            self.input.addEventListener('mousedown', self.stopPropagation);\n            self.input.addEventListener('keydown', function (e) {\n                var nx = cell.columnIndex,\n                    ny = cell.rowIndex;\n                // esc\n                if (e.keyCode === 27) {\n                    self.endEdit(true);\n                    self.draw(true);\n                // enter\n                } else if (e.keyCode === 13\n                        && (!self.attributes.multiLine\n                            || (self.attributes.multiLine && e.shiftKey))) {\n                    self.endEdit();\n                    self.draw(true);\n                } else if (e.keyCode === 9) {\n                    e.preventDefault();\n                    if (!self.endEdit()) {\n                        return;\n                    }\n                    if (e.shiftKey) {\n                        nx = adjacentCells.left;\n                    } else {\n                        nx = adjacentCells.right;\n                    }\n                    if (adjacentCells.left === x && e.shiftKey) {\n                        nx = adjacentCells.last;\n                        ny -= 1;\n                    }\n                    if (adjacentCells.right === x && !e.shiftKey) {\n                        nx = adjacentCells.first;\n                        ny += 1;\n                    }\n                    if (ny < 0) {\n                        ny = self.data.length - 1;\n                    }\n                    if (ny > self.data.length - 1) {\n                        ny = 0;\n                    }\n                    self.scrollIntoView(nx, ny);\n                    self.beginEditAt(nx, ny, e);\n                }\n            });\n            self.dispatchEvent('beginedit', {cell: cell, input: self.input});\n        };\n        self.createInlineStyle = function (el, className) {\n            var css = {\n                'canvas-datagrid-context-menu-filter-input': {\n                    height: '19px',\n                    verticalAlign: 'bottom',\n                    marginLeft: '2px',\n                    padding: '0',\n                    background: self.style.contextFilterInputBackground,\n                    color: self.style.contextFilterInputColor,\n                    border: self.style.contextFilterInputBorder,\n                    borderRadius: self.style.contextFilterInputBorderRadius,\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextFilterInputFontFamily,\n                    fontSize: self.style.contextFilterInputFontSize\n                },\n                'canvas-datagrid-context-menu-filter-button': {\n                    height: '19px',\n                    verticalAlign: 'bottom',\n                    marginLeft: '2px',\n                    padding: '0',\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor,\n                    border: self.style.contextFilterButtonBorder,\n                    borderRadius: self.style.contextFilterButtonBorderRadius,\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFilterButtonFontFamily,\n                    fontSize: self.style.contextMenuFilterButtonFontSize\n                },\n                'canvas-datagrid-context-child-arrow': {\n                    cssFloat: 'right',\n                    color: self.style.childContextMenuArrowColor,\n                    fontSize: self.style.contextMenuChildArrowFontSize,\n                    fontFamily: self.style.contextMenuFontFamily,\n                    verticalAlign: 'middle'\n                },\n                'canvas-datagrid-autocomplete': {\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor,\n                    border: self.style.contextMenuBorder,\n                    padding: self.style.contextMenuPadding,\n                    borderRadius: self.style.contextMenuBorderRadius,\n                    opacity: self.style.contextMenuOpacity,\n                    position: 'absolute',\n                    zIndex: 9999,\n                    overflow: 'hidden'\n                },\n                'canvas-datagrid-autocomplete-item': {\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor\n                },\n                'canvas-datagrid-autocomplete-item:hover': {\n                    background: self.style.contextMenuHoverBackground,\n                    color: self.style.contextMenuHoverColor\n                },\n                'canvas-datagrid-canvas': {\n                    position: 'absolute',\n                    zIndex: '-1'\n                },\n                'canvas-datagrid': {\n                    display: 'block'\n                },\n                'canvas-datagrid-control-input': {\n                    position: 'fixed',\n                    top: '-5px',\n                    left: '-5px',\n                    border: 'none',\n                    opacity: '0',\n                    cursor: 'pointer',\n                    width: '1px',\n                    height: '1px',\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize\n                },\n                'canvas-datagrid-edit-mobile-input': {\n                    boxSizing: 'content-box',\n                    outline: 'none',\n                    margin: '0',\n                    padding: '0 0 0 0',\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.mobileEditFontFamily,\n                    fontSize: self.style.mobileEditFontSize,\n                    border: self.style.editCellBorder,\n                    color: self.style.editCellColor,\n                    background: self.style.editCellBackgroundColor,\n                    appearance: 'none',\n                    webkitAppearance: 'none',\n                    mozAppearance: 'none',\n                    borderRadius: '0'\n                },\n                'canvas-datagrid-edit-input': {\n                    boxSizing: 'content-box',\n                    outline: 'none',\n                    margin: '0',\n                    padding: '0 0 0 ' + self.style.editCellPaddingLeft + 'px',\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.editCellFontFamily,\n                    fontSize: self.style.editCellFontSize,\n                    boxShadow: self.style.editCellBoxShadow,\n                    border: self.style.editCellBorder,\n                    color: self.style.editCellColor,\n                    background: self.style.editCellBackgroundColor,\n                    appearance: 'none',\n                    webkitAppearance: 'none',\n                    mozAppearance: 'none',\n                    borderRadius: '0'\n                },\n                'canvas-datagrid-context-menu-item-mobile': {\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    color: 'inherit',\n                    background: 'inherit',\n                    margin: self.style.contextMenuItemMargin,\n                    borderRadius: self.style.contextMenuItemBorderRadius,\n                    verticalAlign: 'middle'\n                },\n                'canvas-datagrid-context-menu-item': {\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    color: 'inherit',\n                    background: 'inherit',\n                    margin: self.style.contextMenuItemMargin,\n                    borderRadius: self.style.contextMenuItemBorderRadius,\n                    verticalAlign: 'middle'\n                },\n                'canvas-datagrid-context-menu-item:hover': {\n                    background: self.style.contextMenuHoverBackground,\n                    color: self.style.contextMenuHoverColor\n                },\n                'canvas-datagrid-context-menu-label': {\n                    margin: self.style.contextMenuLabelMargin,\n                    display: self.style.contextMenuLabelDisplay,\n                    minWidth: self.style.contextMenuLabelMinWidth,\n                    maxWidth: self.style.contextMenuLabelMaxWidth\n                },\n                'canvas-datagrid-context-menu-mobile': {\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor,\n                    border: self.style.contextMenuBorder,\n                    padding: self.style.contextMenuPadding,\n                    borderRadius: self.style.contextMenuBorderRadius,\n                    opacity: self.style.contextMenuOpacity,\n                    overflow: 'hidden',\n                    whiteSpace: 'nowrap'\n                },\n                'canvas-datagrid-context-menu': {\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor,\n                    border: self.style.contextMenuBorder,\n                    padding: self.style.contextMenuPadding,\n                    borderRadius: self.style.contextMenuBorderRadius,\n                    opacity: self.style.contextMenuOpacity,\n                    overflow: 'hidden',\n                    whiteSpace: 'nowrap',\n                    cursor: self.style.contextMenuCursor\n                },\n                'canvas-datagrid-invalid-search-regExp': {\n                    background: self.style.contextMenuFilterInvalidExpresion\n                }\n            };\n            if (css[className]) {\n                Object.keys(css[className]).map(function (prop) {\n                    el.style[prop] = css[className][prop];\n                });\n            }\n            return;\n        };\n        self.appendTo = function (e) {\n            self.parentNode = e;\n            self.setDom();\n        };\n        self.setDom = function () {\n            if (self.isChildGrid) {\n                self.parentGrid = self.parentNode.parentGrid;\n                self.ctx = self.parentGrid.context;\n                self.canvas = self.parentGrid.canvas;\n                self.controlInput = self.parentGrid.controlInput;\n                self.eventParent = self.canvas;\n            } else {\n                self.controlInput = self.controlInput || document.createElement('input');\n                self.controlInput.onblur = self.intf.blur;\n                self.createInlineStyle(self.controlInput, 'canvas-datagrid-control-input');\n                self.isChildGrid = false;\n                self.parentDOMNode = self.parentNode;\n                self.parentIsCanvas = /^canvas$/i.test(self.parentDOMNode.tagName);\n                if (self.parentIsCanvas) {\n                    self.canvas = self.parentDOMNode;\n                } else {\n                    self.canvas = document.createElement('canvas');\n                    self.parentDOMNode.appendChild(self.canvas);\n                }\n                document.body.appendChild(self.controlInput);\n                self.createInlineStyle(self.canvas, 'canvas-datagrid');\n                self.ctx = self.canvas.getContext('2d');\n                self.ctx.textBaseline = 'alphabetic';\n                self.eventParent = self.canvas;\n            }\n            self.parentNodeStyle = self.canvas.style;\n            self.controlInput.setAttribute('readonly', true);\n            self.controlInput.addEventListener('blur', function (e) {\n                if (e.target !== self.canvas) {\n                    self.hasFocus = false;\n                }\n            });\n            self.eventParent.addEventListener('scroll', self.resize, false);\n            self.eventParent.addEventListener('touchstart', self.touchstart, false);\n            self.eventParent.addEventListener('mouseup', self.mouseup, false);\n            self.eventParent.addEventListener('mousedown', self.mousedown, false);\n            self.eventParent.addEventListener('dblclick', self.dblclick, false);\n            self.eventParent.addEventListener('click', self.click, false);\n            self.eventParent.addEventListener('mousemove', self.mousemove);\n            self[self.isChildGrid ? 'parentGrid' : 'eventParent'].addEventListener('wheel', self.scrollWheel, false);\n            self.canvas.addEventListener('contextmenu', self.contextmenuEvent, false);\n            self.controlInput.addEventListener('copy', self.copy);\n            self.controlInput.addEventListener('cut', self.cut);\n            self.controlInput.addEventListener('paste', self.paste);\n            self.controlInput.addEventListener('keypress', self.keypress, false);\n            self.controlInput.addEventListener('keyup', self.keyup, false);\n            self.controlInput.addEventListener('keydown', self.keydown, false);\n            window.addEventListener('resize', self.resize);\n        };\n    };\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }),\n/* 9 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function () {\n    'use strict';\n    return function (self) {\n        /**\n         * Converts a integer into a letter A - ZZZZZ...\n         * @memberof canvasDatagrid\n         * @name integerToAlpha\n         * @method\n         * @param {column} n The number to convert.\n         */\n        self.integerToAlpha = function (n) {\n            var ordA = 'a'.charCodeAt(0),\n                ordZ = 'z'.charCodeAt(0),\n                len = ordZ - ordA + 1,\n                s = '';\n            while (n >= 0) {\n                s = String.fromCharCode(n % len + ordA) + s;\n                n = Math.floor(n / len) - 1;\n            }\n            return s;\n        };\n        /**\n         * Inserts a new column before the specified index into the schema.\n         * @tutorial schema\n         * @memberof canvasDatagrid\n         * @name insertColumn\n         * @method\n         * @param {column} c The column to insert into the schema.\n         * @param {number} index The index of the column to insert before.\n         */\n        self.insertColumn = function (c, index) {\n            var s = self.getSchema();\n            if (s.length < index) {\n                throw new Error('Index is beyond the length of the schema.');\n            }\n            self.validateColumn(c, s);\n            s.splice(index, 0, c);\n            self.data.forEach(function (row) {\n                self.applyDefaultValue(row, c);\n            });\n            self.intf.schema = s;\n        };\n        /**\n         * Deletes a column from the schema at the specified index.\n         * @memberof canvasDatagrid\n         * @name deleteColumn\n         * @tutorial schema\n         * @method\n         * @param {number} index The index of the column to delete.\n         */\n        self.deleteColumn = function (index) {\n            var s = self.getSchema();\n            // remove data matching this column name from data\n            self.data.forEach(function (row) {\n                delete row[s[index].name];\n            });\n            s.splice(index, 1);\n            self.intf.schema = s;\n        };\n        /**\n         * Adds a new column into the schema.\n         * @tutorial schema\n         * @memberof canvasDatagrid\n         * @name addColumn\n         * @method\n         * @param {column} c The column to add to the schema.\n         */\n        self.addColumn = function (c) {\n            var s = self.getSchema();\n            self.validateColumn(c, s);\n            s.push(c);\n            self.data.forEach(function (row) {\n                self.applyDefaultValue(row, c);\n            });\n            self.intf.schema = s;\n        };\n        /**\n         * Deletes a row from the dataset at the specified index.\n         * @memberof canvasDatagrid\n         * @name deleteRow\n         * @method\n         * @param {number} index The index of the row to delete.\n         */\n        self.deleteRow = function (index) {\n            self.originalData.splice(index, 1);\n            self.setFilter();\n            self.resize(true);\n        };\n        /**\n         * Inserts a new row into the dataset before the specified index.\n         * @memberof canvasDatagrid\n         * @name insertRow\n         * @method\n         * @param {object} d data.\n         * @param {number} index The index of the row to insert before.\n         */\n        self.insertRow = function (d, index) {\n            if (self.originalData.length < index) {\n                throw new Error('Index is beyond the length of the dataset.');\n            }\n            self.originalData.splice(index, 0, d);\n            self.getSchema().forEach(function (c) {\n                if (d[c.name] === undefined) {\n                    self.applyDefaultValue(self.originalData[index], c);\n                }\n            });\n            self.setFilter();\n            self.resize(true);\n        };\n        /**\n         * Adds a new row into the dataset.\n         * @memberof canvasDatagrid\n         * @name addRow\n         * @method\n         * @param {object} d data.\n         */\n        self.addRow = function (d) {\n            self.originalData.push(d);\n            self.getSchema().forEach(function (c) {\n                if (d[c.name] === undefined) {\n                    self.applyDefaultValue(self.originalData[self.originalData.length - 1], c);\n                }\n            });\n            self.setFilter();\n            self.resize(true);\n        };\n        /**\n         * Sets the height of a given row by index number.\n         * @memberof canvasDatagrid\n         * @name setRowHeight\n         * @method\n         * @param {number} rowIndex The index of the row to set.\n         * @param {number} height Height to set the row to.\n         */\n        self.setRowHeight = function (rowIndex, height) {\n            self.sizes.rows[rowIndex] = height;\n            self.draw(true);\n        };\n        /**\n         * Sets the width of a given column by index number.\n         * @memberof canvasDatagrid\n         * @name setColumnWidth\n         * @method\n         * @param {number} colIndex The index of the column to set.\n         * @param {number} width Width to set the column to.\n         */\n        self.setColumnWidth = function (colIndex, width) {\n            self.sizes.columns[colIndex] = width;\n            self.draw(true);\n        };\n        /**\n         * Removes any changes to the width of the columns due to user or api interaction, setting them back to the schema or style default.\n         * @memberof canvasDatagrid\n         * @name resetColumnWidths\n         * @tutorial schema\n         * @method\n         */\n        self.resetColumnWidths = function () {\n            self.sizes.columns = {};\n            self.draw(true);\n        };\n        /**\n         * Removes any changes to the height of the rows due to user or api interaction, setting them back to the schema or style default.\n         * @memberof canvasDatagrid\n         * @name resetRowHeights\n         * @tutorial schema\n         * @method\n         */\n        self.resetRowHeights = function () {\n            self.sizes.rows = {};\n            self.draw(true);\n        };\n        /**\n         * Sets the value of the filter.\n         * @memberof canvasDatagrid\n         * @name setFilter\n         * @method\n         * @param {string} column Name of the column to filter.\n         * @param {string} value The value to filter for.\n         */\n        self.setFilter = function (column, value) {\n            if (column === undefined && value === undefined) {\n                self.columnFilters = {};\n            } else if (column && (value === '' || value === undefined)) {\n                delete self.columnFilters[column];\n            } else {\n                self.columnFilters[column] = value;\n            }\n            self.applyDataTransforms();\n        };\n        /**\n         * Returns the number of pixels to scroll down to line up with row rowIndex.\n         * @memberof canvasDatagrid\n         * @name findRowScrollTop\n         * @method\n         * @param {number} rowIndex The row index of the row to scroll find.\n         */\n        self.findRowScrollTop = function (rowIndex) {\n            if (self.scrollCache.y[rowIndex] === undefined) { throw new RangeError('Row index out of range.'); }\n            return self.scrollCache.y[rowIndex];\n        };\n        /**\n         * Returns the number of pixels to scroll to the left to line up with column columnIndex.\n         * @memberof canvasDatagrid\n         * @name findColumnScrollLeft\n         * @method\n         * @param {number} columnIndex The column index of the column to find.\n         */\n        self.findColumnScrollLeft = function (columnIndex) {\n            var i = Math.max(columnIndex - 1, 0);\n            if (self.scrollCache.x[i] === undefined) { throw new Error('Column index out of range.'); }\n            return self.scrollCache.x[i] - self.getColummnWidth(self.orders.columns[columnIndex]);\n        };\n        /**\n         * Scrolls to the cell at columnIndex x, and rowIndex y.  If you define both rowIndex and columnIndex additional calculations can be made to center the cell using the target cell's height and width.  Defining only one rowIndex or only columnIndex will result in simpler calculations.\n         * @memberof canvasDatagrid\n         * @name gotoCell\n         * @method\n         * @param {number} x The column index of the cell to scroll to.\n         * @param {number} y The row index of the cell to scroll to.\n         * @param {number} [offsetX=0] Percentage offset the cell should be from the left edge (not including headers).  The default is 0, meaning the cell will appear at the left edge. Valid values are 0 through 1. 1 = Left, 0 = Right, 0.5 = Center.\n         * @param {number} [offsetY=0] Percentage offset the cell should be from the top edge (not including headers).  The default is 0, meaning the cell will appear at the top edge. Valid values are 0 through 1. 1 = Bottom, 0 = Top, 0.5 = Center.\n         */\n        self.gotoCell = function (x, y, offsetX, offsetY) {\n            var targetX = x === undefined ? undefined : self.findColumnScrollLeft(x),\n                targetY = y === undefined ? undefined : self.findRowScrollTop(y),\n                cell,\n                sbw = self.scrollBox.width - (self.scrollBox.verticalBarVisible ? self.style.scrollBarWidth : 0),\n                sbh = self.scrollBox.height - (self.scrollBox.horizontalBarVisible ? self.style.scrollBarWidth : 0);\n            offsetX = offsetX === undefined ? 0 : offsetX;\n            offsetY = offsetY === undefined ? 0 : offsetY;\n            targetX -= sbw * offsetX;\n            targetY -= sbh * offsetY;\n            if (x !== undefined && y !== undefined) {\n                self.scrollBox.scrollTo(targetX, targetY);\n                requestAnimationFrame(function () {\n                    cell = self.getVisibleCellByIndex(x, y);\n                    // HACK: just don't offset if the target cell cannot be seen\n                    // TODO: offset does not work on very small grids, not sure why\n                    if (!cell) { return; }\n                    targetX += cell.width * offsetX;\n                    targetY += cell.height * offsetY;\n                    self.scrollBox.scrollTo(targetX, targetY);\n                });\n            } else if (x !== undefined) {\n                self.scrollBox.scrollLeft = targetX;\n            } else if (y !== undefined) {\n                self.scrollBox.scrollTop = targetY;\n            }\n        };\n        /**\n         * Scrolls the row y.\n         * @memberof canvasDatagrid\n         * @name gotoRow\n         * @method\n         * @param {number} y The row index of the cell to scroll to.\n         */\n        self.gotoRow = function (y) {\n            self.gotoCell(0, y);\n        };\n        /**\n         * Scrolls the cell at cell x, row y into view if it is not already.\n         * @memberof canvasDatagrid\n         * @name scrollIntoView\n         * @method\n         * @param {number} x The column index of the cell to scroll into view.\n         * @param {number} y The row index of the cell to scroll into view.\n         * @param {number} [offsetX=0] Percentage offset the cell should be from the left edge (not including headers).  The default is 0, meaning the cell will appear at the left edge. Valid values are 0 through 1. 1 = Left, 0 = Right, 0.5 = Center.\n         * @param {number} [offsetY=0] Percentage offset the cell should be from the top edge (not including headers).  The default is 0, meaning the cell will appear at the top edge. Valid values are 0 through 1. 1 = Bottom, 0 = Top, 0.5 = Center.\n         */\n        self.scrollIntoView = function (x, y, offsetX, offsetY) {\n            if (self.visibleCells.filter(function (cell) {\n                    return (cell.rowIndex === y || y === undefined)\n                        && (cell.columnIndex === x || x === undefined)\n                        && cell.x > 0\n                        && cell.y > 0\n                        && cell.x + cell.width < self.width\n                        && cell.y + cell.height < self.height;\n                }).length === 0) {\n                self.gotoCell(x, y, offsetX, offsetY);\n            }\n        };\n        /**\n         * Sets the active cell. Requires redrawing.\n         * @memberof canvasDatagrid\n         * @name setActiveCell\n         * @method\n         * @param {number} x The column index of the cell to set active.\n         * @param {number} y The row index of the cell to set active.\n         */\n        self.setActiveCell = function (x, y) {\n            if (x < 0) { x = 0; }\n            if (y < 0) { y = 0; }\n            self.activeCell = {\n                rowIndex: y,\n                columnIndex: x\n            };\n        };\n        /**\n         * Removes the selection.\n         * @memberof canvasDatagrid\n         * @name selectNone\n         * @param {boolean} dontDraw Suppress the draw method after the selection change.\n         * @method\n         */\n        self.selectNone = function (dontDraw) {\n            self.selections = [];\n            self.dispatchEvent('selectionchanged', {\n                selectedData: self.getSelectedData(),\n                selections: self.selections,\n                selectionBounds: self.selectionBounds\n            });\n            if (dontDraw) { return; }\n            self.draw();\n        };\n        /**\n         * Selects every visible cell.\n         * @memberof canvasDatagrid\n         * @name selectAll\n         * @param {boolean} dontDraw Suppress the draw method after the selection change.\n         * @method\n         */\n        self.selectAll = function (dontDraw) {\n            self.selectArea({\n                top: 0,\n                left: -1,\n                right: self.getSchema().length - 1,\n                bottom: self.data.length - 1\n            });\n            if (dontDraw) { return; }\n            self.draw();\n        };\n        /**\n         * Returns true if the selected columnIndex is selected on every row.\n         * @memberof canvasDatagrid\n         * @name isColumnSelected\n         * @method\n         * @param {number} columnIndex The column index to check.\n         */\n        self.isColumnSelected = function (columnIndex) {\n            var colIsSelected = true;\n            self.data.forEach(function (row, rowIndex) {\n                if (!self.selections[rowIndex] || self.selections[rowIndex].indexOf(self.orders.columns[columnIndex]) === -1) {\n                    colIsSelected = false;\n                }\n            });\n            return colIsSelected;\n        };\n        /**\n         * Runs the defined method on each selected cell.\n         * @memberof canvasDatagrid\n         * @name forEachSelectedCell\n         * @method\n         * @param {number} fn The function to execute.  The signature of the function is: (data, rowIndex, columnName).\n         * @param {number} expandToRow When true the data in the array is expanded to the entire row.\n         */\n        self.forEachSelectedCell = function (fn, expandToRow) {\n            var d = [], s = expandToRow ? self.getSchema() : self.getVisibleSchema(), l = self.data.length;\n            self.selections.forEach(function (row, index) {\n                if (index === l) { return; }\n                if (row.length === 0) {\n                    d[index] = null;\n                    return;\n                }\n                d[index] = {};\n                row.forEach(function (col) {\n                    if (col === -1 || !s[col]) { return; }\n                    fn(self.data, index, s[col].name);\n                });\n            });\n        };\n        /**\n         * Selects a column.\n         * @memberof canvasDatagrid\n         * @name selectColumn\n         * @method\n         * @param {number} columnIndex The column index to select.\n         * @param {boolean} toggleSelectMode When true, behaves as if you were holding control/command when you clicked the column.\n         * @param {boolean} shift When true, behaves as if you were holding shift when you clicked the column.\n         * @param {boolean} supressSelectionchangedEvent When true, prevents the selectionchanged event from firing.\n         */\n        self.selectColumn = function (columnIndex, ctrl, shift, supressEvent) {\n            var s, e, x;\n            function addCol(i) {\n                self.data.forEach(function (row, rowIndex) {\n                    self.selections[rowIndex] = self.selections[rowIndex] || [];\n                    if (self.selections[rowIndex].indexOf(i) === -1) {\n                        self.selections[rowIndex].push(i);\n                    }\n                });\n            }\n            function removeCol(i) {\n                self.data.forEach(function (row, rowIndex) {\n                    self.selections[rowIndex] = self.selections[rowIndex] || [];\n                    if (self.selections[rowIndex].indexOf(i) !== -1) {\n                        self.selections[rowIndex].splice(self.selections[rowIndex].indexOf(i), 1);\n                    }\n                });\n            }\n            if (shift) {\n                if (!self.activeCell) { return; }\n                s = Math.min(self.activeCell.columnIndex, columnIndex);\n                e = Math.max(self.activeCell.columnIndex, columnIndex);\n                for (x = s; e > x; x += 1) {\n                    addCol(x);\n                }\n            }\n            if (!ctrl && !shift) {\n                self.selections = [];\n                self.activeCell.columnIndex = columnIndex;\n                self.activeCell.rowIndex = self.scrollIndexTop;\n            }\n            if (ctrl && self.isColumnSelected(columnIndex)) {\n                removeCol(columnIndex);\n            } else {\n                addCol(columnIndex);\n            }\n            if (supressEvent) { return; }\n            self.dispatchEvent('selectionchanged', {\n                selectedData: self.getSelectedData(),\n                selections: self.selections,\n                selectionBounds: self.getSelectionBounds()\n            });\n        };\n        /**\n         * Selects a row.\n         * @memberof canvasDatagrid\n         * @name selectRow\n         * @method\n         * @param {number} rowIndex The row index to select.\n         * @param {boolean} ctrl When true, behaves as if you were holding control/command when you clicked the row.\n         * @param {boolean} shift When true, behaves as if you were holding shift when you clicked the row.\n         * @param {boolean} supressSelectionchangedEvent When true, prevents the selectionchanged event from firing.\n         */\n        self.selectRow = function (rowIndex, ctrl, shift, supressEvent) {\n            var x, st, en, s = self.getVisibleSchema();\n            function de() {\n                if (supressEvent) { return; }\n                self.dispatchEvent('selectionchanged', {\n                    selectedData: self.getSelectedData(),\n                    selections: self.selections,\n                    selectionBounds: self.selectionBounds\n                });\n            }\n            function addRow(ri) {\n                self.selections[ri] = [];\n                self.selections[ri].push(-1);\n                s.forEach(function (col, index) {\n                    self.selections[ri].push(self.orders.columns.indexOf(col.index));\n                });\n            }\n            if (self.dragAddToSelection === false || self.dragObject === undefined) {\n                if (self.selections[rowIndex] && self.selections[rowIndex].length - 1 === s.length) {\n                    if (ctrl) {\n                        self.selections[rowIndex] = [];\n                        de();\n                        return;\n                    }\n                }\n            }\n            if (self.dragAddToSelection === true || self.dragObject === undefined) {\n                if (shift && self.dragObject === undefined) {\n                    if (!self.activeCell) { return; }\n                    st = Math.min(self.activeCell.rowIndex, rowIndex);\n                    en = Math.max(self.activeCell.rowIndex, rowIndex);\n                    for (x = st; en >= x; x += 1) {\n                        addRow(x);\n                    }\n                } else {\n                    addRow(rowIndex);\n                }\n            }\n            de();\n        };\n        /**\n         * Collapse a tree grid by row index.\n         * @memberof canvasDatagrid\n         * @name collapseTree\n         * @method\n         * @param {number} index The index of the row to collapse.\n         */\n        self.collapseTree = function (rowIndex) {\n            self.dispatchEvent('collapsetree', {\n                childGrid: self.childGrids[rowIndex],\n                data: self.data[rowIndex],\n                rowIndex: rowIndex\n            });\n            self.openChildren[rowIndex].blur();\n            self.openChildren[rowIndex].dispose();\n            delete self.openChildren[rowIndex];\n            delete self.sizes.trees[rowIndex];\n            delete self.childGrids[rowIndex];\n            self.dispatchEvent('resizerow', {\n                cellHeight: self.style.cellHeight\n            });\n            self.resize(true);\n            self.draw(true);\n        };\n        /**\n         * Expands a tree grid by row index.\n         * @memberof canvasDatagrid\n         * @name expandTree\n         * @method\n         * @param {number} index The index of the row to expand.\n         */\n        self.expandTree = function (rowIndex) {\n            var trArgs = self.args.treeGridAttributes || {},\n                columnHeaderCellHeight = self.getColumnHeaderCellHeight(),\n                rowHeaderCellWidth = self.sizes.columns.cornerCell || self.style.rowHeaderCellWidth,\n                h = self.sizes.trees[rowIndex] || self.style.treeGridHeight,\n                treeGrid;\n            if (!self.childGrids[rowIndex]) {\n                trArgs.debug = self.attributes.debug;\n                trArgs.name = self.attributes.saveAppearance ? self.attributes.name + 'tree' + rowIndex : undefined;\n                trArgs.style = trArgs.style || self.style;\n                trArgs.parentNode = {\n                    parentGrid: self.intf,\n                    nodeType: 'canvas-datagrid-tree',\n                    offsetHeight: h,\n                    offsetWidth: self.width - rowHeaderCellWidth,\n                    header: { width: self.width - rowHeaderCellWidth },\n                    offsetLeft: rowHeaderCellWidth,\n                    offsetTop: columnHeaderCellHeight,\n                    offsetParent: self.intf.parentNode,\n                    parentNode: self.intf.parentNode,\n                    style: 'tree',\n                    data: self.data[rowIndex]\n                };\n                treeGrid = self.createGrid(trArgs);\n                self.childGrids[rowIndex] = treeGrid;\n            }\n            treeGrid = self.childGrids[rowIndex];\n            treeGrid.visible = true;\n            self.dispatchEvent('expandtree', {\n                treeGrid: treeGrid,\n                data: self.data[rowIndex],\n                rowIndex: rowIndex\n            });\n            self.openChildren[rowIndex] = treeGrid;\n            self.sizes.trees[rowIndex] = h;\n            self.dispatchEvent('resizerow', {height: self.style.cellHeight});\n            self.resize(true);\n        };\n        /**\n         * Toggles tree grid open and close by row index.\n         * @memberof canvasDatagrid\n         * @name toggleTree\n         * @method\n         * @param {number} index The index of the row to toggle.\n         */\n        self.toggleTree = function (rowIndex) {\n            var i = self.openChildren[rowIndex];\n            if (i) {\n                return self.collapseTree(rowIndex);\n            }\n            self.expandTree(rowIndex);\n        };\n        /**\n         * Returns a header from the schema by name.\n         * @memberof canvasDatagrid\n         * @name getHeaderByName\n         * @tutorial schema\n         * @method\n         * @returns {header} header with the selected name, or undefined.\n         * @param {string} name The name of the column to resize.\n         */\n        self.getHeaderByName = function (name) {\n            var x, i = self.getSchema();\n            for (x = 0; x < i.length; x += 1) {\n                if (i[x].name === name) {\n                    return i[x];\n                }\n            }\n        };\n        /**\n         * Resizes a column to fit the longest value in the column. Call without a value to resize all columns.\n         * Warning, can be slow on very large record sets (1m records ~3-5 seconds on an i7).\n         * @memberof canvasDatagrid\n         * @name fitColumnToValues\n         * @method\n         * @param {string} name The name of the column to resize.\n         */\n        self.fitColumnToValues = function (name, internal) {\n            if (!self.canvas) { return; }\n            self.sizes.columns[name === 'cornerCell' ? -1 : self.getHeaderByName(name).index]\n                = Math.max(self.findColumnMaxTextLength(name), self.style.minColumnWidth);\n            if (!internal) {\n                self.resize();\n                self.draw(true);\n            }\n        };\n        /**\n         * Checks if a cell is currently visible.\n         * @memberof canvasDatagrid\n         * @name isCellVisible\n         * @overload\n         * @method\n         * @returns {boolean} when true, the cell is visible, when false the cell is not currently drawn.\n         * @param {number} columnIndex The column index of the cell to check.\n         * @param {number} rowIndex The row index of the cell to check.\n         */\n        /**\n         * Checks if a cell is currently visible.\n         * @memberof canvasDatagrid\n         * @name isCellVisible\n         * @method\n         * @returns {boolean} when true, the cell is visible, when false the cell is not currently drawn.\n         * @param {cell} cell The cell to check for.  Alternatively you can pass an object { x: <x-pixel-value>, y: <y-pixel-value> }.\n         */\n        self.isCellVisible = function (cell, rowIndex) {\n            // overload\n            if (rowIndex !== undefined) {\n                return self.visibleCells.filter(function (c) {\n                    return c.columnIndex === cell && c.rowIndex === rowIndex;\n                }).length > 0;\n            }\n            var x, l = self.visibleCells.length;\n            for (x = 0; x < l; x += 1) {\n                if (cell.x === self.visibleCells[x].x && cell.y === self.visibleCells[x].y) {\n                    return true;\n                }\n            }\n            return false;\n        };\n        /**\n         * Sets the order of the data.\n         * @memberof canvasDatagrid\n         * @name order\n         * @method\n         * @param {number} columnName Name of the column to be sorted.\n         * @param {string} direction `asc` for ascending or `desc` for descending.\n         * @param {function} [sortFunction] When defined, override the default sorting method defined in the column's schema and use this one.\n         * @param {bool} [dontSetStorageData] Don't store this setting for future use.\n         */\n        self.order = function (columnName, direction, sortFunction, dontSetStorageData) {\n            var f,\n                c = self.getSchema().filter(function (col) {\n                    return col.name === columnName;\n                });\n            if (self.dispatchEvent('beforesortcolumn', {name: columnName, direction: direction})) { return; }\n            self.orderBy = columnName;\n            self.orderDirection = direction;\n            if (!self.data || self.data.length === 0) { return; }\n            if (c.length === 0) {\n                throw new Error('Cannot sort.  No such column name');\n            }\n            f = sortFunction || c[0].sorter || self.sorters[c[0].type];\n            if (!f && c[0].type !== undefined) {\n                console.warn('Cannot sort type \"%s\" falling back to string sort.', c[0].type);\n            }\n            self.orderings.add(columnName, direction, (typeof f === 'function' ? f : self.sorters.string));\n            self.orderings.sort();\n            self.dispatchEvent('sortcolumn', {name: columnName, direction: direction});\n            self.draw(true);\n            if (dontSetStorageData) { return; }\n            self.setStorageData();\n        };\n        self.isInGrid = function (e) {\n            if (e.x < 0\n                    || e.x > self.width\n                    || e.y < 0\n                    || e.y > self.height) {\n                return false;\n            }\n            return true;\n        };\n        /**\n         * Moves the current selection relative to the its current position.  Note: this method does not move the selected data, just the selection itself.\n         * @memberof canvasDatagrid\n         * @name moveSelection\n         * @method\n         * @param {number} offsetX The number of columns to offset the selection.\n         * @param {number} offsetY The number of rows to offset the selection.\n         */\n        self.moveSelection = function (offsetX, offsetY) {\n            var sel = [];\n            self.selections.forEach(function (row, rowIndex) {\n                sel[rowIndex + offsetY] = [];\n                row.forEach(function (colIndex) {\n                    sel[rowIndex + offsetY].push(colIndex + offsetX);\n                });\n            });\n            self.selections = sel;\n        };\n        /**\n         * Moves data in the provided selection to another position in the grid.  Moving data off the edge of the schema (columns/x) will truncate data.\n         * @memberof canvasDatagrid\n         * @name moveTo\n         * @method\n         * @param {array} sel 2D array representing selected rows and columns.  `canvasDatagrid.selections` is in this format and can be used here.\n         * @param {number} x The column index to start inserting the selection at.\n         * @param {number} y The row index to start inserting the selection at.\n         */\n        self.moveTo = function (sel, x, y) {\n            var d = self.getSelectedData(),\n                s = self.getVisibleSchema(),\n                l = sel.length,\n                xi,\n                maxRowLength = -Infinity,\n                minXi = Infinity,\n                yi = y - 1;\n            sel.forEach(function (row, index) {\n                if (index === l) { return; }\n                if (row.length === 0) { return; }\n                minXi = Math.min(self.getVisibleColumnIndexOf(x), minXi);\n                maxRowLength = Math.max(maxRowLength, row.length);\n                row.forEach(function (colIndex) {\n                    // intentional redef of colIndex\n                    colIndex = self.getVisibleColumnIndexOf(colIndex);\n                    if (!s[colIndex]) { return; }\n                    if (!self.data[index]) { self.data[index] = {}; }\n                    self.data[index][s[colIndex].name] = null;\n                });\n            });\n            sel.forEach(function (row, index) {\n                var lastSourceIndex;\n                yi += 1;\n                xi = self.getVisibleColumnIndexOf(x);\n                row.forEach(function (colIndex, cidx) {\n                    colIndex = self.getVisibleColumnIndexOf(colIndex);\n                    if (cidx > 0) {\n                        // this confusing bit of nonsense figures out\n                        // if the selection has skipped cells\n                        xi += colIndex - lastSourceIndex;\n                    }\n                    lastSourceIndex = colIndex;\n                    if (colIndex === -1\n                            || !s[xi]\n                            || !s[colIndex]\n                            || self.data.length - 1 < yi\n                            || yi < 0) { return; }\n                    if (!self.data[yi]) { self.data[yi] = {}; }\n                    self.data[yi][s[xi].name] = d[index][s[colIndex].name];\n                });\n            });\n        };\n        /**\n         * Checks if a given column is visible.\n         * @memberof canvasDatagrid\n         * @name isColumnVisible\n         * @method\n         * @returns {boolean} When true, the column is visible.\n         * @param {number} columnIndex Column index.\n         */\n        self.isColumnVisible = function (columnIndex) {\n            return self.visibleCells.filter(function (c) {\n                return c.columnIndex === columnIndex;\n            }).length > 0;\n        };\n        /**\n         * Checks if a given row is visible.\n         * @memberof canvasDatagrid\n         * @name isRowVisible\n         * @method\n         * @returns {boolean} When true, the row is visible.\n         * @param {number} rowIndex Row index.\n         */\n        self.isRowVisible = function (rowIndex) {\n            return self.visibleCells.filter(function (c) {\n                return c.rowIndex === rowIndex;\n            }).length > 0;\n        };\n        /**\n         * Gets the cell at columnIndex and rowIndex.\n         * @memberof canvasDatagrid\n         * @name getVisibleCellByIndex\n         * @method\n         * @returns {cell} cell at the selected location.\n         * @param {number} x Column index.\n         * @param {number} y Row index.\n         */\n        self.getVisibleCellByIndex = function (x, y) {\n            return self.visibleCells.filter(function (c) {\n                return c.columnIndex === x && c.rowIndex === y;\n            })[0];\n        };\n        /**\n         * Gets the cell at grid pixel coordinate x and y.  Author's note.  This function ties drawing and events together.  This is a very complex function and is core to the component.\n         * @memberof canvasDatagrid\n         * @name getCellAt\n         * @method\n         * @returns {cell} cell at the selected location.\n         * @param {number} x Number of pixels from the left.\n         * @param {number} y Number of pixels from the top.\n         */\n        self.getCellAt = function (x, y, useTouchScrollZones) {\n            function getBorder(entitiy) {\n                if (entitiy.x + entitiy.width - (self.attributes.borderResizeZone * 0.4) < x && entitiy.x + entitiy.width + (self.attributes.borderResizeZone * 0.6) > x) {\n                    return 'r';\n                }\n                if (entitiy.x - (self.attributes.borderResizeZone * 0.4) < x && entitiy.x + (self.attributes.borderResizeZone * 0.6) > x) {\n                    return 'l';\n                }\n                if (entitiy.y + entitiy.height - (self.attributes.borderResizeZone * 0.4) < y && entitiy.y + entitiy.height + (self.attributes.borderResizeZone * 0.6) > y) {\n                    return 'b';\n                }\n                if (entitiy.y - (self.attributes.borderResizeZone * 0.4) < y && entitiy.y + (self.attributes.borderResizeZone * 0.6) > y) {\n                    return 't';\n                }\n            }\n            if (!self.visibleCells) { return; }\n            var border,\n                tsz = useTouchScrollZones ? self.attributes.touchScrollZone : 0,\n                moveMode = self.attributes.borderDragBehavior === 'move',\n                i,\n                l = self.visibleCells.length,\n                moveBorder,\n                xBorderBehavior = moveMode ? self.cursorGrab : 'ew-resize',\n                yBorderBehavior = moveMode ? self.cursorGrab : 'ns-resize',\n                cell,\n                entitiy;\n            if (!self.visibleCells || !self.visibleCells.length) { return; }\n            self.hasFocus = true;\n            if (!(y < self.height\n                && y > 0\n                && x < self.width\n                && x > 0)) {\n                self.hasFocus = false;\n                return {\n                    dragContext: 'inherit',\n                    context: 'inherit'\n                };\n            }\n            for (i = 0; i < l; i += 1) {\n                cell = self.visibleCells[i];\n                // interactive dimensions of the cell.  used for touch \"over size\" zones\n                entitiy = {\n                    x: cell.x,\n                    y: cell.y,\n                    height: cell.height,\n                    width: cell.width\n                };\n                if (useTouchScrollZones && /(vertical|horizontal)-scroll-/.test(cell.style)) {\n                    entitiy.x -= tsz;\n                    entitiy.y -= tsz;\n                    entitiy.height += tsz;\n                    entitiy.width += tsz;\n                }\n                if (entitiy.x - self.style.cellBorderWidth < x\n                        && entitiy.x + entitiy.width + self.style.cellBorderWidth > x\n                        && entitiy.y - self.style.cellBorderWidth < y\n                        && entitiy.y + entitiy.height + self.style.cellBorderWidth > y) {\n                    if (/frozen-row-marker/.test(cell.style)) {\n                        cell.dragContext = cell.style;\n                        cell.context = 'row-resize';\n                        return cell;\n                    }\n                    if (/frozen-column-marker/.test(cell.style)) {\n                        cell.dragContext = cell.style;\n                        cell.context = 'col-resize';\n                        return cell;\n                    }\n                    if (/selection-handle-/.test(cell.style)) {\n                        cell.dragContext = cell.style;\n                        cell.context = 'crosshair';\n                        return cell;\n                    }\n                    if (/vertical-scroll-(bar|box)/.test(cell.style)) {\n                        cell.dragContext = 'vertical-scroll-box';\n                        cell.context = 'vertical-scroll-box';\n                        cell.isScrollBar = true;\n                        cell.isVerticalScrollBar = true;\n                        if (y > self.scrollBox.box.v.y + self.scrollBox.scrollBoxHeight) {\n                            cell.dragContext = 'vertical-scroll-bottom';\n                            cell.context = 'vertical-scroll-bottom';\n                        } else if (y < self.scrollBox.box.v.y) {\n                            cell.dragContext = 'vertical-scroll-top';\n                            cell.context = 'vertical-scroll-top';\n                        }\n                        self.cursor = 'default';\n                        return cell;\n                    }\n                    if (/horizontal-scroll-(bar|box)/.test(cell.style)) {\n                        cell.dragContext = 'horizontal-scroll-box';\n                        cell.context = 'horizontal-scroll-box';\n                        cell.isScrollBar = true;\n                        cell.isHorizontalScrollBar = true;\n                        if (x > self.scrollBox.box.h.x + self.scrollBox.scrollBoxWidth) {\n                            cell.dragContext = 'horizontal-scroll-right';\n                            cell.context = 'horizontal-scroll-right';\n                        } else if (x < self.scrollBox.box.h.x) {\n                            cell.dragContext = 'horizontal-scroll-left';\n                            cell.context = 'horizontal-scroll-left';\n                        }\n                        self.cursor = 'default';\n                        return cell;\n                    }\n                    border = getBorder(entitiy);\n                    // check if the border of this cell is the border of the selection and if so show move cursor in move mode\n                    moveBorder = moveMode && cell.selectionBorder && cell.selectionBorder.indexOf(border) !== -1;\n                    if (['l', 'r'].indexOf(border) !== -1\n                            && (self.attributes.allowColumnResize || moveBorder)\n                            && ((self.attributes.allowColumnResizeFromCell && cell.isNormal) || !cell.isNormal || moveBorder)\n                            && ((self.attributes.allowRowHeaderResize && (cell.isRowHeader || cell.isCorner)) || !(cell.isRowHeader && cell.isCorner))) {\n                        if (((cell.isColumnHeader || cell.isCorner) || (self.attributes.allowColumnResizeFromCell && cell.isNormal)) && border === 'r') {\n                            cell.context = 'ew-resize';\n                            cell.dragContext = 'ew-resize';\n                            return cell;\n                        }\n                        if (!(cell.isColumnHeader || cell.isCorner) && moveBorder) {\n                            cell.context = xBorderBehavior;\n                            cell.dragContext = border + '-move';\n                            return cell;\n                        }\n                    }\n                    if (['t', 'b'].indexOf(border) !== -1\n                            && cell.rowIndex > -1\n                            && (self.attributes.allowRowResize || moveBorder)\n                            && ((self.attributes.allowRowResizeFromCell && cell.isNormal) || !cell.isNormal || moveBorder)\n                            && !cell.isColumnHeader) {\n                        if (((cell.isRowHeader || cell.isCorner) || (self.attributes.allowRowResizeFromCell && cell.isNormal)) && border === 'b') {\n                            cell.context = 'ns-resize';\n                            cell.dragContext = 'ns-resize';\n                            return cell;\n                        }\n                        if (!(cell.isRowHeader || cell.isCorner) && moveBorder) {\n                            cell.context = yBorderBehavior;\n                            cell.dragContext = border + '-move';\n                            return cell;\n                        }\n                    }\n                    if (cell.style === 'columnHeaderCell') {\n                        cell.context = 'cell';\n                        cell.dragContext = 'column-reorder';\n                        return cell;\n                    }\n                    if (cell.style === 'rowHeaderCell') {\n                        if ((self.attributes.rowGrabZoneSize + (cell.y - self.style.cellBorderWidth) < y)\n                                || !self.attributes.allowRowReordering) {\n                            cell.dragContext = 'cell';\n                            cell.context = 'cell';\n                        } else {\n                            cell.context = self.cursorGrab;\n                            cell.dragContext = 'row-reorder';\n                        }\n                        return cell;\n                    }\n                    if (cell.isGrid) {\n                        self.hasFocus = false;\n                        cell.dragContext = 'cell-grid';\n                        cell.context = 'cell-grid';\n                        return cell;\n                    }\n                    if (cell.style === 'tree-grid') {\n                        self.hasFocus = false;\n                        cell.dragContext = 'tree';\n                        cell.context = 'tree';\n                        return cell;\n                    }\n                    cell.dragContext = 'cell';\n                    cell.context = 'cell';\n                    return cell;\n                }\n            }\n            self.hasFocus = true;\n            self.cursor = 'default';\n            return {\n                dragContext: 'background',\n                context: 'background',\n                style: 'background',\n                isBackground: true\n            };\n        };\n        /**\n         * Gets the bounds of current selection. \n         * @returns {rect} selection.\n         * @memberof canvasDatagrid\n         * @name getSelectionBounds\n         * @method\n         */\n        self.getSelectionBounds = function () {\n            var low = {x: Infinity, y: Infinity},\n                high = {x: -Infinity, y: -Infinity};\n            self.selections.forEach(function (row, rowIndex) {\n                var maxCol, minCol;\n                low.y = rowIndex < low.y ? rowIndex : low.y;\n                high.y = rowIndex > high.y ? rowIndex : high.y;\n                maxCol = Math.max.apply(null, row);\n                minCol = Math.min.apply(null, row);\n                low.x = minCol < low.x ? minCol : low.x;\n                high.x = maxCol > high.x ? maxCol : high.x;\n            });\n            return {\n                top: low.y,\n                left: low.x,\n                bottom: high.y,\n                right: high.x\n            };\n        };\n        /**\n         * Returns an auto generated schema based on data structure.\n         * @memberof canvasDatagrid\n         * @name getSchemaFromData\n         * @method\n         * @tutorial schema\n         * @returns {schema} schema A schema based on the first item in the data array.\n         */\n        self.getSchemaFromData = function (d) {\n            d = d || self.data;\n            return Object.keys(d[0] || {' ': ''}).map(function mapEachSchemaColumn(key, index) {\n                var type = self.getBestGuessDataType(key, d),\n                    i = {\n                        name: key,\n                        title: isNaN(parseInt(key, 10)) ? key : self.integerToAlpha(key).toUpperCase(),\n                        index: index,\n                        type: type,\n                        filter: self.filter(type)\n                    };\n                if (self.storedSettings\n                        && self.storedSettings.visibility\n                        && self.storedSettings.visibility[i.name] !== undefined) {\n                    i.hidden = !self.storedSettings.visibility[i.name];\n                }\n                return i;\n            });\n        };\n        /**\n         * Clears the change log grid.changes that keeps track of changes to the data set.\n         * This does not undo changes or alter data it is simply a convince array to keep\n         * track of changes made to the data since last this method was called.\n         * @memberof canvasDatagrid\n         * @name clearChangeLog\n         * @method\n         */\n        self.clearChangeLog = function () {\n            self.changes = [];\n        };\n        /**\n         * Selects an area of the grid.\n         * @memberof canvasDatagrid\n         * @name selectArea\n         * @method\n         * @param {rect} bounds A rect object representing the selected values.\n         */\n        self.selectArea = function (bounds, ctrl) {\n            self.selectionBounds = bounds || self.selectionBounds;\n            var ev, x, y, s = self.getSchema();\n            if (!ctrl) {\n                self.selections = [];\n            }\n            if (self.selectionBounds.top < -1\n                    || self.selectionBounds.bottom > self.data.length\n                    || self.selectionBounds.left < -1\n                    || self.selectionBounds.right > s.length) {\n                throw new Error('Impossible selection area');\n            }\n            for (x = self.selectionBounds.top; x <= self.selectionBounds.bottom; x += 1) {\n                self.selections[x] = [];\n                for (y = self.selectionBounds.left; y <= self.selectionBounds.right; y += 1) {\n                    if (self.selections[x].indexOf(y) === -1) {\n                        self.selections[x].push(y);\n                    }\n                }\n            }\n            ev = {\n                selections: self.selections,\n                selectionBounds: self.selectionBounds\n            };\n            Object.defineProperty(ev, 'selectedData', {\n                get: function () {\n                    return self.getSelectedData();\n                }\n            });\n            self.dispatchEvent('selectionchanged', ev);\n        };\n        /**\n         * Returns the maximum text width for a given column by column name.\n         * @memberof canvasDatagrid\n         * @name findColumnMaxTextLength\n         * @method\n         * @returns {number} The number of pixels wide the maximum width value in the selected column.\n         * @param {string} name The name of the column to calculate the value's width of.\n         */\n        self.findColumnMaxTextLength = function (name) {\n            var m = -Infinity;\n            if (name === 'cornerCell') {\n                self.ctx.font = self.style.rowHeaderCellFont;\n                return self.ctx.measureText((self.data.length + (self.attributes.showNewRow ? 1 : 0)).toString()).width\n                    + self.style.autosizePadding + self.style.autosizeHeaderCellPadding\n                    + self.style.rowHeaderCellPaddingRight\n                    + self.style.rowHeaderCellPaddingLeft\n                    + (self.attributes.tree ? self.style.treeArrowWidth\n                        + self.style.treeArrowMarginLeft + self.style.treeArrowMarginRight : 0);\n            }\n            self.getSchema().forEach(function (col) {\n                if (col.name !== name) { return; }\n                self.ctx.font = self.style.columnHeaderCellFont;\n                var t = self.ctx.measureText(col.title || col.name).width\n                    + self.style.headerCellPaddingRight\n                    + self.style.headerCellPaddingLeft;\n                m = t > m ? t : m;\n            });\n            self.data.forEach(function (row) {\n                self.ctx.font = self.style.cellFont;\n                var t = self.ctx.measureText(row[name]).width\n                    + self.style.cellPaddingRight\n                    + self.style.cellPaddingLeft + self.style.cellAutoResizePadding;\n                m = t > m ? t : m;\n            });\n            return m;\n        };\n        /**\n         * Gets the total width of all header columns.\n         * @memberof canvasDatagrid\n         * @name getHeaderWidth\n         * @method\n         */\n        self.getHeaderWidth = function () {\n            return self.getVisibleSchema().reduce(function (total, header) {\n                return total + (header.width || self.style.cellWidth);\n            }, 0);\n        };\n        /**\n         * Gets the height of a row by index.\n         * @memberof canvasDatagrid\n         * @name getRowHeight\n         * @method\n         * @param {number} rowIndex The row index to lookup.\n         */\n        self.getRowHeight = function (rowIndex) {\n            return ((self.sizes.rows[rowIndex]\n                    || self.style.cellHeight) * self.scale);\n        };\n        /**\n         * Gets the width of a column by index.\n         * @memberof canvasDatagrid\n         * @name getColummnWidth\n         * @method\n         * @param {number} columnIndex The column index to lookup.\n         */\n        self.getColummnWidth = function (columnIndex) {\n            return ((self.sizes.columns[columnIndex]\n                    || self.getSchema()[columnIndex].width\n                    || self.style.cellWidth) * self.scale);\n        };\n        self.formatters.string = function cellFormatterString(e) {\n            return e.cell.value !== undefined ? e.cell.value : '';\n        };\n        self.formatters.rowHeaderCell = self.formatters.string;\n        self.formatters.headerCell = self.formatters.string;\n        self.formatters.number = self.formatters.string;\n        self.formatters.int = self.formatters.string;\n        self.formatters.html = self.formatters.string;\n        self.sorters.string = function (columnName, direction) {\n            var asc = direction === 'asc';\n            return function (a, b) {\n                if (a[columnName] === undefined || a[columnName] === null) {\n                    return 1;\n                }\n                if (b[columnName] === undefined || b[columnName] === null) {\n                    return 0;\n                }\n                if (asc) {\n                    if (!a[columnName].localeCompare) { return 1; }\n                    return a[columnName].localeCompare(b[columnName]);\n                }\n                if (!b[columnName].localeCompare) { return 1; }\n                return b[columnName].localeCompare(a[columnName]);\n            };\n        };\n        self.sorters.number = function (columnName, direction) {\n            var asc = direction === 'asc';\n            return function (a, b) {\n                if (asc) {\n                    return a[columnName] - b[columnName];\n                }\n                return b[columnName] - a[columnName];\n            };\n        };\n        self.sorters.date = function (columnName, direction) {\n            var asc = direction === 'asc';\n            return function (a, b) {\n                if (asc) {\n                    return new Date(a[columnName]).getTime()\n                        - new Date(b[columnName]).getTime();\n                }\n                return new Date(b[columnName]).getTime()\n                        - new Date(a[columnName]).getTime();\n            };\n        };\n    };\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ })\n/******/ ]);\n});\n\n\n// WEBPACK FOOTER //\n// canvas-datagrid.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap dea47f3e3909cafff598","/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([], function () {\n    'use strict';\n    return function (self) {\n        self.defaults = {\n            attributes: [\n                ['allowColumnReordering', true],\n                ['allowColumnResize', true],\n                ['allowColumnResizeFromCell', false],\n                ['allowFreezingRows', false],\n                ['allowFreezingColumns', false],\n                ['allowMovingSelection', true],\n                ['allowRowHeaderResize', true],\n                ['allowRowReordering', false],\n                ['allowRowResize', true],\n                ['allowRowResizeFromCell', false],\n                ['allowSorting', true],\n                ['autoGenerateSchema', false],\n                ['autoResizeColumns', false],\n                ['borderDragBehavior', 'none'],\n                ['borderResizeZone', 10],\n                ['clearSettingsOptionText', 'Clear saved settings'],\n                ['columnHeaderClickBehavior', 'sort'],\n                ['columnSelectorHiddenText', '&nbsp;&nbsp;&nbsp;'],\n                ['columnSelectorText', 'Add/Remove columns'],\n                ['columnSelectorVisibleText', '\\u2713'],\n                ['contextHoverScrollAmount', 2],\n                ['contextHoverScrollRateMs', 5],\n                ['copyHeadersOnSelectAll', true],\n                ['copyText', 'Copy'],\n                ['debug', false],\n                ['editable', true],\n                ['ellipsisText', '...'],\n                ['filterOptionText', 'Filter %s'],\n                ['filterTextPrefix', '(filtered) '],\n                ['globalRowResize', false],\n                ['hideColumnText', 'Hide %s'],\n                ['maxAutoCompleteItems', 200],\n                ['multiLine', false],\n                ['name', ''],\n                ['pageUpDownOverlap', 1],\n                ['pasteText', 'Paste'],\n                ['persistantSelectionMode', false],\n                ['removeFilterOptionText', 'Remove filter on %s'],\n                ['reorderDeadZone', 3],\n                ['resizeScrollZone', 20],\n                ['rowGrabZoneSize', 5],\n                ['saveAppearance', true],\n                ['scrollAnimationPPSThreshold', 0.75],\n                ['scrollPointerLock', false],\n                ['scrollRepeatRate', 75],\n                ['selectionFollowsActiveCell', false],\n                ['selectionHandleBehavior', 'none'],\n                ['selectionMode', 'cell'],\n                ['selectionScrollIncrement', 20],\n                ['selectionScrollZone', 20],\n                ['showClearSettingsOption', true],\n                ['showColumnHeaders', true],\n                ['showColumnSelector', true],\n                ['showCopy', false],\n                ['showFilter', true],\n                ['showNewRow', false],\n                ['showOrderByOption', true],\n                ['showOrderByOptionTextAsc', 'Order by %s ascending'],\n                ['showOrderByOptionTextDesc', 'Order by %s descending'],\n                ['showPaste', false],\n                ['showPerformance', false],\n                ['showRowHeaders', true],\n                ['showRowNumbers', true],\n                ['snapToRow', false],\n                ['touchContextMenuTimeMs', 800],\n                ['touchDeadZone', 3],\n                ['touchEasingMethod', 'easeOutQuad'],\n                ['touchReleaseAcceleration', 1000],\n                ['touchReleaseAnimationDurationMs', 2000],\n                ['touchScrollZone', 20],\n                ['touchSelectHandleZone', 20],\n                ['touchZoomSensitivity', 0.005],\n                ['touchZoomMin', 0.5],\n                ['touchZoomMax', 1.75],\n                ['maxPixelRatio', 2],\n                ['tree', false],\n                ['treeHorizontalScroll', false]\n            ],\n            styles: [\n                ['activeCellBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['activeCellBorderColor', 'rgba(110, 168, 255, 1)'],\n                ['activeCellBorderWidth', 1],\n                ['activeCellColor', 'rgba(0, 0, 0, 1)'],\n                ['activeCellFont', '16px sans-serif'],\n                ['activeCellHoverBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['activeCellHorizontalAlignment', 'left'],\n                ['activeCellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['activeCellOverlayBorderColor', 'rgba(66, 133, 244, 1)'],\n                ['activeCellOverlayBorderWidth', 1],\n                ['activeCellPaddingBottom', 5],\n                ['activeCellPaddingLeft', 5],\n                ['activeCellPaddingRight', 5],\n                ['activeCellPaddingTop', 5],\n                ['activeCellSelectedBackgroundColor', 'rgba(236, 243, 255, 1)'],\n                ['activeCellSelectedColor', 'rgba(0, 0, 0, 1)'],\n                ['activeCellVerticalAlignment', 'center'],\n                ['activeColumnHeaderCellBackgroundColor', 'rgba(225, 225, 225, 1)'],\n                ['activeColumnHeaderCellColor', 'rgba(0, 0, 0, 1)'],\n                ['activeRowHeaderCellBackgroundColor', 'rgba(225, 225, 225, 1)'],\n                ['activeRowHeaderCellColor', 'rgba(0, 0, 0, 1)'],\n                ['autocompleteBottomMargin', 60],\n                ['autosizeHeaderCellPadding', 8],\n                ['autosizePadding', 5],\n                ['cellAutoResizePadding', 13],\n                ['cellBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['cellBorderColor', 'rgba(195, 199, 202, 1)'],\n                ['cellBorderWidth', 1],\n                ['cellColor', 'rgba(0, 0, 0, 1)'],\n                ['cellFont', '16px sans-serif'],\n                ['cellGridHeight', 250],\n                ['cellHeight', 24],\n                ['cellHeightWithChildGrid', 150],\n                ['cellHorizontalAlignment', 'left'],\n                ['cellHoverBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['cellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['cellPaddingBottom', 5],\n                ['cellPaddingLeft', 5],\n                ['cellPaddingRight', 5],\n                ['cellPaddingTop', 5],\n                ['cellSelectedBackgroundColor', 'rgba(236, 243, 255, 1)'],\n                ['cellSelectedColor', 'rgba(0, 0, 0, 1)'],\n                ['cellVerticalAlignment', 'center'],\n                ['cellWidth', 250],\n                ['cellWidthWithChildGrid', 250],\n                ['cellWhiteSpace', 'nowrap'],\n                ['cellLineHeight', 1],\n                ['cellLineSpacing', 3],\n                ['childContextMenuArrowColor', 'rgba(43, 48, 43, 1)'],\n                ['childContextMenuArrowHTML', '&#x25BA;'],\n                ['childContextMenuMarginLeft', -11],\n                ['childContextMenuMarginTop', -6],\n                ['columnHeaderCellBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['columnHeaderCellBorderColor', 'rgba(172, 172, 172, 1)'],\n                ['columnHeaderCellBorderWidth', 1],\n                ['columnHeaderCellCapBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['columnHeaderCellCapBorderColor', 'rgba(172, 172, 172, 1)'],\n                ['columnHeaderCellCapBorderWidth', 1],\n                ['columnHeaderCellColor', 'rgba(50, 50, 50, 1)'],\n                ['columnHeaderCellFont', '16px sans-serif'],\n                ['columnHeaderCellHeight', 25],\n                ['columnHeaderCellHorizontalAlignment', 'left'],\n                ['columnHeaderCellHoverBackgroundColor', 'rgba(235, 235, 235, 1)'],\n                ['columnHeaderCellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['columnHeaderCellPaddingBottom', 5],\n                ['columnHeaderCellPaddingLeft', 5],\n                ['columnHeaderCellPaddingRight', 5],\n                ['columnHeaderCellPaddingTop', 5],\n                ['columnHeaderCellVerticalAlignment', 'center'],\n                ['columnHeaderOrderByArrowBorderColor', 'rgba(195, 199, 202, 1)'],\n                ['columnHeaderOrderByArrowBorderWidth', 1],\n                ['columnHeaderOrderByArrowColor', 'rgba(155, 155, 155, 1)'],\n                ['columnHeaderOrderByArrowHeight', 8],\n                ['columnHeaderOrderByArrowMarginLeft', 0],\n                ['columnHeaderOrderByArrowMarginRight', 5],\n                ['columnHeaderOrderByArrowMarginTop', 6],\n                ['columnHeaderOrderByArrowWidth', 13],\n                ['contextFilterButtonBorder', 'solid 1px rgba(158, 163, 169, 1)'],\n                ['contextFilterButtonBorderRadius', '3px'],\n                ['contextFilterButtonHTML', '&#x25BC;'],\n                ['contextFilterInputBackground', 'rgba(255,255,255,1)'],\n                ['contextFilterInputBorder', 'solid 1px rgba(158, 163, 169, 1)'],\n                ['contextFilterInputBorderRadius', '0'],\n                ['contextFilterInputColor', 'rgba(0,0,0,1)'],\n                ['contextFilterInputFontFamily', 'sans-serif'],\n                ['contextFilterInputFontSize', '14px'],\n                ['contextFilterInvalidRegExpBackground', 'rgba(180, 6, 1, 1)'],\n                ['contextFilterInvalidRegExpColor', 'rgba(255, 255, 255, 1)'],\n                ['contextMenuArrowColor', 'rgba(43, 48, 43, 1)'],\n                ['contextMenuArrowDownHTML', '&#x25BC;'],\n                ['contextMenuArrowUpHTML', '&#x25B2;'],\n                ['contextMenuBackground', 'rgba(240, 240, 240, 1)'],\n                ['contextMenuBorder', 'solid 1px rgba(158, 163, 169, 1)'],\n                ['contextMenuBorderRadius', '3px'],\n                ['contextMenuChildArrowFontSize', '12px'],\n                ['contextMenuColor', 'rgba(43, 48, 43, 1)'],\n                ['contextMenuCursor', 'default'],\n                ['contextMenuFilterButtonFontFamily', 'sans-serif'],\n                ['contextMenuFilterButtonFontSize', '10px'],\n                ['contextMenuFilterInvalidExpresion', 'rgba(237, 155, 156, 1)'],\n                ['contextMenuFontFamily', 'sans-serif'],\n                ['contextMenuFontSize', '16px'],\n                ['contextMenuHoverBackground', 'rgba(182, 205, 250, 1)'],\n                ['contextMenuHoverColor', 'rgba(43, 48, 153, 1)'],\n                ['contextMenuItemBorderRadius', '3px'],\n                ['contextMenuItemMargin', '2px'],\n                ['contextMenuLabelDisplay', 'inline-block'],\n                ['contextMenuLabelMargin', '0 3px 0 0'],\n                ['contextMenuLabelMaxWidth', '700px'],\n                ['contextMenuLabelMinWidth', '75px'],\n                ['contextMenuMarginLeft', 3],\n                ['contextMenuMarginTop', -3],\n                ['contextMenuOpacity', '0.98'],\n                ['contextMenuPadding', '2px'],\n                ['contextMenuWindowMargin', 30],\n                ['contextMenuZIndex', 10000],\n                ['cornerCellBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['cornerCellBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['debugBackgroundColor', 'rgba(0, 0, 0, .0)'],\n                ['debugColor', 'rgba(255, 15, 24, 1)'],\n                ['debugEntitiesColor', 'rgba(76, 231, 239, 1.00)'],\n                ['debugFont', '11px sans-serif'],\n                ['debugPerfChartBackground', 'rgba(29, 25, 26, 1.00)'],\n                ['debugPerfChartTextColor', 'rgba(255, 255, 255, 0.8)'],\n                ['debugPerformanceColor', 'rgba(252, 255, 37, 1.00)'],\n                ['debugScrollHeightColor', 'rgba(248, 33, 103, 1.00)'],\n                ['debugScrollWidthColor', 'rgba(66, 255, 27, 1.00)'],\n                ['debugTouchPPSXColor', 'rgba(246, 102, 24, 1.00)'],\n                ['debugTouchPPSYColor', 'rgba(186, 0, 255, 1.00)'],\n                ['display', 'inline-block'],\n                ['editCellBackgroundColor', 'white'],\n                ['editCellBorder', 'solid 1px rgba(110, 168, 255, 1)'],\n                ['editCellBoxShadow', '0 2px 5px rgba(0,0,0,0.4)'],\n                ['editCellColor', 'black'],\n                ['editCellFontFamily', 'sans-serif'],\n                ['editCellFontSize', '16px'],\n                ['editCellPaddingLeft', 4],\n                ['editCellZIndex', 10000],\n                ['frozenMarkerHoverColor', 'rgba(236, 243, 255, 1)'],\n                ['frozenMarkerHoverBorderColor', 'rgba(110, 168, 255, 1)'],\n                ['frozenMarkerActiveColor', 'rgba(236, 243, 255, 1)'],\n                ['frozenMarkerActiveBorderColor', 'rgba(110, 168, 255, 1)'],\n                ['frozenMarkerColor', 'rgba(222, 222, 222, 1)'],\n                ['frozenMarkerBorderColor', 'rgba(168, 168, 168, 1)'],\n                ['frozenMarkerBorderWidth', 1],\n                ['frozenMarkerWidth', 2],\n                ['gridBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['gridBorderCollapse', 'collapse'],\n                ['gridBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['gridBorderWidth', 1],\n                ['height', 'auto'],\n                ['maxHeight', 'inherit'],\n                ['maxWidth', 'inherit'],\n                ['minColumnWidth', 45],\n                ['minHeight', 'inherit'],\n                ['minRowHeight', 24],\n                ['minWidth', 'inherit'],\n                ['mobileContextMenuMargin', 10],\n                ['mobileEditInputHeight', 30],\n                ['mobileEditFontFamily', 'sans-serif'],\n                ['mobileEditFontSize', '16px'],\n                ['moveOverlayBorderWidth', 1],\n                ['moveOverlayBorderColor', 'rgba(66, 133, 244, 1)'],\n                ['moveOverlayBorderSegments', '12, 7'],\n                ['name', 'default'],\n                ['overflowY', 'auto'],\n                ['overflowX', 'auto'],\n                ['reorderMarkerBackgroundColor', 'rgba(0, 0, 0, 0.1)'],\n                ['reorderMarkerBorderColor', 'rgba(0, 0, 0, 0.2)'],\n                ['reorderMarkerBorderWidth', 1.25],\n                ['reorderMarkerIndexBorderColor', 'rgba(66, 133, 244, 1)'],\n                ['reorderMarkerIndexBorderWidth', 2.75],\n                ['rowHeaderCellBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['rowHeaderCellBorderColor', 'rgba(200, 200, 200, 1)'],\n                ['rowHeaderCellBorderWidth', 1],\n                ['rowHeaderCellColor', 'rgba(50, 50, 50, 1)'],\n                ['rowHeaderCellFont', '16px sans-serif'],\n                ['rowHeaderCellHeight', 25],\n                ['rowHeaderCellHorizontalAlignment', 'left'],\n                ['rowHeaderCellHoverBackgroundColor', 'rgba(235, 235, 235, 1)'],\n                ['rowHeaderCellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['rowHeaderCellPaddingBottom', 5],\n                ['rowHeaderCellPaddingLeft', 5],\n                ['rowHeaderCellPaddingRight', 5],\n                ['rowHeaderCellPaddingTop', 5],\n                ['rowHeaderCellSelectedBackgroundColor', 'rgba(217, 217, 217, 1)'],\n                ['rowHeaderCellSelectedColor', 'rgba(50, 50, 50, 1)'],\n                ['rowHeaderCellVerticalAlignment', 'center'],\n                ['rowHeaderCellWidth', 57],\n                ['scrollBarActiveColor', 'rgba(125, 125, 125, 1)'],\n                ['scrollBarBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['scrollBarBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['scrollBarBorderWidth', 0.5],\n                ['scrollBarBoxBorderRadius', 4.125],\n                ['scrollBarBoxColor', 'rgba(192, 192, 192, 1)'],\n                ['scrollBarBoxMargin', 2],\n                ['scrollBarBoxMinSize', 15],\n                ['scrollBarBoxWidth', 8],\n                ['scrollBarCornerBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['scrollBarCornerBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['scrollBarWidth', 11],\n                ['selectionHandleBorderColor', 'rgba(255, 255, 255, 1)'],\n                ['selectionHandleBorderWidth', 1.5],\n                ['selectionHandleColor', 'rgba(66, 133, 244, 1)'],\n                ['selectionHandleSize', 8],\n                ['selectionHandleType', 'square'],\n                ['selectionOverlayBorderColor', 'rgba(66, 133, 244, 1)'],\n                ['selectionOverlayBorderWidth', 1],\n                ['treeArrowBorderColor', 'rgba(195, 199, 202, 1)'],\n                ['treeArrowBorderWidth', 1],\n                ['treeArrowClickRadius', 5],\n                ['treeArrowColor', 'rgba(155, 155, 155, 1)'],\n                ['treeArrowHeight', 8],\n                ['treeArrowMarginLeft', 0],\n                ['treeArrowMarginRight', 5],\n                ['treeArrowMarginTop', 6],\n                ['treeArrowWidth', 13],\n                ['treeGridHeight', 250],\n                ['width', 'auto']\n            ]\n        };\n    };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/defaults.js\n// module id = 0\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true, evil: true*/\n/*globals Reflect: false, HTMLElement: true, define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([\n    './component',\n    './defaults',\n    './draw',\n    './events',\n    './touch',\n    './intf',\n    './contextMenu',\n    './dom',\n    './publicMethods'\n], function context(component) {\n    'use strict';\n    component = component();\n    var modules = Array.prototype.slice.call(arguments);\n    function Grid(args) {\n        args = args || {};\n        var self = {};\n        self.isComponent = args.component === undefined;\n        self.isChildGrid = args.parentNode && /canvas-datagrid-(cell|tree)/.test(args.parentNode.nodeType);\n        if (self.isChildGrid) {\n            self.intf = {};\n        } else {\n            self.intf = self.isComponent ? eval('Reflect.construct(HTMLElement, [], new.target)')\n                : document.createElement('canvas');\n        }\n        self.args = args;\n        self.intf.args = args;\n        self.applyComponentStyle = component.applyComponentStyle;\n        self.hyphenateProperty = component.hyphenateProperty;\n        self.dehyphenateProperty = component.dehyphenateProperty;\n        self.createGrid = function grid(args) {\n            args.component = false;\n            return new Grid(args);\n        };\n        modules.forEach(function (module) {\n            module(self);\n        });\n        if (self.isChildGrid) {\n            self.shadowRoot = args.parentNode.shadowRoot;\n            self.parentNode = args.parentNode;\n        } else {\n            self.shadowRoot = self.intf.attachShadow({mode: 'open'});\n            self.parentNode = self.shadowRoot;\n        }\n        self.init();\n        return self.intf;\n    }\n    if (window.HTMLElement) {\n        Grid.prototype = Object.create(window.HTMLElement.prototype);\n    }\n    // export web component\n    if (window.customElements) {\n        Grid.observedAttributes = component.getObservableAttributes();\n        Grid.prototype.disconnectedCallback = component.disconnectedCallback;\n        Grid.prototype.attributeChangedCallback = component.attributeChangedCallback;\n        Grid.prototype.connectedCallback = component.connectedCallback;\n        Grid.prototype.adoptedCallback = component.adoptedCallback;\n        window.customElements.define('canvas-datagrid', Grid);\n    }\n    // export global\n    if (window && !window.canvasDatagrid && !window.require) {\n        window.canvasDatagrid = function (args) { return new Grid(args); };\n    }\n    // export amd loader\n    module.exports = function grid(args) {\n        args = args || {};\n        var i, tKeys = ['style', 'formatters', 'sorters', 'filters',\n                    'treeGridAttributes', 'cellGridAttributes', 'data', 'schema'];\n        if (window.customElements) {\n            i = document.createElement('canvas-datagrid');\n            Object.keys(args).forEach(function (argKey) {\n                // set data and parentNode after everything else\n                if (argKey === 'data') { return; }\n                if (argKey === 'parentNode') { return; }\n                // top level keys in args\n                if (tKeys.indexOf(argKey) !== -1) {\n                    tKeys.forEach(function (tKey) {\n                        if (args[tKey] === undefined || tKey !== argKey) { return; }\n                        if (['formatters', 'sorters', 'filters'].indexOf(argKey) !== -1) {\n                            if (typeof args[tKey] === 'object' && args[tKey] !== null) {\n                                Object.keys(args[tKey]).forEach(function (sKey) {\n                                    i[tKey][sKey] = args[tKey][sKey];\n                                });\n                            }\n                        } else {\n                            i[tKey] = args[tKey];\n                        }\n                    });\n                    return;\n                }\n                // all others are attribute level keys\n                i.attributes[argKey] = args[argKey];\n            });\n            if (args.data) {\n                i.data = args.data;\n            }\n            // add to the dom very last to avoid redraws\n            if (args.parentNode) {\n                args.parentNode.appendChild(i);\n            }\n            return i;\n        }\n        args.component = false;\n        i = new Grid(args);\n        if (args.parentNode && args.parentNode.appendChild) {\n            args.parentNode.appendChild(i);\n        }\n        return i;\n    };\n    return module.exports;\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/main.js\n// module id = 1\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine(['./defaults'], function (defaults) {\n    'use strict';\n    return function () {\n        var typeMap, component = {};\n        component.dehyphenateProperty = function hyphenateProperty(prop) {\n            prop = prop.replace('--cdg-', '');\n            var p = '', nextLetterCap;\n            Array.prototype.forEach.call(prop, function (char) {\n                if (nextLetterCap) {\n                    nextLetterCap = false;\n                    p += char.toUpperCase();\n                    return;\n                }\n                if (char === '-') {\n                    nextLetterCap = true;\n                    return;\n                }\n                p += char;\n            });\n            return p;\n        };\n        component.hyphenateProperty = function hyphenateProperty(prop, cust) {\n            var p = '';\n            Array.prototype.forEach.call(prop, function (char) {\n                if (char === char.toUpperCase()) {\n                    p += '-' + char.toLowerCase();\n                    return;\n                }\n                p += char;\n            });\n            return (cust ? '--cdg-' : '') + p;\n        };\n        function getDefaultItem(base, item) {\n            var i = {},\n                r;\n            defaults(i);\n            r = i.defaults[base].filter(function (i) {\n                return i[0].toLowerCase() === item.toLowerCase()\n                    || component.hyphenateProperty(i[0]) === item.toLowerCase()\n                    || component.hyphenateProperty(i[0], true) === item.toLowerCase();\n            })[0];\n            return r;\n        }\n        component.applyComponentStyle = function (supressChangeAndDrawEvents, intf) {\n            if (!intf.isComponent) { return; }\n            var cStyle = window.getComputedStyle(intf.tagName === 'CANVAS-DATAGRID' ? intf : intf.canvas, null),\n                defs = {};\n            intf.computedStyle = cStyle;\n            defaults(defs);\n            defs = defs.defaults.styles;\n            defs.forEach(function (def) {\n                var val;\n                val = cStyle.getPropertyValue(component.hyphenateProperty(def[0], true));\n                if (val === \"\") {\n                    val = cStyle.getPropertyValue(component.hyphenateProperty(def[0], false));\n                }\n                if (val !== \"\" && typeof val === 'string') {\n                    intf.setStyleProperty(def[0], typeMap[typeof def[1]](val\n                        .replace(/^\\s+/, '').replace(/\\s+$/, ''), def[1]), true);\n                }\n            });\n            if (!supressChangeAndDrawEvents && intf.dispatchEvent) {\n                requestAnimationFrame(function () { intf.resize(true); });\n                intf.dispatchEvent('stylechanged', intf.style);\n            }\n        };\n        typeMap = {\n            data: function (strData) {\n                try {\n                    return JSON.parse(strData);\n                } catch (e) {\n                    throw new Error('Cannot read JSON data in canvas-datagrid data.');\n                }\n            },\n            schema: function (strSchema) {\n                try {\n                    return JSON.parse(strSchema);\n                } catch (e) {\n                    throw new Error('Cannot read JSON data in canvas-datagrid schema attribute.');\n                }\n            },\n            number: function (strNum, def) {\n                var n = parseInt(strNum, 10);\n                return isNaN(n) ? def : n;\n            },\n            boolean: function (strBool) {\n                return (/true/i).test(strBool);\n            },\n            string: function (str) {\n                return str;\n            }\n        };\n        component.getObservableAttributes = function () {\n            var i = {}, attrs = ['data', 'schema', 'style', 'className', 'name'];\n            defaults(i);\n            i.defaults.attributes.forEach(function (attr) {\n                attrs.push(attr[0].toLowerCase());\n            });\n            return attrs;\n        };\n        component.disconnectedCallback = function () {\n            this.connected = false;\n        };\n        component.connectedCallback = function () {\n            var intf = this;\n            intf.parentDOMNode.innerHTML = \"\";\n            intf.parentDOMNode.appendChild(intf.canvas);\n            intf.connected = true;\n            component.observe(intf);\n            component.applyComponentStyle(true, intf);\n            intf.resize(true);\n        };\n        component.adoptedCallback = function () {\n            this.resize();\n        };\n        component.attributeChangedCallback = function (attrName, oldVal, newVal) {\n            var tfn, intf = this, def;\n            if (attrName === 'style') {\n                component.applyComponentStyle(false, intf);\n                return;\n            }\n            if (attrName === 'data') {\n                if (intf.dataType === 'application/x-canvas-datagrid') {\n                    intf.dataType = 'application/json+x-canvas-datagrid';\n                }\n                intf.args.data = newVal;\n                return;\n            }\n            if (attrName === 'schema') {\n                intf.args.schema = typeMap.schema(newVal);\n                return;\n            }\n            if (attrName === 'name') {\n                intf.name = newVal;\n                return;\n            }\n            if (attrName === 'class' || attrName === 'className') {\n                return;\n            }\n            def = getDefaultItem('attributes', attrName);\n            if (def) {\n                tfn = typeMap[typeof def[1]];\n                intf.attributes[def[0]] = tfn(newVal);\n                return;\n            }\n            if (/^on/.test(attrName)) {\n                intf.addEventListener('on' + attrName, function (e) {\n                    eval(newVal);\n                });\n            }\n            return;\n        };\n        component.observe = function (intf) {\n            var observer;\n            if (!window.MutationObserver) { return; }\n            intf.applyComponentStyle = function () { component.applyComponentStyle(false, intf); intf.resize(); };\n            /**\n             * Applies the computed css styles to the grid.  In some browsers, changing directives in attached style sheets does not automatically update the styles in this component.  It is necessary to call this method to update in these cases.\n             * @memberof canvasDatagrid\n             * @name applyComponentStyle\n             * @method\n             */\n            observer = new window.MutationObserver(function (mutations) {\n                var checkInnerHTML, checkStyle;\n                Array.prototype.forEach.call(mutations, function (mutation) {\n                    if (mutation.attributeName === 'class'\n                            || mutation.attributeName === 'style') {\n                        checkStyle = true;\n                        return;\n                    }\n                    if (mutation.target.nodeName === 'STYLE') {\n                        checkStyle = true;\n                        return;\n                    }\n                    if (mutation.target.parentNode\n                            && mutation.target.parentNode.nodeName === 'STYLE') {\n                        checkStyle = true;\n                        return;\n                    }\n                    if (mutation.target === intf && (mutation.addedNodes.length > 0 || mutation.type === 'characterData')) {\n                        checkInnerHTML = true;\n                    }\n                });\n                if (checkStyle) {\n                    intf.applyComponentStyle(false, intf);\n                }\n                if (checkInnerHTML) {\n                    if (intf.dataType === 'application/x-canvas-datagrid') {\n                        intf.dataType = 'application/json+x-canvas-datagrid';\n                    }\n                    intf.data = intf.innerHTML;\n                }\n            });\n            observer.observe(intf, { characterData: true, childList: true, attributes: true, subtree: true });\n            Array.prototype.forEach.call(document.querySelectorAll('style'), function (el) {\n                observer.observe(el, { characterData: true, childList: true, attributes: true, subtree: true });\n            });\n        };\n        return component;\n    };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/component.js\n// module id = 2\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true*/\n/*globals XMLSerializer: false, define: true, Blob: false, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([], function () {\n    'use strict';\n    return function (self) {\n        var perfCounters = [],\n            cachedImagesDrawn = false,\n            drawCount = 0,\n            perfWindowSize = 300,\n            entityCount = [],\n            hiddenFrozenColumnCount = 0,\n            scrollDebugCounters = [],\n            touchPPSCounters = [];\n        self.htmlImageCache = {};\n        // more heavyweight version than fillArray defined in intf.js\n        function fillArray(low, high, step, def) {\n            step = step || 1;\n            var i = [], x;\n            for (x = low; x <= high; x += step) {\n                i[x] = def === undefined ? x : (typeof def === 'function' ? def(x) : def);\n            }\n            return i;\n        }\n        function drawPerfLine(w, h, x, y, perfArr, arrIndex, max, color, useAbs) {\n            var i = w / perfArr.length,\n                r = h / max;\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.beginPath();\n            self.ctx.moveTo(x, y + h);\n            perfArr.forEach(function (n) {\n                var val = (arrIndex === undefined ? n : n[arrIndex]),\n                    cx,\n                    cy;\n                if (useAbs) {\n                    val = Math.abs(val);\n                }\n                cx = x + i;\n                cy = y + h - (val * r);\n                self.ctx.lineTo(cx, cy);\n                x += i;\n            });\n            self.ctx.moveTo(x + w, y + h);\n            self.ctx.strokeStyle = color;\n            self.ctx.stroke();\n        }\n        function drawOnAllImagesLoaded() {\n            var loaded = true;\n            Object.keys(self.htmlImageCache).forEach(function (html) {\n                if (!self.htmlImageCache[html].complete) {\n                    loaded = false;\n                }\n            });\n            if (loaded && !cachedImagesDrawn) {\n                cachedImagesDrawn = true;\n                self.draw();\n            }\n        }\n        function drawHtml(cell) {\n            var img,\n                v = cell.innerHTML || cell.formattedValue,\n                cacheKey = v.toString() + cell.rowIndex.toString() + cell.columnIndex.toString(), \n                x = cell.x + self.canvasOffsetLeft,\n                y = cell.y + self.canvasOffsetTop;\n            if (self.htmlImageCache[cacheKey]) {\n                img = self.htmlImageCache[cacheKey];\n                if (img.height !== cell.height || img.width !== cell.width) {\n                    // height and width of the cell has changed, invalidate cache\n                    self.htmlImageCache[cacheKey] = undefined;\n                } else {\n                    if (!img.complete) {\n                        return;\n                    }\n                    return self.ctx.drawImage(img, x, y);\n                }\n            } else {\n                cachedImagesDrawn = false;\n            }\n            img = new Image(cell.width, cell.height);\n            self.htmlImageCache[cacheKey] = img;\n            img.onload = function () {\n                self.ctx.drawImage(img, x, y);\n                drawOnAllImagesLoaded();\n            };\n            img.src = 'data:image/svg+xml;base64,' + btoa(\n                '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"' + cell.width + '\" height=\"' + cell.height + '\">\\n' +\n                    '<foreignObject class=\"node\" x=\"0\" y=\"0\" width=\"100%\" height=\"100%\">\\n' +\n                    '<body xmlns=\"http://www.w3.org/1999/xhtml\" style=\"margin:0;padding:0;\">\\n' +\n                    v + '\\n' +\n                    '</body>' +\n                    '</foreignObject>\\n' +\n                    '</svg>\\n'\n            );\n        }\n        function drawOrderByArrow(x, y) {\n            var mt = self.style.columnHeaderOrderByArrowMarginTop * self.scale,\n                ml = self.style.columnHeaderOrderByArrowMarginLeft * self.scale,\n                mr = self.style.columnHeaderOrderByArrowMarginRight * self.scale,\n                aw = self.style.columnHeaderOrderByArrowWidth * self.scale,\n                ah = self.style.columnHeaderOrderByArrowHeight * self.scale;\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillStyle = self.style.columnHeaderOrderByArrowColor;\n            self.ctx.strokeStyle = self.style.columnHeaderOrderByArrowBorderColor;\n            self.ctx.beginPath();\n            x = x + ml;\n            y = y + mt;\n            if (self.orderDirection === 'asc') {\n                self.ctx.moveTo(x, y);\n                self.ctx.lineTo(x + aw, y);\n                self.ctx.lineTo(x + (aw * 0.5), y + ah);\n                self.ctx.moveTo(x, y);\n            } else {\n                self.ctx.lineTo(x, y + ah);\n                self.ctx.lineTo(x + aw, y + ah);\n                self.ctx.lineTo(x + (aw * 0.5), y);\n                self.ctx.lineTo(x, y + ah);\n            }\n            self.ctx.stroke();\n            self.ctx.fill();\n            return ml + aw + mr;\n        }\n        function drawTreeArrow(cell, x, y) {\n            var mt = self.style.treeArrowMarginTop * self.scale,\n                mr = self.style.treeArrowMarginRight * self.scale,\n                ml = self.style.treeArrowMarginLeft * self.scale,\n                aw = self.style.treeArrowWidth * self.scale,\n                ah = self.style.treeArrowHeight * self.scale;\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillStyle = self.style.treeArrowColor;\n            self.ctx.strokeStyle = self.style.treeArrowBorderColor;\n            self.ctx.beginPath();\n            x = x + ml;\n            y = y + mt;\n            if (self.openChildren[cell.rowIndex]) {\n                self.ctx.moveTo(x, y);\n                self.ctx.lineTo(x + aw, y);\n                self.ctx.lineTo(x + (aw * 0.5), y + ah);\n                self.ctx.moveTo(x, y);\n            } else {\n                self.ctx.lineTo(x, y);\n                self.ctx.lineTo(x + ah, y + (aw * 0.5));\n                self.ctx.lineTo(x, y + aw);\n                self.ctx.lineTo(x, y);\n            }\n            self.ctx.stroke();\n            self.ctx.fill();\n            return ml + aw + mr;\n        }\n        function radiusRect(x, y, w, h, radius) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            var r = x + w, b = y + h;\n            self.ctx.beginPath();\n            self.ctx.moveTo(x + radius, y);\n            self.ctx.lineTo(r - radius, y);\n            self.ctx.quadraticCurveTo(r, y, r, y + radius);\n            self.ctx.lineTo(r, y + h - radius);\n            self.ctx.quadraticCurveTo(r, b, r - radius, b);\n            self.ctx.lineTo(x + radius, b);\n            self.ctx.quadraticCurveTo(x, b, x, b - radius);\n            self.ctx.lineTo(x, y + radius);\n            self.ctx.quadraticCurveTo(x, y, x + radius, y);\n        }\n        function fillRect(x, y, w, h) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillRect(x, y, w, h);\n        }\n        function strokeRect(x, y, w, h) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.strokeRect(x, y, w, h);\n        }\n        function fillText(text, x, y) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillText(text, x, y);\n        }\n        function fillCircle(x, y, r) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.beginPath();\n            self.ctx.arc(x, y, r, 0, 2 * Math.PI);\n            self.ctx.fill();\n        }\n        function strokeCircle(x, y, r) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.beginPath();\n            self.ctx.arc(x, y, r, 0, 2 * Math.PI);\n            self.ctx.stroke();\n        }\n        function clipFrozenArea(mode) {\n            // 0 both, 1 rows, 2 cols\n            // self.lastFrozenColumnPixel;\n            // self.lastFrozenRowPixel;\n            self.ctx.beginPath();\n            if (mode === 0) {\n                self.ctx.moveTo(self.lastFrozenColumnPixel, self.lastFrozenRowPixel);\n                self.ctx.lineTo(self.lastFrozenColumnPixel, self.height);\n                self.ctx.lineTo(self.width, self.height);\n                self.ctx.lineTo(self.width, self.lastFrozenRowPixel);\n            }\n            if (mode === 1) {\n                self.ctx.moveTo(0, self.lastFrozenRowPixel);\n                self.ctx.lineTo(0, self.height);\n                self.ctx.lineTo(self.width, self.height);\n                self.ctx.lineTo(self.width, self.lastFrozenRowPixel);\n            }\n            if (mode === 2) {\n                self.ctx.moveTo(self.lastFrozenColumnPixel, 0);\n                self.ctx.lineTo(self.width, 0);\n                self.ctx.lineTo(self.width, self.height);\n                self.ctx.lineTo(self.lastFrozenColumnPixel, self.height);\n            }\n            self.ctx.clip();\n        }\n        function fillHandle(x, y, r) {\n            if (self.style.selectionHandleType === 'circle') {\n                return fillCircle(x, y, r * 0.5);\n            }\n            fillRect(x - r * 0.5, y - r * 0.5, r, r);\n        }\n        function strokeHandle(x, y, r) {\n            if (self.style.selectionHandleType === 'circle') {\n                return strokeCircle(x, y, r * 0.5);\n            }\n            strokeRect(x - r * 0.5, y - r * 0.5, r, r);\n        }\n        function addselectionHandle(c, pos) {\n            var hw = self.style.selectionHandleSize,\n                p = {\n                    tr: function () {\n                        fillHandle(c.x + c.width, c.y, hw);\n                        strokeHandle(c.x + c.width, c.y, hw);\n                    },\n                    br: function () {\n                        fillHandle(c.x + c.width, c.y + c.height, hw);\n                        strokeHandle(c.x + c.width, c.y + c.height, hw);\n                    },\n                    tl: function () {\n                        fillHandle(c.x, c.y, hw);\n                        strokeHandle(c.x, c.y, hw);\n                    },\n                    bl: function () {\n                        fillHandle(c.x, c.y + c.height, hw);\n                        strokeHandle(c.x, c.y + c.height, hw);\n                    }\n                };\n            p[pos]();\n        }\n        function addBorderLine(c, pos) {\n            self.ctx.beginPath();\n            var p = {\n                t: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop);\n                },\n                r: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop + c.height);\n                },\n                b: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop + c.height);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop + c.height);\n                },\n                l: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop + c.height);\n                }\n            };\n            p[pos]();\n            self.ctx.stroke();\n        }\n        function addEllipsis(text, width) {\n            var c, w = 0;\n            if (self.ellipsisCache[text] && self.ellipsisCache[text][width]) {\n                return self.ellipsisCache[text][width];\n            }\n            //TODO Add ellipsis back when there is a fast way to do it\n            w = self.ctx.measureText(text).width;\n            self.ellipsisCache[text] = self.ellipsisCache[text] || {};\n            c = {value: text, width: w};\n            self.ellipsisCache[text][width] = c;\n            return c;\n        }\n        function wrapText(cell, splitChar) {\n            if (!cell.formattedValue) {\n                return { lines: [{width: 0, value: ''}], width: 0, height: cell.calculatedLineHeight };\n            }\n            var max = 0,\n                n = '\\n',\n                x,\n                word,\n                words = cell.formattedValue.split(splitChar),\n                textHeight = cell.calculatedLineHeight,\n                lines = [],\n                out = [],\n                wrap = self.style.cellWhiteSpace !== 'nowrap',\n                elWidth,\n                et = self.attributes.ellipsisText,\n                elClipLength,\n                plWidth,\n                clippedVal,\n                ogWordWidth,\n                previousLine,\n                line = {\n                    width: 0,\n                    value: ''\n                },\n                cHeight = wrap ? cell.paddedHeight : cell.calculatedLineHeight;\n            lines.push(line);\n            elWidth = self.ctx.measureText(' ' + et).width;\n            for (x = 0; x < words.length; x += 1) {\n                word = words[x];\n                var measure = self.ctx.measureText(word + splitChar);\n                if (line.width + measure.width + elWidth < cell.paddedWidth) {\n                    line.value += word + splitChar;\n                    line.width += measure.width;\n                    continue;\n                }\n                // if there is a hyphenated word that is too long\n                // split it and add the split set to the array\n                // then back up and re-read new split set\n                // this behavior seems right, it might not be\n                if (/\\w-\\w/.test(word) && cell.paddedWidth < measure.width) {\n                    words.splice(x, 1, word.split('-')[0] + '-', word.split('-')[1]);\n                    x -= 1;\n                    continue;\n                }\n                line = {\n                    width: measure.width,\n                    value: word + splitChar\n                };\n                if (x === 0) {\n                    lines = [];\n                    lines.push(line);\n                }\n                textHeight += cell.calculatedLineHeight;\n                if (textHeight > cHeight) {\n                    if (lines.length === 0) { break; }\n                    elClipLength = 1;\n                    previousLine = lines[lines.length - 1];\n                    if (previousLine.width < cell.paddedWidth && words.length === 1) { break; }\n                    clippedVal = previousLine.value + word;\n                    plWidth = self.ctx.measureText(clippedVal + et).width;\n                    var originText = clippedVal;\n                    if (plWidth > cell.paddedWidth) {\n                        var stepLength = parseInt(clippedVal.length / 2);\n                        var direction = -1;\n                        while (stepLength > 0) {\n                            clippedVal = originText.substr(0, stepLength * direction + clippedVal.length);\n                            plWidth = self.ctx.measureText(clippedVal + et).width;\n                            direction = plWidth > cell.paddedWidth ? -1 : 1;\n                            stepLength = parseInt(stepLength / 2);\n                        }\n                    }\n                    clippedVal = clippedVal + (originText.length != clippedVal.length ? et : '');\n                    previousLine.value = clippedVal;\n                    previousLine.width = plWidth;\n                    break;\n                }\n                if (x > 0) {\n                    lines.push(line);\n                }\n            }\n            return {\n                lines: lines,\n                width: max,\n                height: cell.calculatedLineHeight * lines.length\n            }\n        }\n        function drawText(cell) {\n            var ll = cell.text.lines.length,\n                h = (cell.fontHeight * cell.lineHeight),\n                x,\n                line,\n                wrap = self.style.cellWhiteSpace !== 'nowrap',\n                textHeight = 0;\n            for (x = 0; x < cell.text.lines.length; x += 1) {\n                line = cell.text.lines[x];\n                var vPos = Math.max((cell.height - (wrap ? cell.text.height : cell.calculatedLineHeight)) * 0.5, 0) + h,\n                    hPos = cell.paddingLeft + cell.treeArrowWidth + cell.orderByArrowWidth;\n                if (cell.horizontalAlignment === 'right') {\n                    hPos = cell.paddingLeft + cell.paddedWidth - line.width;\n                } else if (cell.horizontalAlignment === 'center') {\n                    hPos = cell.paddingLeft + ((cell.paddedWidth + cell.paddingRight) / 2) - (line.width / 2);\n                }\n                if (cell.verticalAlignment === 'top') {\n                    vPos = cell.calculatedLineHeight;\n                } else if (cell.verticalAlignment === 'bottom') {\n                    vPos = cell.height - cell.paddingBottom - cell.text.height;\n                }\n                line.height = h + cell.lineSpacing;\n                line.offsetLeft = hPos;\n                line.offsetTop = vPos;\n                line.x = cell.x + hPos;\n                line.y = cell.y + textHeight + vPos;\n                textHeight += line.height;\n                fillText(line.value, line.x, line.y);\n            }\n            if (self.attributes.debug && cell.active) {\n                requestAnimationFrame(function () {\n                    self.ctx.font = self.style.debugFont;\n                    self.ctx.fillStyle = self.style.debugColor;\n                    fillText(JSON.stringify({\n                        x: cell.x,\n                        y: cell.y,\n                        h: cell.height,\n                        w: cell.width,\n                        pw: cell.paddedWidth,\n                        idx: cell.columnIndex,\n                        idx_ord: cell.sortColumnIndex\n                    }, null, '\\t'),\n                        cell.x + 14, cell.y + 14);\n                    fillText(JSON.stringify(cell.text.lines.map(function (l) { return {w: l.width, v: l.value.length }; }), null, '\\t'),\n                        cell.x + 14, cell.y + 30);\n                });\n            }\n        }\n        function getFrozenColumnsWidth() {\n            var w = 0,\n                s = self.getSchema(),\n                x = 0,\n                n = Math.min(self.frozenColumn, s.length),\n                column;\n            hiddenFrozenColumnCount = 0;\n            while (x < n) {\n                column = s[x];\n                if (column.hidden) {\n                    hiddenFrozenColumnCount += 1;\n                } else {\n                    w += self.getColummnWidth(x);\n                }\n                x += 1;\n            }\n            return w;\n        }\n        /**\n         * Redraws the grid. No matter what the change, this is the only method required to refresh everything.\n         * @memberof canvasDatagrid\n         * @name draw\n         * @method\n         */\n         // r = literal row index\n         // rd = row data array\n         // i = user order index\n         // o = literal data index\n         // y = y drawing cursor\n         // x = x drawing cursor\n         // s = visible schema array\n         // cx = current x drawing cursor sub calculation var\n         // cy = current y drawing cursor sub calculation var\n         // a = static cell (like corner cell)\n         // p = perf counter\n         // l = data length\n         // u = current cell\n         // h = current height\n         // w = current width\n        self.draw = function (internal) {\n            if (self.dispatchEvent('beforedraw', {})) { return; }\n            if (!self.isChildGrid && (!self.height || !self.width)) {\n                return;\n            }\n            if (self.isChildGrid && internal) {\n                requestAnimationFrame(self.parentGrid.draw);\n                return;\n            }\n            if (self.intf.visible === false) {\n                return;\n            }\n            // initial values\n            var checkScrollHeight, rowHeaderCell, p, cx, cy, treeGrid, rowOpen,\n                rowHeight, cornerCell, y, x, c, h, w, s, r, rd, aCell,\n                data = (self.data || []),\n                bc = self.style.gridBorderCollapse === 'collapse',\n                selectionBorders = [],\n                moveBorders = [],\n                selectionHandles = [],\n                rowHeaders = [],\n                l = data.length,\n                u = self.currentCell || {},\n                columnHeaderCellHeight = self.getColumnHeaderCellHeight(),\n                rowHeaderCellWidth = self.getRowHeaderCellWidth(),\n                cellHeight = self.style.cellHeight;\n            drawCount += 1;\n            p = performance.now();\n            self.visibleRowHeights = [];\n            // if data length has changed, there is no way to know\n            if (data.length > self.orders.rows.length) {\n                self.createRowOrders();\n            }\n            function drawScrollBars() {\n                var drawCorner,\n                    en = self.scrollBox.entities,\n                    m = (self.style.scrollBarBoxMargin * 2);\n                self.ctx.strokeStyle = self.style.scrollBarBorderColor;\n                self.ctx.lineWidth = self.style.scrollBarBorderWidth;\n                en.horizontalBox.x = rowHeaderCellWidth + self.style.scrollBarBoxMargin\n                    + ((en.horizontalBar.width - self.scrollBox.scrollBoxWidth)\n                        * (self.scrollBox.scrollLeft / self.scrollBox.scrollWidth));\n                en.verticalBox.y = columnHeaderCellHeight + self.style.scrollBarBoxMargin\n                    + ((en.verticalBar.height - self.scrollBox.scrollBoxHeight)\n                        * (self.scrollBox.scrollTop / self.scrollBox.scrollHeight));\n                if (self.scrollBox.horizontalBarVisible) {\n                    self.ctx.fillStyle = self.style.scrollBarBackgroundColor;\n                    fillRect(en.horizontalBar.x, en.horizontalBar.y, en.horizontalBar.width + m, en.horizontalBar.height);\n                    strokeRect(en.horizontalBar.x, en.horizontalBar.y, en.horizontalBar.width + m, en.horizontalBar.height);\n                    self.ctx.fillStyle = self.style.scrollBarBoxColor;\n                    if (self.scrollBox.horizontalBoxVisible) {\n                        if (/horizontal/.test(u.context)) {\n                            self.ctx.fillStyle = self.style.scrollBarActiveColor;\n                        }\n                        radiusRect(en.horizontalBox.x, en.horizontalBox.y,\n                            en.horizontalBox.width, en.horizontalBox.height, self.style.scrollBarBoxBorderRadius);\n                        self.ctx.stroke();\n                        self.ctx.fill();\n                    }\n                    drawCorner = true;\n                    self.visibleCells.unshift(en.horizontalBar);\n                    self.visibleCells.unshift(en.horizontalBox);\n                }\n                if (self.scrollBox.verticalBarVisible) {\n                    self.ctx.fillStyle = self.style.scrollBarBackgroundColor;\n                    fillRect(en.verticalBar.x, en.verticalBar.y, en.verticalBar.width, en.verticalBar.height + m);\n                    strokeRect(en.verticalBar.x, en.verticalBar.y, en.verticalBar.width, en.verticalBar.height + m);\n                    if (self.scrollBox.verticalBoxVisible) {\n                        self.ctx.fillStyle = self.style.scrollBarBoxColor;\n                        if (/vertical/.test(u.context)) {\n                            self.ctx.fillStyle = self.style.scrollBarActiveColor;\n                        }\n                        radiusRect(en.verticalBox.x, en.verticalBox.y, en.verticalBox.width,\n                            en.verticalBox.height, self.style.scrollBarBoxBorderRadius);\n                        self.ctx.stroke();\n                        self.ctx.fill();\n                    }\n                    drawCorner = true;\n                    self.visibleCells.unshift(en.verticalBar);\n                    self.visibleCells.unshift(en.verticalBox);\n                }\n                if (drawCorner) {\n                    //corner\n                    self.ctx.strokeStyle = self.style.scrollBarCornerBorderColor;\n                    self.ctx.fillStyle = self.style.scrollBarCornerBackgroundColor;\n                    radiusRect(en.corner.x, en.corner.y, en.corner.width, en.corner.height, 0);\n                    self.ctx.stroke();\n                    self.ctx.fill();\n                    self.visibleCells.unshift(en.corner);\n                }\n            }\n            function createHandlesOverlayArray(cell) {\n                if (self.attributes.allowMovingSelection || self.mobile) {\n                    if (cell.selectionBorderTop && cell.selectionBorderRight && self.mobile) {\n                        selectionHandles.push([cell, 'tr']);\n                        cell.selectionHandle = 'tr';\n                    }\n                    if (cell.selectionBorderTop && cell.selectionBorderLeft && self.mobile) {\n                        selectionHandles.push([cell, 'tl']);\n                        cell.selectionHandle = 'tl';\n                    }\n                    if (cell.selectionBorderBottom && cell.selectionBorderLeft && self.mobile) {\n                        selectionHandles.push([cell, 'bl']);\n                        cell.selectionHandle = 'bl';\n                    }\n                    if (cell.selectionBorderBottom && cell.selectionBorderRight\n                            && (self.attributes.selectionHandleBehavior !== 'none' || self.mobile)) {\n                        selectionHandles.push([cell, 'br']);\n                        cell.selectionHandle = 'br';\n                    }\n                }\n            }\n            function createBorderOverlayArray(cell, drawArray, propPrefix, offsetPoint) {\n                offsetPoint = offsetPoint || {x: 0, y: 0};\n                cell.selectionBorder = '';\n                if (!cell.isRowHeader\n                        && self.selections[cell.rowIndex + -offsetPoint.y]\n                        && self.selections[cell.rowIndex + -offsetPoint.y].indexOf(cell.columnIndex + -offsetPoint.x) !== -1) {\n                    if ((!self.selections[cell.rowIndex - 1 + -offsetPoint.y]\n                            || self.selections[cell.rowIndex - 1 + -offsetPoint.y].indexOf(cell.columnIndex + -offsetPoint.x) === -1\n                            || cell.rowIndex === 0)\n                            && !cell.isHeader) {\n                        drawArray.push([cell, 't']);\n                        cell[propPrefix + 'BorderTop'] = true;\n                        cell[propPrefix + 'Border'] += 't';\n                    }\n                    if (!self.selections[cell.rowIndex + 1 + -offsetPoint.y]\n                            || self.selections[cell.rowIndex + 1 + -offsetPoint.y].indexOf(cell.columnIndex + -offsetPoint.x) === -1) {\n                        drawArray.push([cell, 'b']);\n                        cell[propPrefix + 'BorderBottom'] = true;\n                        cell[propPrefix + 'Border'] += 'b';\n                    }\n                    if (!self.selections[cell.rowIndex + -offsetPoint.y] || cell.columnIndex === 0\n                            || self.selections[cell.rowIndex + -offsetPoint.y].indexOf(cell.columnIndex - 1 + -offsetPoint.x) === -1) {\n                        drawArray.push([cell, 'l']);\n                        cell[propPrefix + 'BorderLeft'] = true;\n                        cell[propPrefix + 'Border'] += 'l';\n                    }\n                    if (!self.selections[cell.rowIndex + -offsetPoint.y] || cell.columnIndex === s.length\n                            || self.selections[cell.rowIndex + -offsetPoint.y].indexOf(cell.columnIndex + 1 + -offsetPoint.x) === -1) {\n                        drawArray.push([cell, 'r']);\n                        cell[propPrefix + 'BorderRight'] = true;\n                        cell[propPrefix + 'Border'] += 'r';\n                    }\n                }\n            }\n            function drawCell(d, rowOrderIndex, rowIndex) {\n                return function drawEach(header, headerIndex, columnOrderIndex) {\n                    if (header.hidden) { return 0; }\n                    var cellStyle = header.style || 'cell',\n                        cellGridAttributes,\n                        cell,\n                        isHeader = /HeaderCell/.test(cellStyle),\n                        isCorner = /cornerCell/.test(cellStyle),\n                        isRowHeader = 'rowHeaderCell' === cellStyle,\n                        isColumnHeader = 'columnHeaderCell' === cellStyle,\n                        selected = self.selections[rowOrderIndex] && self.selections[rowOrderIndex].indexOf(columnOrderIndex) !== -1,\n                        hovered = self.hovers.rowIndex === rowOrderIndex && self.hovers.columnIndex === columnOrderIndex,\n                        active = self.activeCell.rowIndex === rowOrderIndex && self.activeCell.columnIndex === columnOrderIndex,\n                        isColumnHeaderCellCap = cellStyle === 'columnHeaderCellCap',\n                        rawValue = d ? d[header.name] : undefined,\n                        isGrid = header.type === 'canvas-datagrid',\n                        activeHeader = (self.orders.rows[self.activeCell.rowIndex] === rowOrderIndex\n                                || self.orders.columns[self.activeCell.columnIndex] === headerIndex)\n                            && (columnOrderIndex === -1 || rowOrderIndex === -1)\n                            ? (isRowHeader ? 'activeRowHeaderCell' : 'activeColumnHeaderCell') : false,\n                        val,\n                        f = self.formatters[header.type || 'string'],\n                        orderByArrowSize = 0,\n                        treeArrowSize = 0,\n                        cellWidth = self.sizes.columns[headerIndex] || header.width,\n                        ev = {\n                            value: rawValue,\n                            row: d,\n                            header: header\n                        };\n                    if (isColumnHeaderCellCap) {\n                        cellWidth = w - x;\n                    }\n                    // if no data or schema are defined, a width is provided to the stub column\n                    if (cellWidth === undefined) {\n                        cellWidth = self.style.cellWidth;\n                    }\n                    cellWidth = cellWidth * self.scale;\n                    if (x + cellWidth + self.style.cellBorderWidth < 0) {\n                        x += cellWidth + self.style.cellBorderWidth;\n                    }\n                    if (active && cellStyle !== 'cornerCell') {\n                        cellStyle = 'activeCell';\n                    }\n                    if (self.visibleRows.indexOf(rowIndex) === -1 && !isHeader) {\n                        self.visibleRows.push(rowIndex);\n                    }\n                    val = self.dispatchEvent('formatcellvalue', ev);\n                    cx = x;\n                    cy = y;\n                    if (cellStyle === 'cornerCell') {\n                        cx = 0;\n                        cy = 0;\n                    } else if (isRowHeader) {\n                        cx = 0;\n                    } else if (isHeader) {\n                        cy = 0;\n                    }\n                    cell = {\n                        type: isGrid ? 'canvas-datagrid-cell' : header.type,\n                        style: cellStyle,\n                        nodeType: 'canvas-datagrid-cell',\n                        x: cx,\n                        y: cy,\n                        fontHeight: (self.style[cellStyle + 'FontHeight'] || 0) * self.scale,\n                        horizontalAlignment: self.style[cellStyle + 'HorizontalAlignment'],\n                        verticalAlignment: self.style[cellStyle + 'VerticalAlignment'],\n                        paddingLeft: (self.style[cellStyle + 'PaddingLeft'] || 0) * self.scale,\n                        paddingTop: (self.style[cellStyle + 'PaddingTop'] || 0) * self.scale,\n                        paddingRight: (self.style[cellStyle + 'PaddingRight'] || 0) * self.scale,\n                        paddingBottom: (self.style[cellStyle + 'PaddingBottom'] || 0) * self.scale,\n                        whiteSpace: self.style.cellWhiteSpace,\n                        lineHeight: self.style.cellLineHeight,\n                        lineSpacing: self.style.cellLineSpacing,\n                        offsetTop: self.canvasOffsetTop + cy,\n                        offsetLeft: self.canvasOffsetLeft + cx,\n                        scrollTop: self.scrollBox.scrollTop,\n                        scrollLeft: self.scrollBox.scrollLeft,\n                        active: active || activeHeader,\n                        hovered: hovered,\n                        selected: selected,\n                        width: cellWidth,\n                        height: cellHeight,\n                        offsetWidth: cellWidth,\n                        offsetHeight: cellHeight,\n                        parentNode: self.intf.parentNode,\n                        offsetParent: self.intf.parentNode,\n                        data: d,\n                        isCorner: isCorner,\n                        isHeader: isHeader,\n                        isColumnHeader: isColumnHeader,\n                        isColumnHeaderCellCap: isColumnHeaderCellCap,\n                        isRowHeader: isRowHeader,\n                        rowOpen: rowOpen,\n                        header: header,\n                        columnIndex: columnOrderIndex,\n                        rowIndex: rowOrderIndex,\n                        sortColumnIndex: headerIndex,\n                        sortRowIndex: rowIndex,\n                        isGrid: isGrid,\n                        isNormal: !isGrid && !isCorner && !isHeader,\n                        gridId: (self.attributes.name || '') + rowIndex + ':' + headerIndex,\n                        parentGrid: self.intf,\n                        innerHTML: '',\n                        activeHeader: activeHeader,\n                        value: isHeader && !isRowHeader ? (header.title || header.name) : rawValue\n                    };\n                    cell.calculatedLineHeight = (cell.fontHeight * cell.lineHeight) + cell.lineSpacing;\n                    cell.paddedWidth = cell.width - cell.paddingRight - cell.paddingLeft;\n                    cell.paddedHeight = cell.height - cell.paddingTop - cell.paddingBottom;\n                    ev.cell = cell;\n                    cell.userHeight = cell.isHeader ? self.sizes.rows[-1] : rowHeight;\n                    cell.userWidth = cell.isHeader ? self.sizes.columns.cornerCell : self.sizes.columns[headerIndex];\n                    self.visibleCells.unshift(cell);\n                    if (self.dispatchEvent('beforerendercell', ev)) { return; }\n                    self.ctx.fillStyle = self.style[cellStyle + 'BackgroundColor'];\n                    self.ctx.strokeStyle = self.style[cellStyle + 'BorderColor'];\n                    self.ctx.lineWidth = self.style[cellStyle + 'BorderWidth'];\n                    if (hovered) {\n                        self.ctx.fillStyle = self.style[cellStyle + 'HoverBackgroundColor'];\n                        self.ctx.strokeStyle = self.style[cellStyle + 'HoverBorderColor'];\n                    }\n                    if (selected) {\n                        self.ctx.fillStyle = self.style[cellStyle + 'SelectedBackgroundColor'];\n                        self.ctx.strokeStyle = self.style[cellStyle + 'SelectedBorderColor'];\n                    }\n                    if (activeHeader) {\n                        self.ctx.fillStyle = self.style[activeHeader + 'BackgroundColor'];\n                    }\n                    self.dispatchEvent('rendercell', ev);\n                    if (cell.isGrid) {\n                        if (cell.height !== rowHeight) {\n                            cell.height = rowHeight || self.style.cellHeightWithChildGrid;\n                            checkScrollHeight = true;\n                        }\n                        cell.width = self.sizes.columns[headerIndex] || self.style.cellWidthWithChildGrid;\n                    }\n                    if (rowOpen && !cell.isRowHeader) {\n                        cell.height = self.sizes.rows[rowIndex] || self.style.cellHeight;\n                    }\n                    if (!cell.isGrid) {\n                        fillRect(cx, cy, cell.width, cell.height);\n                        strokeRect(cx, cy, cell.width, cell.height);\n                    }\n                    self.ctx.save();\n                    radiusRect(cell.x, cell.y, cell.width, cell.height, 0);\n                    self.ctx.clip();\n                    self.dispatchEvent('afterrendercell', ev);\n                    if (cell.height !== cellHeight && !(rowOpen && !cell.isRowHeader)) {\n                        self.sizes.rows[isHeader ? -1 : rowIndex] = cell.height;\n                        checkScrollHeight = true;\n                    }\n                    if (cell.width !== cellWidth) {\n                        self.sizes.columns[headerIndex] = cell.width;\n                        checkScrollHeight = true;\n                    }\n                    if (isRowHeader && self.attributes.tree) {\n                        if (!self.dispatchEvent('rendertreearrow', ev)) {\n                            treeArrowSize = drawTreeArrow(cell, self.style[cellStyle + 'PaddingLeft'], cy, 0);\n                        }\n                    }\n                    if ((self.attributes.showRowNumbers && isRowHeader)\n                            || !isRowHeader) {\n                        if (cell.isGrid && !self.dispatchEvent('beforerendercellgrid', ev)) {\n                            if (!self.childGrids[cell.gridId]) {\n                                // HACK: this only allows setting of the child grids styles if data is set _after_\n                                // this is less than desirable.  An interface needs to be made to effect the\n                                // style of all cell grids.  One for individual grids already exists.\n                                cellGridAttributes = self.cellGridAttributes;\n                                cellGridAttributes.name = self.attributes.saveAppearance ? cell.gridId : undefined;\n                                cellGridAttributes.component = false;\n                                cellGridAttributes.parentNode = cell;\n                                cellGridAttributes.data = rawValue;\n                                ev.cellGridAttributes = cellGridAttributes;\n                                if (self.dispatchEvent('beforecreatecellgrid', ev)) { return; }\n                                self.childGrids[cell.gridId] = self.createGrid(cellGridAttributes);\n                                self.sizes.rows[rowIndex]\n                                    = self.sizes.rows[rowIndex] || self.style.cellGridHeight;\n                                checkScrollHeight = true;\n                            }\n                            cell.grid = self.childGrids[cell.gridId];\n                            cell.grid.parentNode = cell;\n                            cell.grid.visible = true;\n                            cell.grid.draw();\n                            self.dispatchEvent('rendercellgrid', ev);\n                        } else if (!cell.isGrid) {\n                            if (self.childGrids[cell.gridId]) {\n                                self.childGrids[cell.gridId].parentNode.offsetHeight = 0;\n                            }\n                            if (isHeader && self.orderBy === header.name) {\n                                if (!self.dispatchEvent('renderorderbyarrow', ev)) {\n                                    orderByArrowSize = drawOrderByArrow(cx + self.style[cellStyle + 'PaddingLeft'], 0);\n                                }\n                            }\n                            self.ctx.fillStyle = self.style[cellStyle + 'Color'];\n                            if (hovered) {\n                                self.ctx.fillStyle = self.style[cellStyle + 'HoverColor'];\n                            }\n                            if (selected) {\n                                self.ctx.fillStyle = self.style[cellStyle + 'SelectedColor'];\n                            }\n                            if (activeHeader) {\n                                self.ctx.fillStyle = self.style[activeHeader + 'Color'];\n                            }\n                            cell.treeArrowWidth = treeArrowSize;\n                            cell.orderByArrowWidth = orderByArrowSize;\n                            // create text ref to see if height needs to expand\n                            val = val !== undefined ? val : f\n                                ? f(ev) : '';\n                            if (val === undefined && !f) {\n                                val = '';\n                                console.warn('canvas-datagrid: Unknown format '\n                                    + header.type + ' add a cellFormater');\n                            }\n                            cell.formattedValue = ((val !== undefined && val !== null) ? val : '').toString();\n                            if (self.columnFilters && self.columnFilters[val] !== undefined && isHeader) {\n                                cell.formattedValue = self.attributes.filterTextPrefix + val;\n                            }\n                            self.ctx.font = (self.style[cellStyle + 'FontHeight'] * self.scale) + 'px ' + self.style[cellStyle + 'FontName'];\n                            if (!self.dispatchEvent('formattext', ev)) {\n                                cell.text = wrapText(cell, ' ');\n                            }\n                            if (!self.dispatchEvent('rendertext', ev)) {\n                                if (cell.innerHTML || header.type === 'html') {\n                                    drawHtml(cell);\n                                } else {\n                                    drawText(cell);\n                                }\n                            }\n                        }\n                    }\n                    if (active) {\n                        aCell = cell;\n                    }\n                    createBorderOverlayArray(cell, selectionBorders, 'selection');\n                    // createBorderOverlayArray calculates data for createHandlesOverlayArray so it must go 2nd\n                    createHandlesOverlayArray(cell);\n                    if (self.movingSelection) {\n                        createBorderOverlayArray(cell, moveBorders, 'move', self.moveOffset);\n                    }\n                    self.ctx.restore();\n                    x += cell.width + (bc ? 0 : self.style.cellBorderWidth);\n                    return cell.width;\n                };\n            }\n            function drawRowHeader(rowData, index, rowOrderIndex) {\n                var a, i;\n                if (self.attributes.showRowHeaders) {\n                    x = 0;\n                    i = index + 1;\n                    rowHeaderCell = {'rowHeaderCell': i };\n                    a = {\n                        name: 'rowHeaderCell',\n                        width: self.sizes.columns[-1] || self.style.rowHeaderCellWidth,\n                        style: 'rowHeaderCell',\n                        type: 'string',\n                        data: i,\n                        index: -1\n                    };\n                    rowOpen = self.openChildren[index];\n                    drawCell(rowHeaderCell, index, rowOrderIndex)(a, -1, -1);\n                }\n            }\n            function drawHeaders() {\n                var d, g = s.length, i, o, columnHeaderCell, header, nonFrozenHeaderWidth;\n                function drawHeaderColumnRange(start, end) {\n                    end = Math.min(end, g);\n                    for (o = start; o < end; o += 1) {\n                        i = self.orders.columns[o];\n                        header = s[i];\n                        if (!header.hidden) {\n                            d = {\n                                title: header.title,\n                                name: header.name,\n                                width: header.width || self.style.cellWidth,\n                                style: 'columnHeaderCell',\n                                type: 'string',\n                                index: o,\n                                order: i\n                            };\n                            columnHeaderCell = {'columnHeaderCell': header.title || header.name};\n                            x += drawCell(columnHeaderCell, -1, -1)(d, i, o);\n                            if (x > self.width + self.scrollBox.scrollLeft) {\n                                break;\n                            }\n                        }\n                    }\n                }\n                rowHeaders.forEach(function (rArgs, rhIndex) {\n                    y = rArgs[3];\n                    cellHeight = rArgs[4];\n                    if (rhIndex === self.frozenRow) {\n                        self.ctx.save();\n                        radiusRect(0, self.lastFrozenRowPixel, self.width, self.height - self.lastFrozenRowPixel, 0);\n                        self.ctx.clip();\n                    }\n                    drawRowHeader(rArgs[0], rArgs[1], rArgs[2]);\n                });\n                self.ctx.restore();\n                if (self.attributes.showColumnHeaders) {\n                    x = -self.scrollBox.scrollLeft + self.scrollPixelLeft + self.style.columnHeaderCellBorderWidth;\n                    if (self.attributes.showRowHeaders) {\n                        x += rowHeaderCellWidth;\n                    }\n                    y = 0;\n                    // cell height might have changed during drawing\n                    cellHeight = self.getColumnHeaderCellHeight();\n                    drawHeaderColumnRange(self.scrollIndexLeft, g);\n                    nonFrozenHeaderWidth = x;\n                    x = self.style.columnHeaderCellBorderWidth;\n                    if (self.attributes.showRowHeaders) {\n                        x += rowHeaderCellWidth;\n                    }\n                    drawHeaderColumnRange(0, self.frozenColumn);\n                    // fill in the space right of the headers\n                    x = nonFrozenHeaderWidth;\n                    if (x < w) {\n                        c = {\n                            name: '',\n                            width: self.style.scrollBarWidth,\n                            style: 'columnHeaderCellCap',\n                            isColumnHeaderCell: true,\n                            isColumnHeaderCellCap: true,\n                            type: 'string',\n                            index: s.length\n                        };\n                        drawCell({endCap: ''}, -1, -1)(c, -1, -1);\n                    }\n                    // fill in the space right of the headers\n                    if (self.attributes.showRowHeaders) {\n                        cornerCell = {'cornerCell': '' };\n                        x = 0;\n                        c = {\n                            name: 'cornerCell',\n                            width: self.style.rowHeaderCellWidth,\n                            style: 'cornerCell',\n                            type: 'string',\n                            index: -1\n                        };\n                        drawCell(cornerCell, -1, -1)(c, -1, -1);\n                    }\n                }\n            }\n            function drawRow(r, d) {\n                var i, treeHeight, rowSansTreeHeight, o, g = s.length;\n                if (y - (cellHeight * 2) > h) {\n                    return false;\n                }\n                rd = data[r];\n                rowOpen = self.openChildren[r];\n                rowSansTreeHeight = (self.sizes.rows[r] || self.style.cellHeight) * self.scale;\n                treeHeight = (rowOpen ? self.sizes.trees[r] : 0) * self.scale;\n                rowHeight = (rowSansTreeHeight + treeHeight);\n                if (y < -rowHeight) {\n                    return false;\n                }\n                if (self.attributes.showRowHeaders) {\n                    x += rowHeaderCellWidth;\n                }\n                cellHeight = rowHeight;\n                //draw normal columns\n                for (o = (self.scrollIndexLeft); o < g; o += 1) {\n                    i = self.orders.columns[o];\n                    x += drawCell(rd, r, d)(s[i], i, o);\n                    if (x > self.width) {\n                        self.scrollIndexRight = o;\n                        self.scrollPixelRight = x;\n                        break;\n                    }\n                }\n                //draw frozen columns\n                x = 0;\n                if (self.attributes.showRowHeaders) {\n                    x += rowHeaderCellWidth;\n                }\n                for (o = 0; o < self.frozenColumn; o += 1) {\n                    i = self.orders.columns[o];\n                    x += drawCell(rd, r, d)(s[i], i, o);\n                    if (x > self.width) {\n                        break;\n                    }\n                }\n                self.lastFrozenColumnPixel = x;\n                // cell height might have changed during drawing\n                cellHeight = rowHeight;\n                x = -self.scrollBox.scrollLeft + self.scrollPixelLeft + self.style.cellBorderWidth;\n                // don't draw a tree for the new row\n                treeGrid = self.childGrids[r];\n                if (r !== data.length && rowOpen) {\n                    treeGrid.visible = true;\n                    treeGrid.parentNode = {\n                        offsetTop: y + rowSansTreeHeight + self.canvasOffsetTop,\n                        offsetLeft: rowHeaderCellWidth - 1 + self.canvasOffsetLeft,\n                        offsetHeight: treeHeight,\n                        offsetWidth: self.width - rowHeaderCellWidth - self.style.scrollBarWidth - 1,\n                        offsetParent: self.intf.parentNode,\n                        parentNode: self.intf.parentNode,\n                        style: self.style,\n                        nodeType: 'canvas-datagrid-tree',\n                        scrollTop: self.scrollBox.scrollTop,\n                        scrollLeft: self.scrollBox.scrollLeft,\n                        rowIndex: r\n                    };\n                    self.visibleCells.unshift({\n                        rowIndex: r,\n                        columnIndex: 0,\n                        y: treeGrid.parentNode.offsetTop,\n                        x: treeGrid.parentNode.offsetLeft,\n                        height: treeGrid.height,\n                        width: treeGrid.width,\n                        style: 'tree-grid',\n                        type: treeGrid.parentNode.nodeType\n                    });\n                    treeGrid.draw();\n                } else if (treeGrid) {\n                    treeGrid.parentNode.offsetHeight = 0;\n                    delete self.sizes.trees[r];\n                }\n                rowHeaders.push([rd, r, d, y, rowHeight]);\n                self.visibleRowHeights[r] = rowHeight;\n                y += cellHeight + (bc ? 0 : self.style.cellBorderWidth);\n                return true;\n            }\n            function initDraw() {\n                self.visibleRows = [];\n                s = self.getSchema();\n                self.visibleCells = [];\n                self.canvasOffsetTop = self.isChildGrid ? self.parentNode.offsetTop : 0;\n                self.canvasOffsetLeft = self.isChildGrid ? self.parentNode.offsetLeft : 0;\n                h = self.height;\n                w = self.width;\n            }\n            function drawBackground() {\n                radiusRect(0, 0, w, h, 0);\n                self.ctx.clip();\n                self.ctx.fillStyle = self.style.gridBackgroundColor;\n                fillRect(0, 0, w, h);\n            }\n            function drawFrozenRows() {\n                var n, ln = Math.min(data.length, self.frozenRow);\n                x = -self.scrollBox.scrollLeft + self.scrollPixelLeft + self.style.cellBorderWidth;\n                y = columnHeaderCellHeight;\n                for (r = 0; r < ln; r += 1) {\n                    n = self.orders.rows[r];\n                    if (!drawRow(n, r)) {\n                        break;\n                    }\n                }\n                if (self.attributes.allowFreezingRows) {\n                    // HACK great, another stupid magic number.\n                    // Background will appear as a 0.5px artifact behind the row freeze bar without this hack\n                    y += self.style.frozenMarkerBorderWidth + self.style.frozenMarkerWidth - 0.4999999999;\n                }\n                self.lastFrozenRowPixel = y;\n            }\n            function drawRows() {\n                self.ctx.save();\n                if (self.frozenRow > 0) {\n                    radiusRect(0, self.lastFrozenRowPixel, self.width, self.height - self.lastFrozenRowPixel, 0);\n                    self.ctx.clip();\n                }\n                var o, n, i, g = s.length;\n                x = -self.scrollBox.scrollLeft + self.scrollPixelLeft + self.style.cellBorderWidth;\n                if (!self.attributes.snapToRow) {\n                    y += -self.scrollBox.scrollTop + self.scrollPixelTop + self.style.cellBorderWidth;\n                }\n                for (r = self.frozenRow + self.scrollIndexTop; r < l; r += 1) {\n                    n = self.orders.rows[r];\n                    self.scrollIndexBottom = r;\n                    self.scrollPixelBottom = y;\n                    if (!drawRow(n, r)) {\n                        break;\n                    }\n                }\n                if (self.attributes.showNewRow) {\n                    if (self.attributes.showRowHeaders) {\n                        x += rowHeaderCellWidth;\n                    }\n                    rowHeight = cellHeight = self.style.cellHeight;\n                    rowOpen = false;\n                    for (o = self.scrollIndexLeft; o < g; o += 1) {\n                        i = self.orders.columns[o];\n                        x += drawCell(self.newRow, data.length, data.length)(s[i], i, o);\n                        if (x > self.width + self.scrollBox.scrollLeft) {\n                            break;\n                        }\n                    }\n                    rowHeaders.push([self.newRow, data.length, data.length, y, rowHeight]);\n                }\n                self.ctx.restore();\n            }\n            function drawMoveMarkers() {\n                if (!self.movingSelection) { return; }\n                self.ctx.lineWidth = self.style.moveOverlayBorderWidth;\n                self.ctx.strokeStyle = self.style.moveOverlayBorderColor;\n                self.ctx.setLineDash(self.style.moveOverlayBorderSegments);\n                moveBorders.forEach(function (c) {\n                    addBorderLine(c[0], c[1]);\n                });\n                self.ctx.setLineDash([]);\n            }\n            function drawReorderMarkers() {\n                if (!self.reorderObject) { return; }\n                var b = {\n                        height: self.reorderObject.height,\n                        width: self.reorderObject.width,\n                        x: self.reorderObject.x + self.reorderObject.dragOffset.x,\n                        y: self.reorderObject.y + self.reorderObject.dragOffset.y\n                    },\n                    m = {\n                        width: w,\n                        height: h,\n                        x: 0,\n                        y: 0\n                    };\n                self.ctx.fillStyle = self.style.reorderMarkerBackgroundColor;\n                self.ctx.lineWidth = self.style.reorderMarkerBorderWidth;\n                self.ctx.strokeStyle = self.style.reorderMarkerBorderColor;\n                if (self.dragMode === 'row-reorder') {\n                    b.width = w;\n                    b.x = 0;\n                    m.width = w;\n                    m.height = self.currentCell.height;\n                    m.y = self.currentCell.y;\n                    fillRect(b.x, b.y, b.width, b.height);\n                    strokeRect(b.x, b.y, b.width, b.height);\n                    self.ctx.lineWidth = self.style.reorderMarkerIndexBorderWidth;\n                    self.ctx.strokeStyle = self.style.reorderMarkerIndexBorderColor;\n                    if (self.currentCell.rowIndex !== self.reorderObject.rowIndex\n                            && self.currentCell.rowIndex > -1\n                            && self.currentCell.rowIndex < l) {\n                        addBorderLine(m, self.reorderTarget.sortRowIndex > self.reorderObject.sortRowIndex ? 'b' : 't');\n                    }\n                } else if (self.dragMode === 'column-reorder' && self.reorderObject) {\n                    b.height = h;\n                    b.y = 0;\n                    m.height = h;\n                    m.width = self.currentCell.width;\n                    m.y = 0;\n                    m.x = self.currentCell.x;\n                    fillRect(b.x, b.y, b.width, b.height);\n                    strokeRect(b.x, b.y, b.width, b.height);\n                    self.ctx.lineWidth = self.style.reorderMarkerIndexBorderWidth;\n                    self.ctx.strokeStyle = self.style.reorderMarkerIndexBorderColor;\n                    if (self.currentCell.sortColumnIndex !== self.reorderObject.sortColumnIndex\n                            && self.currentCell.sortColumnIndex > -1\n                            && self.currentCell.sortColumnIndex < s.length) {\n                        addBorderLine(m, self.reorderTarget.columnIndex > self.reorderObject.columnIndex ? 'r' : 'l');\n                    }\n                }\n            }\n            function drawBorder() {\n                self.ctx.lineWidth = self.style.gridBorderWidth;\n                self.ctx.strokeStyle = self.style.gridBorderColor;\n                strokeRect(0, 0, self.width, self.height);\n            }\n            function drawSelectionBorders() {\n                self.ctx.lineWidth = self.style.selectionOverlayBorderWidth;\n                self.ctx.strokeStyle = self.style.selectionOverlayBorderColor;\n                function dsb(c) {\n                    addBorderLine(c[0], c[1]);\n                }\n                selectionBorders.filter(function (c) {\n                    return c[0].rowIndex < self.frozenRow && c[0].columnIndex < self.frozenColumn;\n                }).forEach(dsb);\n                self.ctx.save();\n                clipFrozenArea(0);\n                selectionBorders.filter(function (c) {\n                    return c[0].rowIndex >= self.frozenRow && c[0].columnIndex >= self.frozenColumn;\n                }).forEach(dsb);\n                self.ctx.restore();\n                self.ctx.save();\n                clipFrozenArea(1);\n                selectionBorders.filter(function (c) {\n                    return c[0].rowIndex >= self.frozenRow && c[0].columnIndex < self.frozenColumn;\n                }).forEach(dsb);\n                self.ctx.restore();\n                self.ctx.save();\n                clipFrozenArea(2);\n                selectionBorders.filter(function (c) {\n                    return c[0].rowIndex < self.frozenRow && c[0].columnIndex >= self.frozenColumn;\n                }).forEach(dsb);\n                self.ctx.restore();\n            }\n            function drawSelectionHandles() {\n                if (self.mobile || self.attributes.allowMovingSelection) {\n                    self.ctx.lineWidth = self.style.selectionHandleBorderWidth;\n                    self.ctx.strokeStyle = self.style.selectionHandleBorderColor;\n                    self.ctx.fillStyle = self.style.selectionHandleColor;\n                    selectionHandles.forEach(function (c) {\n                        addselectionHandle(c[0], c[1]);\n                        var az = self.attributes.touchSelectHandleZone / 2,\n                            ax = c[0].x + (c[1] === 'tl' || c[1] === 'bl' ? 0 : c[0].width) - az,\n                            ay = c[0].y + (c[1] === 'bl' || c[1] === 'br' ? c[0].height : 0) - az;\n                        self.visibleCells.unshift({\n                            x: ax,\n                            y: ay,\n                            height: self.style.selectionHandleSize + az,\n                            width: self.style.selectionHandleSize + az,\n                            style: 'selection-handle-' + c[1]\n                        });\n                    });\n                }\n            }\n            function drawActiveCell() {\n                if (!aCell) { return; }\n                self.ctx.save();\n                var cl = self.activeCell.columnIndex + 1 > self.frozenColumn || self.activeCell.rowIndex + 1 > self.frozenRow,\n                    acx = cl ? self.lastFrozenColumnPixel : 0,\n                    acy = cl ? self.lastFrozenRowPixel : 0,\n                    acw = cl ? self.width - self.lastFrozenColumnPixel : self.width,\n                    ach = cl ? self.height - self.lastFrozenRowPixel : self.height;\n                radiusRect(acx, acy, acw, ach, 0);\n                self.ctx.clip();\n                if (self.attributes.selectionMode === 'row') {\n                    if (self.activeCell && self.activeCell.rowIndex === aCell.rowIndex) {\n                        self.ctx.lineWidth = self.style.activeCellOverlayBorderWidth;\n                        self.ctx.strokeStyle = self.style.activeCellOverlayBorderColor;\n                        strokeRect(0, aCell.y, self.getHeaderWidth() + rowHeaderCellWidth, self.visibleRowHeights[aCell.rowIndex]);\n                    }\n                } else {\n                    self.ctx.lineWidth = self.style.activeCellOverlayBorderWidth;\n                    self.ctx.strokeStyle = self.style.activeCellOverlayBorderColor;\n                    strokeRect(aCell.x, aCell.y, aCell.width, aCell.height);\n                }\n                self.ctx.restore();\n            }\n            function drawFrozenMarkers() {\n                var my = self.lastFrozenRowPixel - self.style.frozenMarkerWidth,\n                    mx = self.lastFrozenColumnPixel - self.style.frozenMarkerBorderWidth,\n                    xHover = self.currentCell && self.currentCell.style === 'frozen-row-marker',\n                    yHover = self.currentCell && self.currentCell.style === 'frozen-column-marker';\n                self.ctx.lineWidth = self.style.frozenMarkerBorderWidth;\n                if (self.attributes.allowFreezingColumns) {\n                    self.ctx.fillStyle = yHover ? self.style.frozenMarkerHoverColor : self.style.frozenMarkerColor;\n                    self.ctx.strokeStyle = yHover ? self.style.frozenMarkerHoverBorderColor : self.style.frozenMarkerBorderColor;\n                    fillRect(mx, 0, self.style.frozenMarkerWidth, self.height);\n                    strokeRect(mx, 0, self.style.frozenMarkerWidth, self.height);\n                    self.visibleCells.unshift({\n                        x: mx,\n                        y: 0,\n                        height: self.height,\n                        width: self.style.frozenMarkerWidth + self.style.frozenMarkerBorderWidth,\n                        style: 'frozen-column-marker'\n                    });\n                }\n                if (self.attributes.allowFreezingRows) {\n                    self.ctx.fillStyle = xHover ? self.style.frozenMarkerHoverColor : self.style.frozenMarkerColor;\n                    self.ctx.strokeStyle = xHover ? self.style.frozenMarkerHoverBorderColor : self.style.frozenMarkerBorderColor;\n                    fillRect(0, my, self.width, self.style.frozenMarkerWidth);\n                    strokeRect(0, my, self.width, self.style.frozenMarkerWidth);\n                    self.visibleCells.unshift({\n                        x: 0,\n                        y: my,\n                        height: self.style.frozenMarkerWidth + self.style.frozenMarkerBorderWidth,\n                        width: self.width,\n                        style: 'frozen-row-marker'\n                    });\n                }\n                if (self.freezeMarkerPosition) {\n                    self.ctx.fillStyle = self.style.frozenMarkerActiveColor;\n                    self.ctx.strokeStyle = self.style.frozenMarkerActiveBorderColor;\n                    if (self.dragMode === 'frozen-column-marker') {\n                        fillRect(self.freezeMarkerPosition.x, 0, self.style.frozenMarkerWidth, self.height);\n                        strokeRect(self.freezeMarkerPosition.x, 0, self.style.frozenMarkerWidth, self.height);\n                    } else {\n                        fillRect(0, self.freezeMarkerPosition.y, self.width, self.style.frozenMarkerWidth);\n                        strokeRect(0, self.freezeMarkerPosition.y, self.width, self.style.frozenMarkerWidth);\n                    }\n                }\n            }\n            function drawPerfLines() {\n                if (!self.attributes.showPerformance) { return; }\n                var pw = 250,\n                    px = self.width - pw - self.style.scrollBarWidth - (self.style.scrollBarBorderWidth * 2),\n                    py = columnHeaderCellHeight,\n                    ph = 100;\n                if (scrollDebugCounters.length === 0) { scrollDebugCounters = fillArray(0, perfWindowSize, 1, function () { return [0, 0]; }); }\n                if (touchPPSCounters.length === 0) { touchPPSCounters = fillArray(0, perfWindowSize, 1, function () { return [0, 0]; }); }\n                if (entityCount.length === 0) { entityCount = fillArray(0, perfWindowSize, 1, 0); }\n                self.ctx.lineWidth = 0.5;\n                function dpl(name, perfArr, arrIndex, max, color, useAbs, rowIndex) {\n                    var v;\n                    drawPerfLine(pw, ph, px, py, perfArr, arrIndex, max, color, useAbs);\n                    self.ctx.fillStyle = color;\n                    fillRect(3 + px, py + 9 + (rowIndex * 11), 8, 8);\n                    self.ctx.fillStyle = self.style.debugPerfChartTextColor;\n                    v = arrIndex !== undefined ? perfArr[0][arrIndex] : perfArr[0];\n                    fillText(name + ' ' + (isNaN(v) ? 0 : v).toFixed(3), 14 + px, py + 16 + (rowIndex * 11));\n                }\n                self.ctx.textAlign = 'left';\n                self.ctx.font = self.style.debugFont;\n                self.ctx.fillStyle = self.style.debugPerfChartBackground;\n                fillRect(px, py, pw, ph);\n                [['Scroll Height', scrollDebugCounters, 0, self.scrollBox.scrollHeight, self.style.debugScrollHeightColor, false],\n                    ['Scroll Width', scrollDebugCounters, 1, self.scrollBox.scrollWidth, self.style.debugScrollWidthColor, false],\n                    ['Performance', perfCounters, undefined, 200, self.style.debugPerformanceColor, false],\n                    ['Entities', entityCount, undefined, 1500, self.style.debugEntitiesColor, false],\n                    ['TouchPPSX', touchPPSCounters, 0, 1000, self.style.debugTouchPPSXColor, true],\n                    ['TouchPPSY', touchPPSCounters, 1, 1000, self.style.debugTouchPPSYColor, true]\n                    ].forEach(function (i, index) {\n                    i.push(index);\n                    dpl.apply(null, i);\n                });\n                self.ctx.fillStyle = self.style.debugPerfChartBackground;\n                entityCount.pop();\n                entityCount.unshift(self.visibleCells.length);\n                scrollDebugCounters.pop();\n                scrollDebugCounters.unshift([self.scrollBox.scrollTop, self.scrollBox.scrollLeft]);\n                touchPPSCounters.pop();\n                touchPPSCounters.unshift([self.yPPS, self.xPPS]);\n            }\n            function drawDebug() {\n                self.ctx.save();\n                var d;\n                if (self.attributes.showPerformance || self.attributes.debug) {\n                    if (perfCounters.length === 0) { perfCounters = fillArray(0, perfWindowSize, 1, 0); }\n                    perfCounters.pop();\n                    perfCounters.unshift(performance.now() - p);\n                }\n                if (!self.attributes.debug) {\n                    self.ctx.restore();\n                    return;\n                }\n                self.ctx.font = self.style.debugFont;\n                d = {};\n                d.perf = (perfCounters.reduce(function (a, b) {\n                    return a + b;\n                }, 0) / Math.min(drawCount, perfCounters.length)).toFixed(1);\n                d.perfDelta = perfCounters[0].toFixed(1);\n                d.frozenColumnsWidth = getFrozenColumnsWidth();\n                d.htmlImages = Object.keys(self.htmlImageCache).length;\n                d.reorderObject = 'x: ' + (self.reorderObject || {columnIndex: 0}).columnIndex + ', y: ' + (self.reorderObject || {rowIndex: 0}).rowIndex;\n                d.reorderTarget = 'x: ' + (self.reorderTarget || {columnIndex: 0}).columnIndex + ', y: ' + (self.reorderTarget || {rowIndex: 0}).rowIndex;\n                d.scale = self.scale;\n                d.startScale = self.startScale;\n                d.scaleDelta = self.scaleDelta;\n                d.zoomDeltaStart = self.zoomDeltaStart;\n                d.touchLength = self.touchLength;\n                d.touches = 'y0: ' + (self.touchPosition || {y: 0}).y + ' y1: ' + (self.touchPosition1 || {y: 0}).y;\n                d.scrollBox = self.scrollBox.toString();\n                d.scrollIndex = 'x: ' + self.scrollIndexLeft + ', y: ' + self.scrollIndexTop;\n                d.scrollPixel = 'x: ' + self.scrollPixelLeft + ', y: ' + self.scrollPixelTop;\n                d.canvasOffset = 'x: ' + self.canvasOffsetLeft + ', y: ' + self.canvasOffsetTop;\n                d.touchDelta = 'x: ' + self.touchDelta.x + ', y: ' + self.touchDelta.y;\n                d.touchAnimateTo = 'x: ' + self.touchAnimateTo.x + ', y: ' + self.touchAnimateTo.y;\n                d.scrollAnimation = 'x: ' + self.scrollAnimation.x + ', y: ' + self.scrollAnimation.y;\n                d.touchPPS = 'x: ' + self.xPPS + ', y: ' + self.yPPS;\n                d.touchPPST = 'x: ' + self.xPPST + ', y: ' + self.yPPST;\n                d.touchDuration = self.touchDuration;\n                d.pointerLockPosition =  self.pointerLockPosition ?\n                        self.pointerLockPosition.x + ', ' + self.pointerLockPosition.y : '';\n                d.size = 'w: ' + self.width + ', h: ' + self.height;\n                d.mouse = 'x: ' + self.mouse.x + ', y: ' + self.mouse.y;\n                d.touch = !self.touchStart\n                    ? '' : 'x: ' + self.touchStart.x + ', y: ' + self.touchStart.y;\n                d.entities = self.visibleCells.length;\n                d.hasFocus = self.hasFocus;\n                d.dragMode = self.dragMode;\n                if (self.currentCell) {\n                    d.columnIndex = self.currentCell.columnIndex;\n                    d.rowIndex = self.currentCell.rowIndex;\n                    d.sortColumnIndex = self.currentCell.sortColumnIndex;\n                    d.sortRowIndex = self.currentCell.sortRowIndex;\n                    d.context = self.currentCell.context;\n                    d.dragContext = self.currentCell.dragContext;\n                    d.style = self.currentCell.style;\n                    d.type = self.currentCell.type;\n                }\n                self.ctx.textAlign = 'right';\n                self.ctx.fillStyle = self.style.debugBackgroundColor;\n                fillRect(0, 0, self.width, self.height);\n                Object.keys(d).forEach(function (key, index) {\n                    var m = key + ': ' + d[key],\n                        lh = 14;\n                    self.ctx.fillStyle = self.style.debugColor;\n                    fillText(m, w - 20, (self.attributes.showPerformance ? 140 : 24) + (index * lh));\n                });\n                self.ctx.restore();\n            }\n            self.ctx.save();\n            initDraw();\n            drawBackground();\n            drawFrozenRows();\n            drawRows();\n            drawActiveCell();\n            drawHeaders();\n            drawFrozenMarkers();\n            drawSelectionHandles();\n            drawReorderMarkers();\n            drawMoveMarkers();\n            drawBorder();\n            drawSelectionBorders();\n            drawScrollBars();\n            if (checkScrollHeight) {\n                self.resize(true);\n            }\n            drawDebug();\n            drawPerfLines();\n            if (self.dispatchEvent('afterdraw', {})) { return; }\n            self.ctx.restore();\n        };\n    };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/draw.js\n// module id = 3\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true, plusplus: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([], function () {\n    'use strict';\n    return function (self) {\n        var wheeling;\n        self.stopPropagation = function (e) { e.stopPropagation(); };\n        /**\n         * Adds an event listener to the given event.\n         * @memberof canvasDatagrid\n         * @name addEventListener\n         * @method\n         * @param {string} ev The name of the event to subscribe to.\n         * @param {function} fn The event procedure to execute when the event is raised.\n         */\n        self.addEventListener = function (ev, fn) {\n            self.events[ev] = self.events[ev] || [];\n            self.events[ev].unshift(fn);\n        };\n        /**\n         * Removes the given listener function from the given event.  Must be an actual reference to the function that was bound.\n         * @memberof canvasDatagrid\n         * @name removeEventListener\n         * @method\n         * @param {string} ev The name of the event to unsubscribe from.\n         * @param {function} fn The event procedure to execute when the event is raised.\n         */\n        self.removeEventListener = function (ev, fn) {\n            (self.events[ev] || []).forEach(function removeEachListener(sfn, idx) {\n                if (fn === sfn) {\n                    self.events[ev].splice(idx, 1);\n                }\n            });\n        };\n        /**\n         * Fires the given event, padding an event object to the event subscribers.\n         * @memberof canvasDatagrid\n         * @name dispatchEvent\n         * @method\n         * @param {number} ev The name of the event to dispatch.\n         * @param {number} e The event object.\n         */\n        self.dispatchEvent = function (ev, e) {\n            e = ev.type ? ev : (e || {});\n            ev = ev.type || ev;\n            var defaultPrevented;\n            function preventDefault() {\n                defaultPrevented = true;\n            }\n            if (!self.events[ev]) { return; }\n            self.events[ev].forEach(function dispatchEachEvent(fn) {\n                e.ctx = self.ctx;\n                e.preventDefault = preventDefault;\n                fn.apply(self.intf, [e]);\n            });\n            return defaultPrevented;\n        };\n        self.getRatio = function () {\n            return Math.min(self.attributes.maxPixelRatio, (window.devicePixelRatio || 1) /\n                (self.ctx.webkitBackingStorePixelRatio ||\n                    self.ctx.mozBackingStorePixelRatio ||\n                    self.ctx.msBackingStorePixelRatio ||\n                    self.ctx.oBackingStorePixelRatio ||\n                    self.ctx.backingStorePixelRatio || 1));\n        };\n        self.resize = function (drawAfterResize) {\n            if (!self.canvas) { return; }\n            var x,\n                v = {\n                    x: 0,\n                    y: 0,\n                    height: 0,\n                    width: 0,\n                    style: 'vertical-scroll-bar'\n                },\n                n = {\n                    x: 0,\n                    y: 0,\n                    height: 0,\n                    width: 0,\n                    style: 'horizontal-scroll-bar'\n                },\n                vb = {\n                    x: 0,\n                    y: 0,\n                    height: 0,\n                    width: 0,\n                    style: 'vertical-scroll-box'\n                },\n                nb = {\n                    x: 0,\n                    y: 0,\n                    height: 0,\n                    width: 0,\n                    style: 'horizontal-scroll-box'\n                },\n                co = {\n                    x: 0,\n                    y: 0,\n                    height: 0,\n                    width: 0,\n                    isCorner: true,\n                    isScrollBoxCorner: true,\n                    style: 'scroll-box-corner'\n                },\n                m = (self.style.scrollBarBoxMargin * 2),\n                b = (self.style.scrollBarBorderWidth * 2),\n                d = self.style.scrollBarBoxMargin * 0.5,\n                sbw = self.style.scrollBarWidth + (self.style.scrollBarBorderWidth * 2),\n                ratio = self.getRatio(),\n                bm = self.style.gridBorderCollapse === 'collapse' ? 1 : 2,\n                cellBorder = self.style.cellBorderWidth * bm,\n                columnHeaderCellBorder = self.style.columnHeaderCellBorderWidth * bm,\n                dataHeight = 0,\n                dataWidth = 0,\n                dims,\n                l = (self.data || []).length,\n                columnHeaderCellHeight = self.getColumnHeaderCellHeight(),\n                rowHeaderCellWidth = self.getRowHeaderCellWidth(),\n                ch = self.style.cellHeight,\n                s = self.getSchema();\n            // sets actual DOM canvas element\n            function checkScrollBoxVisibility() {\n                self.scrollBox.horizontalBarVisible = (self.style.width !== 'auto' && dataWidth > self.scrollBox.width && self.style.overflowX !== 'hidden')\n                    || self.style.overflowX === 'scroll';\n                self.scrollBox.horizontalBoxVisible = dataWidth > self.scrollBox.width;\n                self.scrollBox.verticalBarVisible = (self.style.height !== 'auto' && dataHeight > self.scrollBox.height && self.style.overflowY !== 'hidden')\n                    || self.style.overflowY === 'scroll';\n                self.scrollBox.verticalBoxVisible = dataHeight > self.scrollBox.height;\n            }\n            function setScrollBoxSize() {\n                self.scrollBox.width = self.width - rowHeaderCellWidth;\n                self.scrollBox.height = self.height - columnHeaderCellHeight;\n            }\n            function setCanvasSize() {\n                if (self.isChildGrid) {\n                    return;\n                }\n                dims = {\n                    // HACK +1 ? maybe it's a magic cell border?  Required to line up properly in auto height mode.\n                    height: columnHeaderCellHeight + dataHeight + cellBorder + 1,\n                    width: dataWidth + rowHeaderCellWidth + cellBorder\n                };\n                ['width', 'height'].forEach(function (dim) {\n                    //TODO: support inherit\n                    if (['auto', undefined].indexOf(self.style[dim]) !== -1\n                            && ['auto', undefined].indexOf(self.appliedInlineStyles[dim]) !== -1) {\n                        self.parentNodeStyle[dim] = dims[dim] + 'px';\n                    } else {\n                        self.parentNodeStyle[dim] = self.style[dim];\n                        if (self.isComponet) {\n                            self.canvas.style[dim] = self.style[dim];\n                        }\n                    }\n                });\n            }\n            self.scrollCache.x = [];\n            self.scrollCache.y = [];\n            for (x = 0; x < l; x += 1) {\n                self.scrollCache.y[x] = dataHeight;\n                dataHeight += (((self.sizes.rows[x] || ch) + (self.sizes.trees[x] || 0)) * self.scale)\n                    // HACK? if an expanded tree row is frozen it is necessary to add the tree row's height a second time.\n                    + (self.frozenRow > x ? (self.sizes.trees[x] || 0) : 0);\n            }\n            if (l > 1) {\n                self.scrollCache.y[x] = dataHeight;\n            }\n            dataWidth = s.reduce(function reduceSchema(accumulator, column, columnIndex) {\n                // intentional redefintion of column.  This causes scrollCache to be in the correct order\n                column = s[self.orders.columns[columnIndex]];\n                if (column.hidden) {\n                    self.scrollCache.x[columnIndex] = accumulator;\n                    return accumulator;\n                }\n                var va = accumulator + self.getColummnWidth(self.orders.columns[columnIndex]);\n                self.scrollCache.x[columnIndex] = va;\n                return va;\n            }, 0) || 0;\n            if (self.attributes.showNewRow) {\n                dataHeight += ch;\n            }\n            if (self.attributes.snapToRow) {\n              dataHeight += self.style.cellHeight;\n            }\n            setCanvasSize();\n            if (self.isChildGrid) {\n                self.width = self.parentNode.offsetWidth;\n                self.height = self.parentNode.offsetHeight;\n            } else if (self.height !== self.canvas.offsetHeight || self.width !== self.canvas.offsetWidth) {\n                self.height = self.canvas.offsetHeight;\n                self.width = self.canvas.offsetWidth;\n                self.canvasOffsetLeft = self.args.canvasOffsetLeft || 0;\n                self.canvasOffsetTop = self.args.canvasOffsetTop || 0;\n            }\n            /// calculate scroll bar dimensions\n            // non-controversial\n            self.scrollBox.top = columnHeaderCellHeight + columnHeaderCellBorder;\n            self.scrollBox.left = rowHeaderCellWidth;\n            // width and height of scroll box\n            setScrollBoxSize();\n            // is the data larger than the scroll box\n            checkScrollBoxVisibility();\n            // if the scroll box is visible, make room for it by expanding the size of the element\n            // if the other dimension is set to auto\n            if (self.scrollBox.horizontalBarVisible) {\n                if (self.style.height === 'auto' && !self.isChildGrid) {\n                    self.height += sbw;\n                }\n                dataHeight += sbw;\n                setCanvasSize();\n                setScrollBoxSize();\n                checkScrollBoxVisibility();\n            }\n            if (self.scrollBox.verticalBarVisible) {\n                if (self.style.width === 'auto' && !self.isChildGrid) {\n                    self.width += sbw;\n                }\n                dataWidth += sbw;\n                setCanvasSize();\n                setScrollBoxSize();\n                checkScrollBoxVisibility();\n            }\n            // set again after bar visibility checks\n            setScrollBoxSize();\n            self.scrollBox.scrollWidth = dataWidth - self.scrollBox.width;\n            self.scrollBox.scrollHeight = dataHeight - self.scrollBox.height;\n            self.scrollBox.widthBoxRatio = self.scrollBox.width / dataWidth;\n            self.scrollBox.scrollBoxWidth = self.scrollBox.width\n                * self.scrollBox.widthBoxRatio\n                - self.style.scrollBarWidth - b - d;\n            // TODO: This heightBoxRatio number is terribly wrong.\n            // They should be a result of the size of the grid/canvas?\n            // it being off causes the scroll bar to \"slide\" under\n            // the dragged mouse.\n            // https://github.com/TonyGermaneri/canvas-datagrid/issues/97\n            self.scrollBox.heightBoxRatio = (self.scrollBox.height - columnHeaderCellHeight) / dataHeight;\n            self.scrollBox.scrollBoxHeight = self.scrollBox.height\n                * self.scrollBox.heightBoxRatio\n                - self.style.scrollBarWidth - b - d;\n            self.scrollBox.scrollBoxWidth = Math.max(self.scrollBox.scrollBoxWidth, self.style.scrollBarBoxMinSize);\n            self.scrollBox.scrollBoxHeight = Math.max(self.scrollBox.scrollBoxHeight, self.style.scrollBarBoxMinSize);\n            // horizontal\n            n.x += rowHeaderCellWidth;\n            n.y += self.height - self.style.scrollBarWidth - d;\n            n.width = self.width - self.style.scrollBarWidth - rowHeaderCellWidth - d - m;\n            n.height = self.style.scrollBarWidth + self.style.scrollBarBorderWidth + d;\n            // horizontal box\n            nb.y = n.y + self.style.scrollBarBoxMargin;\n            nb.width = self.scrollBox.scrollBoxWidth;\n            nb.height = self.style.scrollBarBoxWidth;\n            // vertical\n            v.x += self.width - self.style.scrollBarWidth - self.style.scrollBarBorderWidth - d;\n            v.y += columnHeaderCellHeight;\n            v.width = self.style.scrollBarWidth + self.style.scrollBarBorderWidth + d;\n            v.height = self.height - columnHeaderCellHeight - self.style.scrollBarWidth - d - m;\n            // vertical box\n            vb.x = v.x + self.style.scrollBarBoxMargin;\n            vb.width = self.style.scrollBarBoxWidth;\n            vb.height = self.scrollBox.scrollBoxHeight;\n            // corner\n            co.x = n.x + n.width + m;\n            co.y = v.y + v.height + m;\n            co.width = self.style.scrollBarWidth + self.style.scrollBarBorderWidth;\n            co.height = self.style.scrollBarWidth + self.style.scrollBarBorderWidth;\n            self.scrollBox.entities = {\n                horizontalBar: n,\n                horizontalBox: nb,\n                verticalBar: v,\n                verticalBox: vb,\n                corner: co\n            };\n            self.scrollBox.bar = {\n                v: v,\n                h: n\n            };\n            self.scrollBox.box = {\n                v: vb,\n                h: nb\n            };\n            /// calculate page and dom elements\n            self.page = Math.max(1, self.visibleRows.length - 3 - self.attributes.pageUpDownOverlap);\n            // set canvas drawing related items\n            if (!self.isChildGrid) {\n                self.canvas.width = self.width * ratio;\n                self.canvas.height = self.height * ratio;\n                self.ctx.scale(ratio, ratio);\n            }\n            // resize any open dom elements (input/textarea)\n            self.resizeEditInput();\n            self.scroll(true);\n            if (drawAfterResize) {\n                self.draw(true);\n            }\n            self.dispatchEvent('resize', {});\n            return true;\n        };\n        self.scroll = function (dontDraw) {\n            var s = self.getSchema(),\n                l = (self.data || []).length,\n                ch = self.style.cellHeight;\n            // go too far in leaps, then get focused\n            self.scrollIndexTop = Math.floor((l * (self.scrollBox.scrollTop / self.scrollBox.scrollHeight)) - 100);\n            self.scrollIndexTop = Math.max(self.scrollIndexTop, 0);\n            self.scrollPixelTop = self.scrollCache.y[self.scrollIndexTop];\n            // sometimes the grid is rendered but the height is zero\n            if (self.scrollBox.scrollHeight === 0) {\n                self.scrollIndexTop = 0;\n            }\n            self.scrollPixelTop = 0;\n            self.scrollIndexLeft = self.frozenColumn;\n            self.scrollPixelLeft = 0;\n            while (self.scrollPixelTop < self.scrollBox.scrollTop && self.scrollIndexTop < self.data.length) {\n                // start on index +1 since index 0 was used in \"go too far\" section above\n                self.scrollIndexTop += 1;\n                self.scrollPixelTop = self.scrollCache.y[self.scrollIndexTop];\n            }\n            while (self.scrollPixelLeft < (self.scrollBox.scrollLeft + 1) && self.scrollIndexLeft < s.length) {\n                self.scrollPixelLeft = self.scrollCache.x[self.scrollIndexLeft];\n                self.scrollIndexLeft += 1;\n            }\n            if (s.length > 0) {\n                self.scrollIndexLeft = Math.max(self.scrollIndexLeft - 1, 0);\n                self.scrollPixelLeft -= self.getColummnWidth(self.orders.columns[self.scrollIndexLeft]);\n            }\n            if ((self.data || []).length > 0) {\n                self.scrollIndexTop = Math.max(self.scrollIndexTop - 1, 0);\n                self.scrollPixelTop = Math.max((self.scrollPixelTop\n                    - (\n                        self.data[self.scrollIndexTop] ? (self.sizes.rows[self.scrollIndexTop] || ch)\n                                + (self.sizes.trees[self.scrollIndexTop] || 0)\n                        : ch\n                    ) * self.scale), 0);\n            }\n            self.ellipsisCache = {};\n            if (!dontDraw) {\n                self.draw(true);\n            }\n            //TODO: figure out why this has to be delayed for child grids\n            //BUG: wheeling event on 3rd level hierarchy fails to move input box\n            requestAnimationFrame(self.resizeEditInput);\n            self.dispatchEvent('scroll', {top: self.scrollBox.scrollTop, left: self.scrollBox.scrollLeft});\n        };\n        self.mousemove = function (e, overridePos) {\n            if (self.contextMenu || self.input) {\n                return;\n            }\n            self.mouse = overridePos || self.getLayerPos(e);\n            var ctrl = (e.ctrlKey || e.metaKey || self.attributes.persistantSelectionMode),\n                i,\n                s = self.getSchema(),\n                dragBounds,\n                sBounds,\n                x = self.mouse.x,\n                y = self.mouse.y,\n                o = self.getCellAt(x, y),\n                delta,\n                ev = {NativeEvent: e, cell: o, x: x, y: y},\n                previousCell = self.currentCell;\n            clearTimeout(self.scrollTimer);\n            if (!self.isInGrid({x: x, y: y})) {\n                self.hasFocus = false;\n            }\n            if (self.dispatchEvent('mousemove', ev)) {\n                return;\n            }\n            if (o && self.currentCell) {\n                self.rowBoundaryCrossed = self.currentCell.rowIndex !== o.rowIndex;\n                self.columnBoundaryCrossed = self.currentCell.columnIndex !== o.columnIndex;\n                self.cellBoundaryCrossed = self.rowBoundaryCrossed || self.columnBoundaryCrossed;\n                ['row', 'column', 'cell'].forEach(function (prefix) {\n                    if (self[prefix + 'BoundaryCrossed']) {\n                        ev.cell = previousCell;\n                        self.dispatchEvent(prefix + 'mouseout', ev);\n                        ev.cell = o;\n                        self.dispatchEvent(prefix + 'mouseover', ev);\n                    }\n                });\n            }\n            self.currentCell = o;\n            if (!self.hasFocus) {\n                return;\n            }\n            self.hovers = {};\n            if (!self.draggingItem\n                    && o\n                    && self.scrollModes.indexOf(o.context) === -1) {\n                self.dragItem = o;\n                self.dragMode = o.dragContext;\n                self.cursor = o.context;\n                if (o.context === 'cell') {\n                    self.cursor = 'default';\n                    self.hovers = { rowIndex: o.rowIndex, columnIndex: o.columnIndex };\n                }\n                if ((self.selecting || self.reorderObject)\n                        && o.context === 'cell') {\n                    delta = {\n                        x: Math.abs(self.dragStart.x - x),\n                        y: Math.abs(self.dragStart.y - y)\n                    };\n                    if (self.dragStartObject.columnIndex !== -1 && e.shiftKey) {\n                        self.dragStartObject = {\n                            rowIndex: self.activeCell.rowIndex,\n                            columnIndex: self.activeCell.columnIndex\n                        };\n                    }\n                    dragBounds = {\n                        top: Math.min(self.dragStartObject.rowIndex, o.rowIndex),\n                        left: Math.min(self.dragStartObject.columnIndex, o.columnIndex),\n                        bottom: Math.max(self.dragStartObject.rowIndex, o.rowIndex),\n                        right: Math.max(self.dragStartObject.columnIndex, o.columnIndex)\n                    };\n                    if (self.dragStartObject.columnIndex === -1) {\n                        sBounds = self.getSelectionBounds();\n                        dragBounds.left = -1;\n                        dragBounds.right = s.length - 1;\n                        dragBounds.top = Math.min(sBounds.top, o.rowIndex);\n                        dragBounds.bottom = Math.max(sBounds.bottom, o.rowIndex);\n                    }\n                    if (self.dragStartObject.rowIndex !== o.rowIndex\n                                || self.dragStartObject.columnIndex !== o.columnIndex) {\n                        self.ignoreNextClick = true;\n                    }\n                    if (self.cellBoundaryCrossed || (delta.x === 0 && delta.y === 0) || (self.attributes.selectionMode === 'row')) {\n                        if (((self.attributes.selectionMode === 'row') || self.dragStartObject.columnIndex === -1)\n                                && self.rowBoundaryCrossed) {\n                            self.selectRow(o.rowIndex, ctrl, null, true);\n                        } else if (self.attributes.selectionMode !== 'row') {\n                            if (!self.dragAddToSelection && o.rowIndex !== undefined) {\n                                if (self.selections[o.rowIndex] && self.selections[o.rowIndex].indexOf(o.columnIndex) !== -1) {\n                                    self.selections[o.rowIndex].splice(self.selections[o.rowIndex].indexOf(o.columnIndex), 1);\n                                }\n                            } else {\n                                self.selections[o.rowIndex] = self.selections[o.rowIndex] || [];\n                                if (self.selections[o.rowIndex].indexOf(o.columnIndex) === -1) {\n                                    self.selections[o.rowIndex].push(o.columnIndex);\n                                }\n                            }\n                        }\n                    }\n                    if ((!self.selectionBounds || (dragBounds.top !== self.selectionBounds.top\n                            || dragBounds.left !== self.selectionBounds.left\n                            || dragBounds.bottom !== self.selectionBounds.bottom\n                            || dragBounds.right !== self.selectionBounds.right)) && !ctrl) {\n                        self.selections = [];\n                        sBounds = dragBounds;\n                        if (self.attributes.selectionMode === 'row') {\n                            for (i = sBounds.top; i <= sBounds.bottom; i += 1) {\n                                self.selectRow(i, true, null, true);\n                            }\n                        } else if (dragBounds.top !== -1) {\n                            self.selectArea(sBounds, true);\n                        }\n                    }\n                    self.autoScrollZone(e, x, y, ctrl);\n                }\n            }\n            self.cellBoundaryCrossed = false;\n            self.rowBoundaryCrossed = false;\n            self.columnBoundaryCrossed = false;\n            self.draw(true);\n        };\n        self.click = function (e, overridePos) {\n            var i,\n                startingBounds = JSON.stringify(self.getSelectionBounds()),\n                ctrl = (e.ctrlKey || e.metaKey || self.attributes.persistantSelectionMode),\n                pos = overridePos || self.getLayerPos(e);\n            self.currentCell = self.getCellAt(pos.x, pos.y);\n            if (self.currentCell.grid !== undefined) {\n                return;\n            }\n            function checkSelectionChange() {\n                var ev, sb = self.getSelectionBounds();\n                if (startingBounds === JSON.stringify(sb)) {\n                    return;\n                }\n                ev = {\n                    selections: self.selections,\n                    selectionBounds: self.getSelectionBounds()\n                };\n                Object.defineProperty(ev, 'selectedData', {\n                    get: function () {\n                        return self.getSelectedData();\n                    }\n                });\n                self.dispatchEvent('selectionchanged', ev);\n            }\n            if (self.input) {\n                self.endEdit();\n            }\n            if (self.ignoreNextClick) {\n                self.ignoreNextClick = false;\n                return;\n            }\n            i = self.currentCell;\n            if (self.dispatchEvent('click', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            if (['rowHeaderCell', 'columnHeaderCell'].indexOf(self.currentCell.style) === -1 && !ctrl) {\n                self.setActiveCell(i.columnIndex, i.rowIndex);\n            }\n            if (self.currentCell.context === 'cell') {\n                if (self.currentCell.style === 'cornerCell') {\n                    self.selectAll();\n                    self.draw();\n                    checkSelectionChange();\n                    return;\n                }\n                if (self.currentCell.style === 'columnHeaderCell') {\n                    if (self.attributes.columnHeaderClickBehavior === 'sort') {\n                        if (self.orderBy === i.header.name) {\n                            self.orderDirection = self.orderDirection === 'asc' ? 'desc' : 'asc';\n                        } else {\n                            self.orderDirection = 'asc';\n                        }\n                        self.order(i.header.name, self.orderDirection);\n                        checkSelectionChange();\n                        return;\n                    }\n                    if (self.attributes.columnHeaderClickBehavior === 'select') {\n                        self.selectColumn(i.header.index, ctrl, e.shiftKey);\n                        self.draw();\n                        return;\n                    }\n                }\n                self.selections[i.rowIndex] = self.selections[i.rowIndex] || [];\n                if (((self.attributes.selectionMode === 'row') || self.currentCell.style === 'rowHeaderCell')) {\n                    if (self.currentCell.style === 'rowHeaderCell'\n                            && self.attributes.tree && pos.x > 0\n                            && pos.x - self.currentCell.x < self.style.treeArrowWidth\n                            + self.style.treeArrowMarginLeft\n                            + self.style.treeArrowMarginRight + self.style.treeArrowClickRadius\n                            && pos.y - self.currentCell.y < self.style.treeArrowHeight\n                            + self.style.treeArrowMarginTop + self.style.treeArrowClickRadius\n                            && pos.y > 0) {\n                        self.toggleTree(i.rowIndex);\n                        return;\n                    }\n                }\n                if (e.shiftKey && !ctrl) {\n                    self.selectionBounds = self.getSelectionBounds();\n                    self.selectArea(undefined, false);\n                }\n            }\n            checkSelectionChange();\n            self.draw(true);\n        };\n        self.dragResizeColumn = function (e) {\n            var pos, x, y;\n            pos = self.getLayerPos(e);\n            x = self.resizingStartingWidth + pos.x - self.dragStart.x;\n            y = self.resizingStartingHeight + pos.y - self.dragStart.y;\n            if (x < self.style.minColumnWidth) {\n                x = self.style.minColumnWidth;\n            }\n            if (y < self.style.minRowHeight) {\n                y = self.style.minRowHeight;\n            }\n            if (self.dispatchEvent('resizecolumn', {x: x, y: y, draggingItem: self.draggingItem})) { return false; }\n            if (self.scrollBox.scrollLeft > self.scrollBox.scrollWidth - self.attributes.resizeScrollZone\n                    && self.dragMode === 'ew-resize') {\n                self.resize(true);\n                self.scrollBox.scrollLeft += x;\n            }\n            if (self.dragMode === 'ew-resize') {\n                self.sizes.columns[self.draggingItem.header.style === 'rowHeaderCell'\n                       ? 'cornerCell' : self.draggingItem.sortColumnIndex] = x;\n                if (['rowHeaderCell', 'cornerCell'].indexOf(self.draggingItem.header.style) !== -1) {\n                    self.resize(true);\n                }\n                self.resizeChildGrids();\n                return;\n            }\n            if (self.dragMode === 'ns-resize') {\n                if (self.draggingItem.rowOpen) {\n                    self.sizes.trees[self.draggingItem.rowIndex] = y;\n                } else if (self.attributes.globalRowResize) {\n                    self.style.cellHeight = y;\n                } else {\n                    self.sizes.rows[self.draggingItem.rowIndex] = y;\n                }\n                self.dispatchEvent('resizerow', {row: y});\n                self.resizeChildGrids();\n                return;\n            }\n            self.ellipsisCache = {};\n        };\n        self.stopDragResize = function () {\n            self.resize();\n            document.body.removeEventListener('mousemove', self.dragResizeColumn, false);\n            document.body.removeEventListener('mouseup', self.stopDragResize, false);\n            self.setStorageData();\n            self.draw(true);\n            self.ignoreNextClick = true;\n        };\n        self.scrollGrid = function (e) {\n            var pos = self.getLayerPos(e);\n            if (self.attributes.scrollPointerLock && self.pointerLockPosition\n                    && ['horizontal-scroll-box', 'vertical-scroll-box'].indexOf(self.scrollStartMode) !== -1) {\n                self.pointerLockPosition.x += e.movementX;\n                self.pointerLockPosition.y += e.movementY;\n                self.pointerLockPosition.x = Math.min(self.width - self.style.scrollBarWidth, Math.max(0, self.pointerLockPosition.x));\n                self.pointerLockPosition.y = Math.min(self.height - self.style.scrollBarWidth, Math.max(0, self.pointerLockPosition.y));\n                pos = self.pointerLockPosition;\n            }\n            self.scrollMode = self.getCellAt(pos.x, pos.y).context;\n            if (self.scrollMode === 'horizontal-scroll-box' && self.scrollStartMode !== 'horizontal-scroll-box') {\n                self.scrollStartMode = 'horizontal-scroll-box';\n                self.dragStart = pos;\n                self.scrollStart.left = self.scrollBox.scrollLeft;\n                clearTimeout(self.scrollTimer);\n                return;\n            }\n            if (self.scrollMode === 'vertical-scroll-box' && self.scrollStartMode !== 'vertical-scroll-box') {\n                self.scrollStartMode = 'vertical-scroll-box';\n                self.dragStart = pos;\n                self.scrollStart.top = self.scrollBox.scrollTop;\n                clearTimeout(self.scrollTimer);\n                return;\n            }\n            if (self.scrollStartMode === 'vertical-scroll-box'\n                    && self.scrollMode !== 'vertical-scroll-box') {\n                self.scrollMode = 'vertical-scroll-box';\n            }\n            if (self.scrollStartMode === 'horizontal-scroll-box'\n                    && self.scrollMode !== 'horizontal-scroll-box') {\n                self.scrollMode = 'horizontal-scroll-box';\n            }\n            clearTimeout(self.scrollTimer);\n            if (self.scrollModes.indexOf(self.scrollMode) === -1) {\n                return;\n            }\n            if (self.scrollMode === 'vertical-scroll-box') {\n                self.scrollBox.scrollTop = self.scrollStart.top + ((pos.y - self.dragStart.y)\n                    / self.scrollBox.heightBoxRatio);\n            } else if (self.scrollMode === 'vertical-scroll-top') {\n                self.scrollBox.scrollTop -= (self.page * self.style.cellHeight);\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            } else if (self.scrollMode === 'vertical-scroll-bottom') {\n                self.scrollBox.scrollTop += (self.page * self.style.cellHeight);\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            }\n            if (self.scrollMode === 'horizontal-scroll-box') {\n                self.scrollBox.scrollLeft = self.scrollStart.left + ((pos.x - self.dragStart.x)\n                    / self.scrollBox.widthBoxRatio);\n            } else if (self.scrollMode === 'horizontal-scroll-right') {\n                self.scrollBox.scrollLeft += self.attributes.selectionScrollIncrement;\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            } else if (self.scrollMode === 'horizontal-scroll-left') {\n                self.scrollBox.scrollLeft -= self.attributes.selectionScrollIncrement;\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            }\n        };\n        self.stopScrollGrid = function () {\n            clearTimeout(self.scrollTimer);\n            if (document.exitPointerLock) {\n                document.exitPointerLock();\n            }\n            document.removeEventListener('mousemove', self.scrollGrid, false);\n        };\n        self.dragReorder = function (e) {\n            var pos, x, y,\n                columReorder = self.dragMode === 'column-reorder',\n                rowReorder = self.dragMode === 'row-reorder';\n            pos = self.getLayerPos(e);\n            x = pos.x - self.dragStart.x;\n            y = pos.y - self.dragStart.y;\n            if (!self.attributes.allowColumnReordering && columReorder) {\n                return;\n            }\n            if (!self.attributes.allowRowReordering && rowReorder) {\n                return;\n            }\n            if (self.dispatchEvent('reordering', {\n                    NativeEvent: e,\n                    source: self.dragStartObject,\n                    target: self.currentCell,\n                    dragMode: self.dragMode\n                })) {\n                return;\n            }\n            if (Math.abs(x) > self.attributes.reorderDeadZone || Math.abs(y) > self.attributes.reorderDeadZone) {\n                self.reorderObject = self.draggingItem;\n                self.reorderTarget = self.currentCell;\n                self.reorderObject.dragOffset = {\n                    x: x,\n                    y: y\n                };\n                self.autoScrollZone(e, columReorder ? pos.x : -1, rowReorder ? pos.y : -1, false);\n            }\n        };\n        self.stopDragReorder = function (e) {\n            var oIndex,\n                tIndex,\n                cr = {\n                    'row-reorder': self.orders.rows,\n                    'column-reorder': self.orders.columns\n                },\n                i = {\n                    'row-reorder': 'rowIndex',\n                    'column-reorder': 'sortColumnIndex'\n                }[self.dragMode];\n            document.body.removeEventListener('mousemove', self.dragReorder, false);\n            document.body.removeEventListener('mouseup', self.stopDragReorder, false);\n            if (self.reorderObject\n                    && self.reorderTarget\n                    && ((self.dragMode === 'column-reorder' && self.reorderTarget.sortColumnIndex > -1\n                        && self.reorderTarget.sortColumnIndex < self.getSchema().length)\n                    || (self.dragMode === 'row-reorder' && self.reorderTarget.rowIndex > -1\n                        && self.reorderTarget.rowIndex < self.data.length))\n                    && self.reorderObject[i] !== self.reorderTarget[i]\n                    && !self.dispatchEvent('reorder', {\n                        NativeEvent: e,\n                        source: self.reorderObject,\n                        target: self.reorderTarget,\n                        dragMode: self.dragMode\n                    })) {\n                self.ignoreNextClick = true;\n                oIndex = cr[self.dragMode].indexOf(self.reorderObject[i]);\n                tIndex = cr[self.dragMode].indexOf(self.reorderTarget[i]);\n                cr[self.dragMode].splice(oIndex, 1);\n                cr[self.dragMode].splice(tIndex, 0, self.reorderObject[i]);\n                if(self.dragMode === 'column-reorder') {\n                  self.orders.columns = cr[self.dragMode];\n                } else {\n                  self.orders.rows = cr[self.dragMode];\n                }\n                self.resize();\n                self.setStorageData();\n            }\n            self.reorderObject = undefined;\n            self.reorderTarget = undefined;\n            self.draw(true);\n        };\n        self.dragMove = function (e) {\n            if (self.dispatchEvent('moving', {NativeEvent: e, cell: self.currentCell})) { return; }\n            var pos = self.getLayerPos(e);\n            self.moveOffset = {\n                x: self.currentCell.columnIndex - self.dragStartObject.columnIndex,\n                y: self.currentCell.rowIndex - self.dragStartObject.rowIndex\n            };\n            if (Math.abs(pos.x) > self.attributes.reorderDeadZone || Math.abs(pos.y) > self.attributes.reorderDeadZone) {\n                setTimeout(function () {\n                    self.autoScrollZone(e, pos.x, pos.y, false);\n                }, 1);\n            }\n        };\n        self.stopDragMove = function (e) {\n            document.body.removeEventListener('mousemove', self.dragMove, false);\n            document.body.removeEventListener('mouseup', self.stopDragMove, false);\n            var b = self.getSelectionBounds();\n            if (self.dispatchEvent('endmove', {NativeEvent: e, cell: self.currentCell})) {\n                self.movingSelection = undefined;\n                self.moveOffset = undefined;\n                self.draw(true);\n                return;\n            }\n            if (self.moveOffset) {\n                self.moveTo(self.movingSelection, b.left + self.moveOffset.x, b.top + self.moveOffset.y);\n                self.moveSelection(self.moveOffset.x, self.moveOffset.y);\n            }\n            self.movingSelection = undefined;\n            self.moveOffset = undefined;\n            self.draw(true);\n        };\n        self.freezeMove = function (e) {\n            if (self.dispatchEvent('freezemoving', {NativeEvent: e, cell: self.currentCell})) { return; }\n            var pos = self.getLayerPos(e);\n            self.ignoreNextClick = true;\n            self.freezeMarkerPosition = pos;\n            if (self.currentCell && self.currentCell.rowIndex !== undefined && self.dragMode === 'frozen-row-marker') {\n                self.scrollBox.scrollTop = 0;\n                self.frozenRow = self.currentCell.rowIndex + 1;\n            }\n            if (self.currentCell && self.currentCell.columnIndex !== undefined && self.dragMode === 'frozen-column-marker') {\n                self.scrollBox.scrollLeft = 0;\n                self.frozenColumn = self.currentCell.columnIndex + 1;\n            }\n            if (Math.abs(pos.x) > self.attributes.reorderDeadZone || Math.abs(pos.y) > self.attributes.reorderDeadZone) {\n                setTimeout(function () {\n                    self.autoScrollZone(e, pos.x, pos.y, false);\n                }, 1);\n            }\n        };\n        self.stopFreezeMove = function (e) {\n            document.body.removeEventListener('mousemove', self.freezeMove, false);\n            document.body.removeEventListener('mouseup', self.stopFreezeMove, false);\n            self.freezeMarkerPosition = undefined;\n            if (self.dispatchEvent('endfreezemove', {NativeEvent: e, cell: self.currentCell})) {\n                self.frozenRow = self.startFreezeMove.x;\n                self.frozenColumn = self.startFreezeMove.y;\n                self.draw(true);\n                return;\n            }\n            self.draw(true);\n        };\n        self.mousedown = function (e, overridePos) {\n            self.lastMouseDownTarget = e.target;\n            if (self.dispatchEvent('mousedown', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            if (e.button === 2 || self.input) { return; }\n            var ctrl = (e.ctrlKey || e.metaKey),\n                move = /-move/.test(self.dragMode),\n                freeze = /frozen-row-marker|frozen-column-marker/.test(self.dragMode),\n                resize = /-resize/.test(self.dragMode);\n            self.dragStart = overridePos || self.getLayerPos(e);\n            self.scrollStart = {\n                left: self.scrollBox.scrollLeft,\n                top: self.scrollBox.scrollTop\n            };\n            self.dragStartObject = self.getCellAt(self.dragStart.x, self.dragStart.y);\n            self.dragAddToSelection = !self.dragStartObject.selected;\n            if (!ctrl && !e.shiftKey && !/(vertical|horizontal)-scroll-(bar|box)/\n                    .test(self.dragStartObject.context)\n                    && self.currentCell\n                    && !self.currentCell.isColumnHeader\n                    && !move\n                    && !freeze\n                    && !resize) {\n                self.selections = [];\n            }\n            if (self.dragStartObject.isGrid) {\n                return;\n            }\n            if (self.scrollModes.indexOf(self.dragStartObject.context) !== -1) {\n                self.scrollMode = self.dragStartObject.context;\n                self.scrollStartMode = self.dragStartObject.context;\n                self.scrollGrid(e);\n                if (self.attributes.scrollPointerLock\n                        && ['horizontal-scroll-box', 'vertical-scroll-box'].indexOf(self.scrollStartMode) !== -1) {\n                    self.pointerLockPosition = {\n                        x: self.dragStart.x,\n                        y: self.dragStart.y\n                    };\n                    self.canvas.requestPointerLock();\n                }\n                document.addEventListener('mousemove', self.scrollGrid, false);\n                document.addEventListener('mouseup', self.stopScrollGrid, false);\n                self.ignoreNextClick = true;\n                return;\n            }\n            if (self.dragMode === 'cell') {\n                self.selecting = true;\n                if ((self.attributes.selectionMode === 'row' || self.dragStartObject.columnIndex === -1)\n                        && self.dragStartObject.rowIndex > -1) {\n                    self.selectRow(self.dragStartObject.rowIndex, ctrl, null);\n                } else if (self.attributes.selectionMode !== 'row') {\n                    self.mousemove(e);\n                }\n                return;\n            }\n            if (move) {\n                self.draggingItem = self.dragItem;\n                self.movingSelection = self.selections.concat([]);\n                self.dragging = self.dragStartObject;\n                if (self.dispatchEvent('beginmove', {NativeEvent: e, cell: self.currentCell})) { return; }\n                document.body.addEventListener('mousemove', self.dragMove, false);\n                document.body.addEventListener('mouseup', self.stopDragMove, false);\n                return self.mousemove(e);\n            }\n            if (freeze) {\n                self.draggingItem = self.dragItem;\n                self.startFreezeMove = {\n                    x: self.frozenRow,\n                    y: self.frozenColumn\n                };\n                if (self.dispatchEvent('beginfreezemove', {NativeEvent: e})) { return; }\n                document.body.addEventListener('mousemove', self.freezeMove, false);\n                document.body.addEventListener('mouseup', self.stopFreezeMove, false);\n                return self.mousemove(e);\n            }\n            if (resize) {\n                self.draggingItem = self.dragItem;\n                if (self.draggingItem.rowOpen) {\n                    self.resizingStartingHeight = self.sizes.trees[self.draggingItem.rowIndex];\n                } else {\n                    self.resizingStartingHeight = self.sizes.rows[self.draggingItem.rowIndex] || self.style.cellHeight;\n                }\n                self.resizingStartingWidth = self.sizes.columns[self.draggingItem.header.style === 'rowHeaderCell'\n                       ? 'cornerCell' : self.draggingItem.sortColumnIndex] || self.draggingItem.width;\n                document.body.addEventListener('mousemove', self.dragResizeColumn, false);\n                document.body.addEventListener('mouseup', self.stopDragResize, false);\n                return;\n            }\n            if (['row-reorder', 'column-reorder'].indexOf(self.dragMode) !== -1) {\n                self.draggingItem = self.dragStartObject;\n                document.body.addEventListener('mousemove', self.dragReorder, false);\n                document.body.addEventListener('mouseup', self.stopDragReorder, false);\n                return;\n            }\n        };\n        self.mouseup = function (e) {\n            clearTimeout(self.scrollTimer);\n            self.cellBoundaryCrossed = true;\n            self.rowBoundaryCrossed = true;\n            self.columnBoundaryCrossed = true;\n            self.selecting = undefined;\n            self.draggingItem = undefined;\n            self.dragStartObject = undefined;\n            if (self.dispatchEvent('mouseup', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus && e.target !== self.canvas) {\n                return;\n            }\n            if (self.currentCell && self.currentCell.grid !== undefined) {\n                return;\n            }\n            if (self.contextMenu || self.input) { return; }\n            if (self.dragStart && self.isInGrid(self.dragStart)) {\n                self.controlInput.focus();\n            }\n            e.preventDefault();\n        };\n        // gets the horizontal adjacent cells as well as first/last based on column visibility\n        self.getAdjacentCells = function () {\n            var x,\n                i,\n                s = self.getSchema(),\n                o = {};\n            for (x = 0; x < s.length; x += 1) {\n                i = self.orders.columns[x];\n                if (!s[i].hidden) {\n                    if (o.first === undefined) {\n                        o.first = x;\n                        o.left = x;\n                    }\n                    o.last = x;\n                    if (x > self.activeCell.columnIndex && o.right === undefined) {\n                        o.right = x;\n                    }\n                    if (x < self.activeCell.columnIndex) {\n                        o.left = x;\n                    }\n                }\n            }\n            if (o.right === undefined) {\n                o.right = o.last;\n            }\n            return o;\n        };\n        self.keydown = function (e) {\n            var i,\n                ev,\n                adjacentCells = self.getAdjacentCells(),\n                x = self.activeCell.columnIndex,\n                y = self.activeCell.rowIndex,\n                ctrl = (e.ctrlKey || e.metaKey),\n                last = self.data.length - 1,\n                s = self.getSchema(),\n                cols = s.length - 1;\n            if (self.dispatchEvent('keydown', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            if (self.attributes.showNewRow) {\n                last += 1;\n            }\n            if (e.keyCode === 9) {\n                e.preventDefault();\n            }\n            // esc\n            if (e.keyCode === 27) {\n                self.selections = [];\n                self.draw(true);\n            // ctrl + a\n            } else if (ctrl && e.keyCode === 65) {\n                self.selectAll();\n            //ArrowDown\n            } else if (e.keyCode === 40) {\n                y += 1;\n            //ArrowUp\n            } else if (e.keyCode === 38) {\n                y -= 1;\n            //ArrowLeft Tab\n            } else if (e.keyCode === 37 || (e.shiftKey && e.keyCode === 9)) {\n                x = adjacentCells.left;\n            //ArrowRight Tab\n            } else if (e.keyCode === 39 || (!e.shiftKey && e.keyCode === 9)) {\n                x = adjacentCells.right;\n            //PageUp\n            } else if (e.keyCode === 33) {\n                y -= self.page;\n                e.preventDefault();\n            //PageDown\n            } else if (e.keyCode === 34) {\n                y += self.page;\n                e.preventDefault();\n            //Home ArrowUp\n            } else if (e.keyCode === 36 || (ctrl && e.keyCode === 38)) {\n                y = 0;\n            //End ArrowDown\n            } else if (e.keyCode === 35 || (ctrl && e.keyCode === 40)) {\n                y = self.data.length - 1;\n            //ArrowRight\n            } else if (ctrl && e.keyCode === 39) {\n                x = adjacentCells.last;\n            //ArrowLeft\n            } else if (ctrl && e.keyCode === 37) {\n                x = adjacentCells.first;\n            }\n            //Enter\n            if (e.keyCode === 13) {\n                return self.beginEditAt(x, y, e);\n            }\n            //Space\n            if (e.keyCode === 32) {\n                self.selections = [];\n                self.selections[Math.max(y, 0)] = [];\n                self.selections[Math.max(y, 0)].push(x);\n                self.selectionBounds = self.getSelectionBounds();\n                if (self.attributes.selectionMode === 'row') {\n                    for (i = self.selectionBounds.top; i <= self.selectionBounds.bottom; i += 1) {\n                        self.selectRow(i, ctrl, null, true);\n                    }\n                } else {\n                    self.selectArea(undefined, ctrl);\n                }\n                e.preventDefault();\n                self.draw(true);\n                return;\n            }\n            if (x < 0 || Number.isNaN(x)) {\n                x = adjacentCells.first;\n            }\n            if (y > last) {\n                y = last;\n            }\n            if (y < 0 || Number.isNaN(y)) {\n                y = 0;\n            }\n            if (x > cols) {\n                x = adjacentCells.last;\n            }\n            // TODO - most likley some column order related bugs in key based selection\n            // Arrows\n            if (e.shiftKey && [37, 38, 39, 40].indexOf(e.keyCode) !== -1) {\n                self.selections[Math.max(y, 0)] = self.selections[Math.max(y, 0)] || [];\n                self.selections[Math.max(y, 0)].push(x);\n                self.selectionBounds = self.getSelectionBounds();\n                self.selectArea(undefined, ctrl);\n                self.draw(true);\n            }\n            if (x !== self.activeCell.columnIndex || y !== self.activeCell.rowIndex) {\n                self.scrollIntoView(\n                  x !== self.activeCell.columnIndex ? x : undefined,\n                  y !== self.activeCell.rowIndex && !Number.isNaN(y) ? y : undefined\n                );\n\n                self.setActiveCell(x, y);\n                if (!e.shiftKey && self.attributes.selectionFollowsActiveCell) {\n                    if (!ctrl) {\n                        self.selections = [];\n                    }\n                    self.selections[y] = self.selections[y] || [];\n                    self.selections[y].push(x);\n                    ev = {\n                        selectedData: self.getSelectedData(),\n                        selections: self.selections,\n                        selectionBounds: self.getSelectionBounds()\n                    };\n                    Object.defineProperty(ev, 'selectedData', {\n                        get: function () {\n                            return self.getSelectedData();\n                        }\n                    });\n                    self.dispatchEvent('selectionchanged', ev);\n                }\n                self.draw(true);\n            }\n        };\n        self.keyup = function (e) {\n            if (self.dispatchEvent('keyup', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n        };\n        self.keypress = function (e) {\n            if (!self.hasFocus) {\n                return;\n            }\n            if (self.dispatchEvent('keypress', {NativeEvent: e, cell: self.currentCell})) { return; }\n        };\n        self.dblclick = function (e) {\n            if (self.dispatchEvent('dblclick', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            if (self.currentCell.context === 'ew-resize'\n                    && self.currentCell.style === 'columnHeaderCell') {\n                self.fitColumnToValues(self.currentCell.header.name);\n            } else if (self.currentCell.context === 'ew-resize'\n                    && self.currentCell.style === 'cornerCell') {\n                self.autosize();\n            } else if (['cell', 'activeCell'].indexOf(self.currentCell.style) !== -1) {\n                self.beginEditAt(self.currentCell.columnIndex, self.currentCell.rowIndex);\n            }\n        };\n        self.scrollWheel = function (e) {\n            var l,\n                t,\n                ev = e,\n                deltaX = e.deltaX === undefined ? e.NativeEvent.deltaX : e.deltaX,\n                deltaY = e.deltaY === undefined ? e.NativeEvent.deltaY : e.deltaY,\n                deltaMode = e.deltaMode === undefined ? e.NativeEvent.deltaMode : e.deltaMode;\n            if (wheeling) {\n                return;\n            }\n            if (self.dispatchEvent('wheel', {NativeEvent: e})) {\n                return;\n            }\n            var e = e.NativeEvent || e;\n            self.touchHaltAnimation = true;\n            l = self.scrollBox.scrollLeft;\n            t = self.scrollBox.scrollTop;\n            if (self.hasFocus) {\n                //BUG Issue 42: https://github.com/TonyGermaneri/canvas-datagrid/issues/42\n                //https://stackoverflow.com/questions/20110224/what-is-the-height-of-a-line-in-a-wheel-event-deltamode-dom-delta-line\n                if (deltaMode === 1) {\n                    // line mode = 17 pixels per line\n                    deltaY = deltaY * 17;\n                }\n                if ((self.scrollBox.scrollTop  < self.scrollBox.scrollHeight && deltaY > 0)\n                        || (self.scrollBox.scrollLeft < self.scrollBox.scrollWidth && deltaX > 0)\n                        || (self.scrollBox.scrollTop > 0 && deltaY < 0)\n                        || (self.scrollBox.scrollLeft > 0 && deltaX < 0)) {\n                    ev.preventDefault(e);\n                }\n                wheeling = setTimeout(function () {\n                    wheeling = undefined;\n                    self.scrollBox.scrollTo(deltaX + l, deltaY + t);\n                }, 1);\n            }\n        };\n        self.pasteItem = function (clipData, x, y, mimeType) {\n            var l, s = self.getVisibleSchema(), yi = y - 1, sel = [];\n            function normalizeRowData(importingRow, existingRow, offsetX, schema, mimeType, rowIndex) {\n                var r = existingRow;\n                if (!Array.isArray(importingRow) && importingRow !== null && typeof importingRow === 'object') {\n                    importingRow = Object.keys(importingRow).map(function (colKey) {\n                        return importingRow[colKey];\n                    });\n                }\n                if (/^text\\/html/.test(mimeType)) {\n                    importingRow = importingRow.substring(4, importingRow.length - 5).split('</td><td>');\n                }\n                if (typeof importingRow === 'string') {\n                    importingRow = [importingRow];\n                }\n                sel[rowIndex] = [];\n                importingRow.forEach(function (cellData, colIndex) {\n                    var cName = schema[colIndex + offsetX].name;\n                    if (importingRow[colIndex] === undefined || importingRow[colIndex] === null) {\n                        r[cName] = existingRow[cName];\n                        return;\n                    }\n                    sel[rowIndex].push(colIndex + offsetX);\n                    r[cName] = importingRow[colIndex];\n                });\n                return r;\n            }\n            if (/^text\\/html/.test(mimeType)) {\n                if (!/^(<meta[^>]+>)?<table>/.test(clipData.substring(0, 29))) {\n                    console.warn('Unrecognized HTML format.  HTML must be a simple table, e.g.: <table><tr><td>data</td></tr></table>.  Data with the mime type text/html not in this format will not be imported as row data.');\n                    return;\n                }\n                // strip table beginning and ending off, then split at rows\n                clipData = clipData.substring(clipData.indexOf('<table><tr>') + 11, clipData.length - 13).split('</tr><tr>');\n                // ditch any headers on the table\n                clipData = clipData.filter(function (row) {\n                    return !/^<th>|^<thead>/.test(row);\n                });\n            } else {\n                clipData = clipData.split('\\n');\n            }\n            l = clipData.length;\n            clipData.forEach(function (rowData) {\n                yi += 1;\n                var i = self.orders.rows[yi];\n                self.data[i] = normalizeRowData(rowData, self.data[i], x, s, mimeType, i);\n            });\n            self.selections = sel;\n            return l;\n        };\n        self.getNextVisibleColumnIndex = function (visibleColumnIndex) {\n            var x, s = self.getVisibleSchema();\n            for (x = 0; x < s.length; x += 1) {\n                if (s[x].columnIndex === visibleColumnIndex) {\n                    return s[x + 1].columnIndex;\n                }\n            }\n            return -1;\n        };\n        self.getVisibleColumnIndexOf = function (columnIndex) {\n            var x, s = self.getVisibleSchema();\n            for (x = 0; x < s.length; x += 1) {\n                if (s[x].columnIndex === columnIndex) {\n                    return x;\n                }\n            }\n            return -1;\n        };\n        self.paste = function (e) {\n            var d;\n            function getItem(dti) {\n                var type = dti.type;\n                dti.getAsString(function (s) {\n                    self.pasteItem(s, self.getVisibleColumnIndexOf(self.activeCell.columnIndex), self.activeCell.rowIndex, type);\n                    self.draw();\n                });\n            }\n            d = Array.prototype.filter.call(e.clipboardData.items, function (dti) {\n                return dti.type === 'text/html';\n            })[0] || Array.prototype.filter(function (dti) {\n                return dti.type === 'text/csv';\n            })[0] || Array.prototype.filter(function (dti) {\n                return dti.type === 'text/plain';\n            })[0];\n            if (!d) {\n                console.warn('Cannot find supported clipboard data type.  Supported types are text/html, text/csv, text/plain.');\n                return;\n            }\n            getItem(d);\n        };\n        self.cut = function (e) {\n            self.copy(e);\n            self.forEachSelectedCell(function (data, index, colName) {\n                data[index][colName] = '';\n            });\n        };\n        self.copy = function (e) {\n            if (self.dispatchEvent('copy', {NativeEvent: e})) { return; }\n            if (!self.hasFocus || !e.clipboardData) { return; }\n            var t,\n                d,\n                data = (self.data || []),\n                tableRows = [],\n                textRows = [],\n                outputHeaders = {},\n                outputHeaderKeys,\n                sData = self.getSelectedData(),\n                s = self.getSchema();\n            function htmlSafe(v) {\n                return v.replace(/</g, '&lt;').replace(/>/g, '&gt;');\n            }\n            function fCopyCell(v) {\n                v = v === null || v === undefined ? '' : v;\n                return '<td>' + (typeof v === 'string' ? htmlSafe(v) : v) + '</td>';\n            }\n            function addHeaders(headers, useHtml) {\n                if (!s.length || headers.length < 2) { return ''; }\n                var h = [];\n                if (useHtml) {\n                    h.push('<tr>');\n                }\n                s.forEach(function (column, columnIndex) {\n                    // intentional redefinition of column\n                    column = s[self.orders.columns[columnIndex]];\n                    if (!column.hidden && headers.indexOf(column.name) !== -1) {\n                        var ev = {NativeEvent: e, column: column};\n                        if(self.dispatchEvent('copyonschema', ev)) {\n                            column = ev.column;\n                        }\n\n                        var hVal = (column.name || column.title) || '';\n                        if (useHtml) {\n                            h.push('<th>' + htmlSafe(hVal) + '</th>');\n                        } else {\n                            h.push('\"' + hVal.replace(/\"/g, '\"\"') + '\"');\n                        }\n                    }\n                });\n                h.push(useHtml ? '</tr>' : '\\n');\n                return h.join(useHtml ? '' : ',');\n            }\n            function addCellValue(val, trRow, textRow, column) {\n                // escape strings\n                if (val !== null\n                        && val !== false\n                        && val !== undefined\n                        && val.replace) {\n                    trRow.push(fCopyCell(val));\n                    textRow.push('\"' + val.replace(/\"/g, '\"\"') + '\"');\n                    return;\n                }\n                if (val !== undefined) {\n                    textRow.push(val);\n                    trRow.push(fCopyCell(val));\n                    return;\n                }\n                // issue #66\n                textRow.push('');\n                trRow.push('<td>&nbsp;</td>');\n            }\n            if (sData.length > 0) {\n                sData.forEach(function (row) {\n                    var rowKeys = Object.keys(row);\n                    if (row) {\n                        var trRow = [],\n                            textRow = [],\n                            sSorted = [];\n                        // HACK: https://github.com/TonyGermaneri/canvas-datagrid/issues/181\n                        // I can't use sort here or O(1), so hacks\n                        s.forEach(function (column, columnIndex) {\n                            sSorted.push(s[self.orders.columns[columnIndex]]);\n                        });\n                        sSorted.forEach(function (column, columnIndex) {\n                            if (rowKeys.indexOf(column.name) !== -1) {\n                                outputHeaders[column.name] = true;\n                                // escape strings\n                                addCellValue(row[column.name], trRow, textRow, column);\n                            }\n                        });\n                        tableRows.push(trRow.join(''));\n                        textRows.push(textRow.join(','));\n                    }\n                });\n                outputHeaderKeys = Object.keys(outputHeaders);\n                t = addHeaders(outputHeaderKeys) + textRows.join('\\n');\n                d = '<table>' + addHeaders(outputHeaderKeys, true) + '<tr>' + tableRows.join('</tr><tr>') + '</tr></table>';\n                if (outputHeaderKeys.length === 1) {\n                    // if there was only one cell selected, remove the quotes from the string\n                    t = t.substring(1, t.length -1);\n                }\n                e.clipboardData.setData('text/html', d);\n                e.clipboardData.setData('text/plain', t);\n                e.clipboardData.setData('text/csv', t);\n                e.clipboardData.setData('application/json', JSON.stringify(sData));\n                e.preventDefault();\n            }\n        };\n        return;\n    };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/events.js\n// module id = 4\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true, plusplus: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([], function () {\n    'use strict';\n    return function (self) {\n        var touchTimerMs = 50,\n            debounceTouchMove,\n            touchMoving,\n            touchScrollTimeout;\n        self.scrollAnimation = {};\n        self.touchDelta = {};\n        self.touchAnimateTo = {};\n        self.animationFrames = 0;\n        self.getTouchPos = function (e, touchIndex) {\n            var t = touchIndex ? e.touches[touchIndex] : e.touches[0],\n                rect = self.canvas.getBoundingClientRect(),\n                pos;\n            if (!t) { return; }\n            pos = {\n                x: t.clientX - rect.left,\n                y: t.clientY - rect.top\n            };\n            if (self.isChildGrid) {\n                pos.x -= self.canvasOffsetLeft;\n                pos.y -= self.canvasOffsetTop;\n            }\n            return {\n                x: pos.x,\n                y: pos.y,\n                rect: rect\n            };\n        };\n        // shamelessly stolen from from https://gist.github.com/gre/1650294\n        self.easingFunctions = {\n            linear: function (t) { return t; },\n            easeInQuad: function (t) { return t * t; },\n            easeOutQuad: function (t) { return t * (2 - t); },\n            easeInOutQuad: function (t) { return t < 0.5 ? 2 * t * t : -1 + (4 - 2 * t) * t; },\n            easeInCubic: function (t) { return t * t * t; },\n            easeOutCubic: function (t) { return (--t) * t * t + 1; },\n            easeInOutCubic: function (t) { return t < 0.5 ? 4 * t * t * t : (t - 1) * (2 * t - 2) * (2 * t - 2) + 1; },\n            easeInQuart: function (t) { return t * t * t * t; },\n            easeOutQuart: function (t) { return 1 - (--t) * t * t * t; },\n            easeInOutQuart: function (t) { return t < 0.5 ? 8 * t  * t  * t * t : 1 - 8 * (--t) * t * t * t; },\n            easeInQuint: function (t) { return t * t * t * t * t; },\n            easeOutQuint: function (t) { return 1 + (--t) * t *  t * t * t; },\n            easeInOutQuint: function (t) { return t < 0.5 ? 16 * t * t * t * t * t : 1 + 16 * (--t) * t * t * t * t; }\n        };\n        self.easing = function (t, b, c, d) {\n            return c * self.easingFunctions[self.attributes.touchEasingMethod](t / d) + b;\n        };\n        self.calculatePPSTimed = function () {\n            self.xPPST = -((self.touchDelta.x - self.touchSigmaTimed.x) / (self.touchDelta.t - self.touchSigmaTimed.t));\n            self.yPPST = -((self.touchDelta.y - self.touchSigmaTimed.y) / (self.touchDelta.t - self.touchSigmaTimed.t));\n            self.touchSigmaTimed = {\n                x: self.touchDelta.x,\n                y: self.touchDelta.y,\n                t: performance.now()\n            };\n        };\n        self.calculatePPS = function () {\n            self.xPPS = -((self.touchDelta.x - self.touchSigma.x) / (self.touchDelta.t - self.touchSigma.t));\n            self.yPPS = -((self.touchDelta.y - self.touchSigma.y) / (self.touchDelta.t - self.touchSigma.t));\n            self.touchSigma = {\n                x: self.touchDelta.x,\n                y: self.touchDelta.y,\n                t: performance.now()\n            };\n        };\n        self.touchEndAnimation = function () {\n            if (!self.canvas || !self.scrollBox.scrollTo) { return requestAnimationFrame(self.touchEndAnimation); }\n            var n = performance.now(),\n                d = self.attributes.touchReleaseAnimationDurationMs,\n                t;\n            t = n - self.touchDelta.t;\n            self.animationFrames += 1;\n            self.scrollAnimation.x = self.easing(t, self.touchDelta.scrollLeft, self.touchAnimateTo.x, d);\n            self.scrollAnimation.y = self.easing(t, self.touchDelta.scrollTop, self.touchAnimateTo.y, d);\n            if (t > d || (self.scrollAnimation.y === self.scrollBox.scrollTop\n                    && self.scrollAnimation.x === self.scrollBox.scrollLeft) || self.stopAnimation) {\n                return;\n            }\n            self.scrollBox.scrollTo(self.scrollAnimation.x, self.scrollAnimation.y);\n            requestAnimationFrame(self.touchEndAnimation);\n        };\n        self.touchEditCell = function (cell) {\n            self.beginEditAt(cell.columnIndex, cell.rowIndex);\n        };\n        self.touchCell = function (e) {\n            return function () {\n                clearInterval(self.calculatePPSTimer);\n                var i, pos = self.getTouchPos(e);\n                if (Math.abs(self.touchDelta.x) + Math.abs(self.touchDelta.y) < self.attributes.touchDeadZone) {\n                    i = self.getCellAt(pos.x, pos.y);\n                    if (!i) { return; }\n                    if (self.touchingCell && self.touchingCell.rowIndex === i.rowIndex\n                            && self.touchingCell.columnIndex === i.columnIndex) {\n                        self.touchEditCell(i);\n                        return;\n                    }\n                    if (self.input && self.input.editCell) {\n                        self.endEdit();\n                    }\n                    self.touchingCell = i;\n                    self.selectArea({\n                        top: i.rowIndex,\n                        bottom: i.rowIndex,\n                        left: i.columnIndex,\n                        right: i.columnIndex\n                    });\n                    self.draw(true);\n                }\n            };\n        };\n        self.touchstart = function (e) {\n            if (e.changedTouches[0]) {\n                self.touchStart = self.getTouchPos(e);\n                self.startingCell = self.getCellAt(self.touchStart.x, self.touchStart.y, true);\n            }\n            if (self.dispatchEvent('touchstart', {NativeEvent: e, cell: self.startingCell})) { return; }\n            self.disposeContextMenu();\n            clearInterval(self.calculatePPSTimer);\n            clearTimeout(self.touchContextTimeout);\n            self.touchStartEvent = e;\n            self.stopAnimation = true;\n            self.animationFrames = 0;\n            self.stopPropagation(e);\n            e.preventDefault();\n            if (e.touches.length === 1 && e.changedTouches[0] && !self.zoomAltered) {\n                self.touchLength = 1;\n                self.touchStart = self.touchStart || self.touchStart1;\n                self.touchScrollStart = {\n                    x: self.scrollBox.scrollLeft,\n                    y: self.scrollBox.scrollTop,\n                    t: performance.now()\n                };\n                self.touchDelta = {\n                    x: 0,\n                    y: 0,\n                    scrollLeft: self.scrollBox.scrollLeft,\n                    scrollTop: self.scrollBox.scrollTop,\n                    t: self.touchScrollStart.t\n                };\n                self.touchSigma = {\n                    x: self.touchDelta.x,\n                    y: self.touchDelta.y,\n                    t: self.touchDelta.t\n                };\n                self.touchSigmaTimed = {\n                    x: self.touchDelta.x,\n                    y: self.touchDelta.y,\n                    t: self.touchDelta.t\n                };\n                self.touchContextTimeout = setTimeout(function () {\n                    self.contextmenuEvent(e, self.touchStart);\n                }, self.attributes.touchContextMenuTimeMs);\n                self.calculatePPSTimer = setInterval(self.calculatePPSTimed, touchTimerMs);\n                if (self.startingCell && (self.startingCell.isGrid || ['tree', 'inherit'].indexOf(self.startingCell.context) !== -1)) {\n                    self.hasFocus = false;\n                    return;\n                }\n                self.hasFocus = true;\n                if (self.startingCell.isHeader) {\n                    if (self.startingCell.isRowHeader) {\n                        self.selectArea({\n                            top: self.startingCell.rowIndex,\n                            bottom: self.startingCell.rowIndex,\n                            left: 0,\n                            right: self.getVisibleSchema().length - 1,\n                        });\n                        self.draw(true);\n                    } else if (self.startingCell.isColumnHeader) {\n                        if (self.attributes.columnHeaderClickBehavior === 'sort') {\n                            if (self.orderBy === self.startingCell.header.name) {\n                                self.orderDirection = self.orderDirection === 'asc' ? 'desc' : 'asc';\n                            } else {\n                                self.orderDirection = 'asc';\n                            }\n                            self.order(self.startingCell.header.name, self.orderDirection);\n                        }\n                        if (self.attributes.columnHeaderClickBehavior === 'select') {\n                            self.selectArea({\n                                top: 0,\n                                bottom: self.data.length - 1,\n                                left: self.startingCell.columnIndex,\n                                right: self.startingCell.columnIndex,\n                            });\n                            self.draw(true);\n                        }\n                    }\n                    self.touchEndEvents(e);\n                    return;\n                }\n            }\n            if (self.zoomAltered) { return; }\n            document.body.addEventListener('touchmove', self.touchmove, {passive: false});\n            document.body.addEventListener('touchend', self.touchend, false);\n            document.body.addEventListener('touchcancel', self.touchcancel, false);\n            self.draw(true);\n        };\n        self.touchSelect = function (cell, handleType) {\n            if (cell.rowIndex === undefined || cell.columnIndex === undefined) { return; }\n            self.touchSelecting = true;\n            var bounds = self.getSelectionBounds();\n            if (handleType === 'selection-handle-bl'\n                    && cell.rowIndex >= bounds.top\n                    && cell.columnIndex <= bounds.right) {\n                bounds.bottom = cell.rowIndex;\n                bounds.left = cell.columnIndex;\n            } else if (handleType === 'selection-handle-tl'\n                    && cell.rowIndex <= bounds.bottom\n                    && cell.columnIndex <= bounds.right) {\n                bounds.top = cell.rowIndex;\n                bounds.left = cell.columnIndex;\n            } else if (handleType === 'selection-handle-tr'\n                    && cell.rowIndex <= bounds.bottom\n                    && cell.columnIndex >= bounds.left) {\n                bounds.top = cell.rowIndex;\n                bounds.right = cell.columnIndex;\n            } else if (handleType === 'selection-handle-br'\n                    && cell.rowIndex >= bounds.top\n                    && cell.columnIndex >= bounds.left) {\n                bounds.bottom = cell.rowIndex;\n                bounds.right = cell.columnIndex;\n            }\n            if (self.attributes.selectionMode === 'row' || cell.rowIndex === -1) {\n                bounds.left = 0;\n                bounds.right = self.getSchema().length - 1;\n            } else {\n                bounds.left = Math.max(0, bounds.left);\n            }\n            self.selectArea(bounds);\n            self.draw(true);\n        };\n        function touchMove(e) {\n            var ch, rw, rScrollZone, lScrollZone, bScrollZone, tScrollZone, sbw, t1, t2;\n            if (self.dispatchEvent('beforetouchmove', {NativeEvent: e})) { return; }\n            clearTimeout(touchScrollTimeout);\n            if (e.changedTouches[0]) {\n                self.touchPosition = self.getTouchPos(e);\n            }\n            if (e.changedTouches[1]) {\n                self.touchPosition1 = self.getTouchPos(e, 1);\n            }\n            if (Math.abs(self.touchDelta.x) + Math.abs(self.touchDelta.y) > self.attributes.touchDeadZone) {\n                clearTimeout(self.touchContextTimeout);\n            }\n            if (e.touches.length === 2 && self.touchPosition && self.touchPosition1) {\n                t1 = self.touchPosition.y;\n                t2 = self.touchPosition1.y;\n                if (!self.zoomDeltaStart) {\n                    self.zoomDeltaStart = Math.abs(t1 - t2);\n                    self.startScale = self.scale;\n                }\n                self.touchLength = 2;\n                self.scaleDelta = self.zoomDeltaStart - Math.abs(t1 - t2);\n                self.scale = self.startScale - (self.scaleDelta * self.attributes.touchZoomSensitivity);\n                self.scale = Math.min(Math.max(self.scale, self.attributes.touchZoomMin), self.attributes.touchZoomMax);\n                self.zoomAltered = true;\n                self.resize(true);\n                self.resizeChildGrids();\n                return;\n            }\n            if (self.zoomAltered) { return; }\n            self.touchLength = 1;\n            self.touchPosition = self.touchPosition || self.touchPosition1;\n            ch = self.getColumnHeaderCellHeight();\n            rw = self.getRowHeaderCellWidth();\n            rScrollZone = self.width - self.style.scrollBarWidth - self.touchPosition.x < self.attributes.selectionScrollZone;\n            lScrollZone = self.touchPosition.x - rw < self.attributes.selectionScrollZone;\n            bScrollZone = self.height - self.style.scrollBarWidth - self.touchPosition.y < self.attributes.selectionScrollZone;\n            tScrollZone = self.touchPosition.y - ch < self.attributes.selectionScrollZone;\n            sbw = self.style.scrollBarWidth;\n            function touchScroll() {\n                var x = self.scrollBox.scrollLeft,\n                    y = self.scrollBox.scrollTop;\n                x += (rScrollZone ? self.attributes.selectionScrollIncrement : 0);\n                y += (bScrollZone ? self.attributes.selectionScrollIncrement : 0);\n                y -= (tScrollZone ? self.attributes.selectionScrollIncrement : 0);\n                x -= (lScrollZone ? self.attributes.selectionScrollIncrement : 0);\n                self.scrollBox.scrollTo(x, y);\n                touchScrollTimeout = setTimeout(touchScroll, self.attributes.scrollRepeatRate);\n            }\n            e.stopPropagation();\n            self.touchDelta = {\n                x: self.touchPosition.x - self.touchStart.x,\n                y: self.touchPosition.y - self.touchStart.y,\n                scrollLeft: self.scrollBox.scrollLeft,\n                scrollTop: self.scrollBox.scrollTop,\n                t: performance.now()\n            };\n            self.currentCell = self.getCellAt(self.touchPosition.x, self.touchPosition.y);\n            self.dispatchEvent('touchmove', {NativeEvent: e, cell: self.currentCell});\n            self.calculatePPS();\n            self.touchDuration = performance.now() - self.touchScrollStart.t;\n            self.stopAnimation = true;\n            self.animationFrames = 0;\n            if (self.touchSelecting && (rScrollZone || lScrollZone || tScrollZone || bScrollZone)) {\n                touchScroll();\n            }\n            if (/vertical-scroll-/.test(self.startingCell.style)) {\n                self.scrollBox.scrollTop = self.scrollBox.scrollHeight\n                    * ((self.touchPosition.y - ch - sbw) / (self.scrollBox.height - sbw - ch));\n                return;\n            }\n            if (/horizontal-scroll-/.test(self.startingCell.style)) {\n                self.scrollBox.scrollLeft = self.scrollBox.scrollWidth\n                    * ((self.touchPosition.x - rw - sbw) / (self.scrollBox.width - sbw - rw));\n                return;\n            }\n            if (/selection-handle-/.test(self.startingCell.style)) {\n                self.touchSelect(self.currentCell, self.startingCell.style);\n                return;\n            }\n            self.scrollBox.scrollTo(self.touchScrollStart.x - self.touchDelta.x,\n                self.touchScrollStart.y - self.touchDelta.y);\n        };\n        self.touchmove = function (e) {\n            if (touchMoving) {\n                return;\n            }\n            requestAnimationFrame(function () {\n                touchMoving = true;\n                touchMove(e);\n                touchMoving = false;\n            });\n        };\n        self.touchEndEvents = function (e) {\n            self.zoomDeltaStart = undefined;\n            self.touchSelecting = false;\n            clearInterval(self.touchScrollTimeout);\n            clearInterval(self.touchContextTimeout);\n            clearInterval(self.calculatePPSTimer);\n            e.stopPropagation();\n            document.body.removeEventListener('touchmove', self.touchmove, {passive: false});\n            document.body.removeEventListener('touchend', self.touchend, false);\n            document.body.removeEventListener('touchcancel', self.touchcancel, false);\n        };\n        self.touchend = function (e) {\n            if (self.dispatchEvent('touchend', {NativeEvent: e, cell: self.currentCell})) { return; }\n            self.zoomDeltaStart = undefined;\n            if (e.changedTouches[0]) {\n                self.touchPosition = undefined;\n            }\n            if (e.changedTouches[1]) {\n                self.touchPosition1 = undefined;\n            }\n            if (self.zoomAltered) {\n                if (e.touches.length === 0) {\n                    self.zoomAltered = false;\n                }\n                return;\n            }\n            var dz = Math.abs(self.touchDelta.x) + Math.abs(self.touchDelta.y) < self.attributes.touchDeadZone;\n            if (isNaN(self.xPPS)) {\n                self.xPPS = 0;\n            }\n            if (isNaN(self.yPPS)) {\n                self.yPPS = 0;\n            }\n            if (isNaN(self.xPPST)) {\n                self.xPPST = 0;\n            }\n            if (isNaN(self.yPPST)) {\n                self.yPPST = 0;\n            }\n            self.touchAnimateTo.x = self.xPPS * self.attributes.touchReleaseAcceleration;\n            self.touchAnimateTo.y = self.yPPS * self.attributes.touchReleaseAcceleration;\n            self.calculatePPSTimed();\n            if (dz && !self.contextMenu) {\n                self.touchCell(self.touchStartEvent)();\n            } else if (self.animationFrames === 0\n                    && (Math.abs(self.xPPST) > self.attributes.scrollAnimationPPSThreshold\n                        || Math.abs(self.yPPST) > self.attributes.scrollAnimationPPSThreshold)\n                    && !/-scroll-/.test(self.startingCell.style)\n                    && !dz) {\n                self.stopAnimation = false;\n                self.touchEndAnimation();\n            }\n            self.touchEndEvents(e);\n        };\n        self.touchcancel = function (e) {\n            if (self.dispatchEvent('touchcancel', {NativeEvent: e, cell: self.currentCell})) { return; }\n            self.touchEndEvents(e);\n        };\n    };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/touch.js\n// module id = 5\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true*/\n/*globals HTMLElement: false, Reflect: false, define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([], function () {\n    'use strict';\n    return function (self, ctor) {\n        self.scale = 1;\n        self.orders = {\n            rows: [],\n            columns: []\n        };\n        self.appliedInlineStyles = {};\n        self.cellGridAttributes = {};\n        self.treeGridAttributes = {};\n        self.visibleRowHeights = [];\n        self.hasFocus = false;\n        self.activeCell = {\n            columnIndex: 0,\n            rowIndex: 0\n        };\n        self.innerHTML = '';\n        self.storageName = 'canvasDataGrid';\n        self.invalidSearchExpClass = 'canvas-datagrid-invalid-search-regExp';\n        self.localStyleLibraryStorageKey = 'canvas-datagrid-user-style-library';\n        self.dataType = 'application/x-canvas-datagrid';\n        self.orderBy = null;\n        self.orderDirection = 'asc';\n        self.orderings = {\n            columns: [],\n            add: function (orderBy, orderDirection, sortFunction) {\n                self.orderings.columns = self.orderings.columns.filter(function (col) {\n                    return col.orderBy !== orderBy;\n                });\n                self.orderings.columns.push({\n                    orderBy: orderBy,\n                    orderDirection: orderDirection,\n                    sortFunction: sortFunction\n                });\n            },\n            sort: function () {\n                self.orderings.columns.forEach(function (col) {\n                    self.data.sort(col.sortFunction(col.orderBy, col.orderDirection));\n                });\n            }\n        };\n        self.columnFilters = {};\n        self.filters = {};\n        self.frozenRow = 0;\n        self.frozenColumn = 0;\n        self.ellipsisCache = {};\n        self.scrollCache = { x: [], y: [] };\n        self.scrollBox = {};\n        self.visibleRows = [];\n        self.visibleCells = [];\n        self.sizes = {\n            rows: {},\n            columns: {},\n            trees: {}\n        };\n        self.currentFilter = function () {\n            return true;\n        };\n        self.selections = [];\n        self.hovers = {};\n        self.attributes = {};\n        self.style = {};\n        self.formatters = {};\n        self.sorters = {};\n        self.parsers = {};\n        self.schemaHashes = {};\n        self.events = {};\n        self.changes = [];\n        self.scrollIndexTop = 0;\n        self.scrollPixelTop = 0;\n        self.scrollIndexLeft = 0;\n        self.scrollPixelLeft = 0;\n        self.childGrids = {};\n        self.openChildren = {};\n        self.scrollModes = [\n            'vertical-scroll-box',\n            'vertical-scroll-top',\n            'vertical-scroll-bottom',\n            'horizontal-scroll-box',\n            'horizontal-scroll-right',\n            'horizontal-scroll-left'\n        ];\n        self.componentL1Events = {};\n        self.eventNames = ['afterdraw', 'afterrendercell', 'attributechanged', 'beforebeginedit',\n            'beforecreatecellgrid', 'beforedraw', 'beforeendedit', 'beforerendercell', 'beforerendercellgrid',\n            'beginedit', 'cellmouseout', 'cellmouseover', 'click', 'collapsetree', 'contextmenu', 'copy',\n            'datachanged', 'dblclick', 'endedit', 'expandtree', 'formatcellvalue', 'keydown', 'keypress',\n            'keyup', 'mousedown', 'mousemove', 'mouseup', 'newrow', 'ordercolumn', 'rendercell', 'rendercellgrid',\n            'renderorderbyarrow', 'rendertext', 'rendertreearrow', 'reorder', 'reordering', 'resize',\n            'resizecolumn', 'resizerow', 'schemachanged', 'scroll', 'selectionchanged', 'stylechanged',\n            'touchcancel', 'touchend', 'touchmove', 'touchstart', 'wheel'];\n        self.mouse = { x: 0, y: 0};\n        self.getSelectedData = function (expandToRow) {\n            var d = [], s = self.getSchema(), l = self.data.length;\n            if (l === 0) { return []; }\n            self.selections.forEach(function (row, index) {\n                if (!row) { return; }\n                if (index === l) { return; }\n                if (row.length === 0) {\n                    d[index] = null;\n                    return;\n                }\n                d[index] = {};\n                row.forEach(function (col) {\n                    var orderedIndex;\n                    if (col === -1 || !s[col]) { return; }\n                    orderedIndex = self.orders.columns[col];\n                    if (!expandToRow && s[orderedIndex].hidden) { return; }\n                    if (self.data[index]) {\n                        d[index][s[orderedIndex].name] = self.data[index][s[orderedIndex].name];\n                    }\n                });\n            });\n            return d;\n        };\n        self.getColumnHeaderCellHeight = function () {\n            if (!self.attributes.showColumnHeaders) { return 0; }\n            return ((self.sizes.rows[-1] || self.style.columnHeaderCellHeight) * self.scale);\n        };\n        self.getRowHeaderCellWidth = function () {\n            if (!self.attributes.showRowHeaders) { return 0; }\n            return (self.sizes.columns[-1] || self.style.rowHeaderCellWidth) * self.scale;\n        };\n        self.setStorageData = function () {\n            if (!self.attributes.saveAppearance || !self.attributes.name) { return; }\n            var visibility = {};\n            self.getSchema().forEach(function (column) {\n                visibility[column.name] = !column.hidden;\n            });\n            localStorage.setItem(self.storageName + '-' + self.attributes.name, JSON.stringify({\n                sizes: {\n                    rows: self.sizes.rows,\n                    columns: self.sizes.columns\n                },\n                orders: {\n                    rows: self.orders.rows,\n                    columns: self.orders.columns\n                },\n                orderBy: self.orderBy,\n                orderDirection: self.orderDirection,\n                visibility: visibility\n            }));\n        };\n        self.getSchema = function () {\n            return self.schema || self.tempSchema || [];\n        };\n        function fillArray(low, high) {\n            var i = [], x;\n            for (x = low; x <= high; x += 1) {\n                i[x] = x;\n            }\n            return i;\n        }\n        self.createColumnOrders = function () {\n            var s = self.getSchema();\n            self.orders.columns = fillArray(0, s.length - 1);\n        };\n        self.createRowOrders = function () {\n            self.orders.rows = fillArray(0, self.data.length - 1);\n        };\n        self.getVisibleSchema = function () {\n            return self.getSchema().filter(function (col) {\n                return !col.hidden;\n            });\n        };\n        self.applyDefaultValue = function (row, header) {\n            var d = header.defaultValue || '';\n            if (typeof d === 'function') {\n                d = d.apply(self.intf, [header]);\n            }\n            row[header.name] = d;\n        };\n        self.createNewRowData = function () {\n            self.newRow = {};\n            self.getSchema().forEach(function forEachHeader(header) {\n                self.applyDefaultValue(self.newRow, header);\n            });\n        };\n        self.getSchemaNameHash = function (key) {\n            var n = 0;\n            while (self.schemaHashes[key]) {\n                n += 1;\n                key = key + n;\n            }\n            return key;\n        };\n        self.filter = function (type) {\n            var f = self.filters[type];\n            if (!f && type !== undefined) {\n                console.warn('Cannot find filter for type %s, falling back to substring match.', type);\n                f = self.filters.string;\n            }\n            return f;\n        };\n        self.applyFilter = function () {\n            self.refreshFromOrigialData();\n            Object.keys(self.columnFilters).forEach(function (filter) {\n                var header = self.getHeaderByName(filter);\n                if (!header) {\n                    return;\n                }\n                self.currentFilter = header.filter || self.filter(header.type || 'string');\n                self.data = self.data.filter(function (row) {\n                    return self.currentFilter(row[filter], self.columnFilters[filter]);\n                });\n            });\n            self.resize();\n            self.draw(true);\n        };\n        self.applyDataTransforms = function () {\n            self.applyFilter();\n            self.orderings.sort();\n        }\n        self.getBestGuessDataType = function (columnName, data) {\n            var t, x, l = data.length;\n            for (x = 0; x < l; x += 1) {\n                if (data[x] !== undefined && data[x] !== null && [null, undefined].indexOf(data[x][columnName]) !== -1) {\n                    t = typeof data[x];\n                    return t === 'object' ? 'string' : t;\n                }\n            }\n            return 'string';\n        };\n        self.drawChildGrids = function () {\n            Object.keys(self.childGrids).forEach(function (gridKey) {\n                self.childGrids[gridKey].draw();\n            });\n        };\n        self.resizeChildGrids = function () {\n            Object.keys(self.childGrids).forEach(function (gridKey) {\n                self.childGrids[gridKey].resize();\n            });\n        };\n        self.autoScrollZone = function (e, x, y, ctrl) {\n            var setTimer,\n                rowHeaderCellWidth = self.getRowHeaderCellWidth(),\n                columnHeaderCellHeight = self.getColumnHeaderCellHeight();\n            if (y !== -1) {\n                if (x > self.width - self.attributes.selectionScrollZone && x < self.width) {\n                    self.scrollBox.scrollLeft += self.attributes.selectionScrollIncrement;\n                    setTimer = true;\n                }\n                if (x - self.attributes.selectionScrollZone - rowHeaderCellWidth < 0) {\n                    self.scrollBox.scrollLeft -= self.attributes.selectionScrollIncrement;\n                    setTimer = true;\n                }\n            }\n            if (y !== -1) {\n                if (y > self.height - self.attributes.selectionScrollZone && y < self.height) {\n                    self.scrollBox.scrollTop += self.attributes.selectionScrollIncrement;\n                    setTimer = true;\n                }\n                if (y - self.attributes.selectionScrollZone - columnHeaderCellHeight < 0) {\n                    self.scrollBox.scrollTop -= self.attributes.selectionScrollIncrement;\n                    setTimer = true;\n                }\n            }\n            if (setTimer && !ctrl && self.currentCell && self.currentCell.columnIndex !== -1) {\n                self.scrollTimer = setTimeout(self.mousemove, self.attributes.scrollRepeatRate, e);\n            }\n        };\n        self.refreshFromOrigialData = function () {\n            self.data = self.originalData.filter(function (row) {\n                return true;\n            });\n        };\n        self.validateColumn = function (c, s) {\n            if (!c.name) {\n                throw new Error('A column must contain at least a name.');\n            }\n            if (s.filter(function (i) { return i.name === c.name; }).length > 0) {\n                throw new Error('A column with the name '\n                    + c.name + ' already exists and cannot be added again.');\n            }\n            return true;\n        };\n        self.setDefaults = function (obj1, obj2, key, def) {\n            obj1[key] = obj2[key] === undefined ? def : obj2[key];\n        };\n        self.setAttributes = function () {\n            self.defaults.attributes.forEach(function eachAttribute(i) {\n                self.setDefaults(self.attributes, self.args, i[0], i[1]);\n            });\n        };\n        self.setStyle = function () {\n            self.defaults.styles.forEach(function eachStyle(i) {\n                self.setDefaults(self.style, self.args.style || {}, i[0], i[1]);\n            });\n        };\n        self.autosize = function (colName) {\n            self.getVisibleSchema().forEach(function (col, colIndex) {\n                if (col.name === colName || colName === undefined) {\n                    self.sizes.columns[colIndex]\n                        = Math.max(self.findColumnMaxTextLength(col.name), self.style.minColumnWidth);\n                }\n            });\n            self.sizes.columns[-1] = self.findColumnMaxTextLength('cornerCell');\n        };\n        self.dispose = function () {\n            if (!self.isChildGrid && self.canvas && self.canvas.parentNode) {\n                self.canvas.parentNode.removeChild(self.canvas);\n            }\n            if(!self.isChildGrid) {\n                document.body.removeChild(self.controlInput)\n            }\n            self.eventParent.removeEventListener('mouseup', self.mouseup, false);\n            self.eventParent.removeEventListener('mousedown', self.mousedown, false);\n            self.eventParent.removeEventListener('dblclick', self.dblclick, false);\n            self.eventParent.removeEventListener('click', self.click, false);\n            self.eventParent.removeEventListener('mousemove', self.mousemove);\n            self.eventParent.removeEventListener('wheel', self.scrollWheel, false);\n            self.canvas.removeEventListener('contextmenu', self.contextmenu, false);\n            self.canvas.removeEventListener('copy', self.copy);\n            self.controlInput.removeEventListener('copy', self.copy);\n            self.controlInput.removeEventListener('cut', self.cut);\n            self.controlInput.removeEventListener('paste', self.paste);\n            self.controlInput.removeEventListener('keypress', self.keypress, false);\n            self.controlInput.removeEventListener('keyup', self.keyup, false);\n            self.controlInput.removeEventListener('keydown', self.keydown, false);\n            window.removeEventListener('resize', self.resize);\n            if (self.observer && self.observer.disconnect) {\n                self.observer.disconnect();\n            }\n        };\n        self.tryLoadStoredSettings = function () {\n            var s;\n            self.reloadStoredValues();\n            if (self.storedSettings\n                    && typeof self.storedSettings.orders === 'object'\n                    && self.storedSettings.orders !== null) {\n                if (self.storedSettings.orders.rows.length >= (self.data || []).length) {\n                    self.orders.rows = self.storedSettings.orders.rows;\n                }\n                s = self.getSchema();\n                if (self.storedSettings.orders.columns.length === s.length) {\n                    self.orders.columns = self.storedSettings.orders.columns;\n                }\n                self.orderBy = self.storedSettings.orderBy === undefined\n                    ? s[0].name : self.storedSettings.orderBy;\n                self.orderDirection = self.storedSettings.orderDirection === undefined\n                    ? 'asc' : self.storedSettings.orderDirection;\n                if (self.storedSettings.orderBy !== undefined && self.getHeaderByName(self.orderBy) && self.orderDirection) {\n                    self.order(self.orderBy, self.orderDirection);\n                }\n            }\n        };\n        self.getDomRoot = function () {\n            return self.shadowRoot ? self.shadowRoot.host : self.parentNode;\n        };\n        self.getFontName = function (fontStyle) {\n            return fontStyle.replace(/\\d+\\.?\\d*px/, '');\n        };\n        self.getFontHeight = function (fontStyle) {\n            return parseFloat(fontStyle, 10);\n        };\n        self.parseStyleValue = function (key) {\n            if (/Font/.test(key)) {\n                self.style[key + 'Height'] = self.getFontHeight(self.style[key]);\n                self.style[key + 'Name'] = self.getFontName(self.style[key]);\n                return;\n            }\n            // when inheriting styles from already instantiated grids, don't parse already parsed values.\n            if (key === 'moveOverlayBorderSegments' && typeof self.style[key] === 'string') {\n                self.style[key] = self.style[key].split(',')\n                    .map(function (i) { return parseInt(i, 10); });\n            }\n        };\n        self.initProp = function (propName) {\n            if (!self.args[propName]) { return; }\n            Object.keys(self.args[propName]).forEach(function (key) {\n                self[propName][key] = self.args[propName][key];\n            });\n        };\n        self.getStyleProperty = function (key) {\n            if (self.styleKeys.indexOf(key) === -1) {\n                return self.parentNodeStyle[key];\n            }\n            return self.style[key];\n        };\n        self.setStyleProperty = function (key, value, supressDrawAndEvent) {\n            var isDim = ['height', 'width', 'minHeight', 'minWidth', 'maxHeight', 'maxWidth'].indexOf(key) !== -1;\n            if (self.styleKeys.indexOf(key) === -1) {\n                self.parentNodeStyle[key] = value;\n            } else {\n                if (/-/.test(key)) {\n                    key = self.dehyphenateProperty(key);\n                }\n                self.style[key] = value;\n                self.parseStyleValue(key);\n            }\n            if (isDim) {\n                self.resize();\n            }\n            if (!supressDrawAndEvent) {\n                self.draw(true);\n                self.dispatchEvent('stylechanged', {name: 'style', value: value});\n            }\n        };\n        self.reloadStoredValues = function () {\n            if (self.attributes.name && self.attributes.saveAppearance) {\n                try {\n                    self.storedSettings = localStorage.getItem(self.storageName + '-' + self.attributes.name);\n                } catch (e) {\n                    console.warn(\"Error loading stored values. \" + e.message);\n                    self.storedSettings = undefined;\n                }\n                if (self.storedSettings) {\n                    try {\n                        self.storedSettings = JSON.parse(self.storedSettings);\n                    } catch (e) {\n                        console.warn('could not read settings from localStore', e);\n                        self.storedSettings = undefined;\n                    }\n                }\n                if (self.storedSettings) {\n                    if (typeof self.storedSettings.sizes === 'object'\n                            && self.storedSettings.sizes !== null) {\n                        self.sizes.rows = self.storedSettings.sizes.rows;\n                        self.sizes.columns = self.storedSettings.sizes.columns;\n                        ['trees', 'columns', 'rows'].forEach(function (i) {\n                            if (!self.sizes[i]) {\n                                self.sizes[i] = {};\n                            }\n                        });\n                    }\n                    if (typeof self.storedSettings.visibility === 'object') {\n                        self.getSchema().forEach(function (column) {\n                            if (self.storedSettings.visibility && self.storedSettings.visibility[column.name] !== undefined) {\n                                column.hidden = !self.storedSettings.visibility[column.name];\n                            }\n                        });\n                    }\n                }\n            }\n        };\n        self.init = function () {\n            if (self.initialized) { return; }\n            function addStyleKeyIfNoneExists(key) {\n                if (self.styleKeys.indexOf(key) === -1) {\n                    self.styleKeys.push(key);\n                }\n            }\n            var publicStyleKeyIntf = {};\n            self.setAttributes();\n            self.setStyle();\n            self.initScrollBox();\n            self.setDom();\n            self.nodeType = 'canvas-datagrid';\n            self.ie = /Trident/.test(window.navigator.userAgent);\n            self.edge = /Edge/.test(window.navigator.userAgent);\n            self.webKit = /WebKit/.test(window.navigator.userAgent);\n            self.moz = /Gecko/.test(window.navigator.userAgent);\n            self.mobile = /Mobile/i.test(window.navigator.userAgent);\n            self.cursorGrab = 'grab';\n            self.cursorGrabing = 'grabbing';\n            self.cursorGrab = self.webKit ? '-webkit-grab' : self.cursorGrab;\n            self.cursorGrabing = self.moz ? '-webkit-grabbing' : self.cursorGrabbing;\n            self.pointerLockPosition = {x: 0, y: 0};\n            Object.keys(self.style).forEach(self.parseStyleValue);\n            self.intf.moveSelection = self.moveSelection;\n            self.intf.moveTo = self.moveTo;\n            self.intf.addEventListener = self.addEventListener;\n            self.intf.removeEventListener = self.removeEventListener;\n            self.intf.dispatchEvent = self.dispatchEvent;\n            /**\n             * Releases grid resources and removes grid elements.\n             * @memberof canvasDatagrid\n             * @name dispose\n             * @method\n             */\n            self.intf.dispose = self.dispose;\n            /**\n             * Appends the grid to another element later.  Not implemented.\n             * @memberof canvasDatagrid\n             * @name appendTo\n             * @method\n             * @param {number} el The element to append the grid to.\n             */\n            self.intf.appendTo = self.appendTo;\n            self.intf.getVisibleCellByIndex = self.getVisibleCellByIndex;\n            self.intf.filters = self.filters;\n            self.intf.sorters = self.sorters;\n            self.intf.autosize = self.autosize;\n            self.intf.beginEditAt = self.beginEditAt;\n            self.intf.endEdit = self.endEdit;\n            self.intf.setActiveCell = self.setActiveCell;\n            self.intf.forEachSelectedCell = self.forEachSelectedCell;\n            self.intf.scrollIntoView = self.scrollIntoView;\n            self.intf.clearChangeLog = self.clearChangeLog;\n            self.intf.gotoCell = self.gotoCell;\n            self.intf.gotoRow = self.gotoRow;\n            self.intf.getHeaderByName = self.getHeaderByName;\n            self.intf.findColumnScrollLeft = self.findColumnScrollLeft;\n            self.intf.findRowScrollTop = self.findRowScrollTop;\n            self.intf.fitColumnToValues = self.fitColumnToValues;\n            self.intf.findColumnMaxTextLength = self.findColumnMaxTextLength;\n            self.intf.disposeContextMenu = self.disposeContextMenu;\n            self.intf.getCellAt = self.getCellAt;\n            self.intf.isCellVisible = self.isCellVisible;\n            self.intf.isRowVisible = self.isRowVisible;\n            self.intf.isColumnVisible = self.isColumnVisible;\n            self.intf.order = self.order;\n            self.intf.draw = self.draw;\n            self.intf.isComponent = self.isComponent;\n            self.intf.selectArea = self.selectArea;\n            self.intf.clipElement = self.clipElement;\n            self.intf.getSchemaFromData = self.getSchemaFromData;\n            self.intf.setFilter = self.setFilter;\n            self.intf.selectRow = self.selectRow;\n            self.intf.parentGrid = self.parentGrid;\n            self.intf.toggleTree = self.toggleTree;\n            self.intf.expandTree = self.expandTree;\n            self.intf.collapseTree = self.collapseTree;\n            self.intf.canvas = self.canvas;\n            self.intf.context = self.ctx;\n            self.intf.insertRow = self.insertRow;\n            self.intf.deleteRow = self.deleteRow;\n            self.intf.addRow = self.addRow;\n            self.intf.insertColumn = self.insertColumn;\n            self.intf.deleteColumn = self.deleteColumn;\n            self.intf.addColumn = self.addColumn;\n            self.intf.getClippingRect = self.getClippingRect;\n            self.intf.setRowHeight = self.setRowHeight;\n            self.intf.setColumnWidth = self.setColumnWidth;\n            self.intf.resetColumnWidths = self.resetColumnWidths;\n            self.intf.resetRowHeights = self.resetRowHeights;\n            self.intf.resize = self.resize;\n            self.intf.selectColumn = self.selectColumn;\n            self.intf.selectRow = self.selectRow;\n            self.intf.selectAll = self.selectAll;\n            self.intf.selectNone = self.selectNone;\n            self.intf.drawChildGrids = self.drawChildGrids;\n            self.intf.assertPxColor = self.assertPxColor;\n            self.intf.clearPxColorAssertions = self.clearPxColorAssertions;\n            self.intf.integerToAlpha = self.integerToAlpha;\n            self.intf.copy = self.copy;\n            self.intf.setStyleProperty = self.setStyleProperty;\n            Object.defineProperty(self.intf, 'defaults', {\n                get: function () {\n                    return {\n                        styles: self.defaults.styles.reduce(function (a, i) { a[i[0]] = i[1]; return a; }, {}),\n                        attributes: self.defaults.attributes.reduce(function (a, i) { a[i[0]] = i[1]; return a; }, {})\n                    };\n                }\n            });\n            self.styleKeys = Object.keys(self.intf.defaults.styles);\n            self.styleKeys.map(function (i) { return self.hyphenateProperty(i, false); }).forEach(addStyleKeyIfNoneExists);\n            self.styleKeys.map(function (i) { return self.hyphenateProperty(i, true); }).forEach(addStyleKeyIfNoneExists);\n            self.DOMStyles = window.getComputedStyle(document.body, null);\n            self.styleKeys.concat(Object.keys(self.DOMStyles)).forEach(function (key) {\n                // unless this line is here, Object.keys() will not work on <instance>.style\n                publicStyleKeyIntf[key] = undefined;\n                Object.defineProperty(publicStyleKeyIntf, key, {\n                    get: function () {\n                        return self.getStyleProperty(key);\n                    },\n                    set: function (value) {\n                        if (self.initialized) {\n                            self.appliedInlineStyles[key] = value;\n                        }\n                        self.setStyleProperty(key, value);\n                    }\n                });\n            });\n            Object.defineProperty(self.intf, 'shadowRoot', {\n                get: function () {\n                    return self.shadowRoot;\n                }\n            });\n            Object.defineProperty(self.intf, 'activeCell', {\n                get: function () {\n                    return self.activeCell;\n                }\n            });\n            Object.defineProperty(self.intf, 'hasFocus', {\n                get: function () {\n                    return self.hasFocus;\n                }\n            });\n            Object.defineProperty(self.intf, 'style', {\n                get: function () {\n                    return publicStyleKeyIntf;\n                },\n                set: function (valueObject) {\n                    Object.keys(valueObject).forEach(function (key) {\n                        self.setStyleProperty(key, valueObject[key], true);\n                    });\n                    self.draw(true);\n                    self.dispatchEvent('stylechanged', {name: 'style', value: valueObject});\n                }\n            });\n            Object.defineProperty(self.intf, 'attributes', { value: {}});\n            Object.keys(self.attributes).forEach(function (key) {\n                Object.defineProperty(self.intf.attributes, key, {\n                    get: function () {\n                        return self.attributes[key];\n                    },\n                    set: function (value) {\n                        self.attributes[key] = value;\n                        if (key === 'name') {\n                            self.tryLoadStoredSettings();\n                        }\n                        self.draw(true);\n                        self.dispatchEvent('attributechanged', {name: key, value: value[key]});\n                    }\n                });\n            });\n            self.filters.string = function (value, filterFor) {\n                value = String(value);\n                var filterRegExp,\n                    regEnd = /\\/(i|g|m)*$/,\n                    pattern = regEnd.exec(filterFor),\n                    flags = pattern ? pattern[0].substring(1) : '',\n                    flagLength = flags.length;\n                self.invalidFilterRegEx = undefined;\n                if (filterFor.substring(0, 1) === '/' && pattern) {\n                    try {\n                        filterRegExp = new RegExp(filterFor.substring(1, filterFor.length - (flagLength + 1)), flags);\n                    } catch (e) {\n                        self.invalidFilterRegEx = e;\n                        return;\n                    }\n                    return filterRegExp.test(value);\n                }\n                return value.toString ? value.toString().toLocaleUpperCase()\n                    .indexOf(filterFor.toLocaleUpperCase()) !== -1 : false;\n            };\n            self.filters.number = function (value, filterFor) {\n                if (!filterFor) { return true; }\n                return value === filterFor;\n            };\n            ['formatters', 'filters', 'sorters'].forEach(self.initProp);\n            self.applyComponentStyle(false, self.intf);\n            self.reloadStoredValues();\n            if (self.args.data) {\n                self.intf.data = self.args.data;\n            }\n            if (self.intf.innerText || self.intf.textContent) {\n                if (self.intf.dataType === 'application/x-canvas-datagrid') {\n                    self.intf.dataType = 'application/json+x-canvas-datagrid';\n                }\n                self.intf.data = self.intf.innerText || self.intf.textContent;\n            }\n            if (self.args.schema) {\n                self.intf.schema = self.args.schema;\n            }\n            if (self.isChildGrid || !self.isComponent) {\n                requestAnimationFrame(function () { self.resize(true); });\n            } else {\n                self.resize(true);\n            }\n            self.initialized = true;\n            return self;\n        };\n        /**\n         * Removes focus from the grid.\n         * @memberof canvasDatagrid\n         * @name blur\n         * @method\n         */\n        self.intf.blur = function (e) {\n            self.hasFocus = false;\n        };\n        /**\n         * Focuses on the grid.\n         * @memberof canvasDatagrid\n         * @name focus\n         * @method\n         */\n        self.intf.focus = function () {\n            self.hasFocus = true;\n            self.controlInput.focus();\n        };\n        if (self.shadowRoot || self.isChildGrid) {\n            Object.defineProperty(self.intf, 'height', {\n                get: function () {\n                    if (self.shadowRoot) {\n                        return self.shadowRoot.height;\n                    }\n                    return self.parentNode.height;\n                },\n                set: function (value) {\n                    if (self.shadowRoot) {\n                        self.shadowRoot.height = value;\n                    } else {\n                        self.parentNode.height = value;\n                    }\n                    self.resize(true);\n                }\n            });\n            Object.defineProperty(self.intf, 'width', {\n                get: function () {\n                    if (self.shadowRoot) {\n                        return self.shadowRoot.width;\n                    }\n                    return self.parentNode.width;\n                },\n                set: function (value) {\n                    if (self.shadowRoot) {\n                        self.shadowRoot.width = value;\n                    } else {\n                        self.parentNode.width = value;\n                    }\n                    self.resize(true);\n                }\n            });\n            Object.defineProperty(self.intf, 'parentNode', {\n                get: function () {\n                    return self.parentNode;\n                },\n                set: function (value) {\n                    if (!self.isChildGrid) {\n                        throw new TypeError('Cannot set property parentNode which has only a getter');\n                    }\n                    self.parentNode = value;\n                }\n            });\n        }\n        Object.defineProperty(self.intf, 'visibleRowHeights', {\n            get: function () {\n                return self.visibleRowHeights;\n            }\n        });\n        Object.defineProperty(self.intf, 'openChildren', {\n            get: function () {\n                return self.openChildren;\n            }\n        });\n        Object.defineProperty(self.intf, 'childGrids', {\n            get: function () {\n                return Object.keys(self.childGrids).map(function (gridId) {\n                    return self.childGrids[gridId];\n                });\n            }\n        });\n        Object.defineProperty(self.intf, 'isChildGrid', {\n            get: function () {\n                return self.isChildGrid;\n            }\n        });\n        Object.defineProperty(self, 'cursor', {\n            get: function () {\n                return self.parentNodeStyle.cursor;\n            },\n            set: function (value) {\n                if (value === 'cell') { value = 'default'; }\n                if (self.currentCursor !== value) {\n                    self.parentNodeStyle.cursor = value;\n                    self.currentCursor = value;\n                }\n            }\n        });\n        Object.defineProperty(self.intf, 'orderDirection', {\n            get: function () {\n                return self.orderDirection;\n            },\n            set: function (value) {\n                if (value !== 'desc') {\n                    value = 'asc';\n                }\n                self.orderDirection = value;\n                self.order(self.orderBy, self.orderDirection);\n            }\n        });\n        Object.defineProperty(self.intf, 'orderBy', {\n            get: function () {\n                return self.orderBy;\n            },\n            set: function (value) {\n                if (self.getSchema().find(function (col) {\n                        return col.name === value;\n                    }) === undefined) {\n                    throw new Error('Cannot sort by unknown column name.');\n                }\n                self.orderBy = value;\n                self.order(self.orderBy, self.orderDirection);\n            }\n        });\n        if (self.isComponent) {\n            Object.defineProperty(self.intf, 'offsetHeight', {\n                get: function () {\n                    return self.canvas.offsetHeight;\n                }\n            });\n            Object.defineProperty(self.intf, 'offsetWidth', {\n                get: function () {\n                    return self.canvas.offsetWidth;\n                }\n            });\n        }\n        Object.defineProperty(self.intf, 'scrollHeight', {\n            get: function () {\n                return self.scrollBox.scrollHeight;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollWidth', {\n            get: function () {\n                return self.scrollBox.scrollWidth;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollTop', {\n            get: function () {\n                return self.scrollBox.scrollTop;\n            },\n            set: function (value) {\n                self.scrollBox.scrollTop = value;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollLeft', {\n            get: function () {\n                return self.scrollBox.scrollLeft;\n            },\n            set: function (value) {\n                self.scrollBox.scrollLeft = value;\n            }\n        });\n        Object.defineProperty(self.intf, 'sizes', {\n            get: function () {\n                return self.sizes;\n            }\n        });\n        Object.defineProperty(self.intf, 'parentDOMNode', {\n            get: function () {\n                return self.parentDOMNode;\n            }\n        });\n        Object.defineProperty(self.intf, 'input', {\n            get: function () {\n                return self.input;\n            }\n        });\n        Object.defineProperty(self.intf, 'controlInput', {\n            get: function () {\n                return self.controlInput;\n            }\n        });\n        Object.defineProperty(self.intf, 'currentCell', {\n            get: function () {\n                return self.currentCell;\n            }\n        });\n        Object.defineProperty(self.intf, 'visibleCells', {\n            get: function () {\n                return self.visibleCells;\n            }\n        });\n        Object.defineProperty(self.intf, 'visibleRows', {\n            get: function () {\n                return self.visibleRows;\n            }\n        });\n        Object.defineProperty(self.intf, 'selections', {\n            get: function () {\n                return self.selections;\n            }\n        });\n        Object.defineProperty(self.intf, 'dragMode', {\n            get: function () {\n                return self.dragMode;\n            }\n        });\n        Object.defineProperty(self.intf, 'changes', {\n            get: function () {\n                return self.changes;\n            }\n        });\n        self.intf.formatters = self.formatters;\n        Object.defineProperty(self.intf, 'dataType', {\n            get: function () {\n                return self.dataType;\n            },\n            set: function (value) {\n                if (!self.parsers[value]) {\n                    throw new Error('No parser for MIME type ' + value);\n                }\n                self.dataType = value;\n            }\n        });\n        self.eventNames.forEach(function (eventName) {\n            Object.defineProperty(self.intf, 'on' + eventName, {\n                get: function () {\n                    return self.componentL1Events[eventName];\n                },\n                set: function (value) {\n                    self.events[eventName] = [];\n                    self.componentL1Events[eventName] = value;\n                    if (!value) { return; }\n                    self.addEventListener(eventName, value);\n                }\n            });\n        });\n        Object.defineProperty(self.intf, 'frozenRow', {\n            get: function () {\n                return self.frozenRow;\n            },\n            set: function (val) {\n                if (isNaN(val)) {\n                    throw new TypeError('Expected value for frozenRow to be a number.');\n                }\n                if (self.visibleRows.length < val) {\n                    throw new RangeError('Cannot set a value larger than the number of visible rows.');\n                }\n                self.frozenRow = val;\n            }\n        });\n        Object.defineProperty(self.intf, 'frozenColumn', {\n            get: function () {\n                return self.frozenColumn;\n            },\n            set: function (val) {\n                if (isNaN(val)) {\n                    throw new TypeError('Expected value for frozenRow to be a number.');\n                }\n                if (self.getVisibleSchema().length < val) {\n                    throw new RangeError('Cannot set a value larger than the number of visible columns.');\n                }\n                self.frozenColumn = val;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollIndexRect', {\n            get: function () {\n                return {\n                    top: self.scrollIndexTop,\n                    right: self.scrollIndexRight,\n                    bottom: self.scrollIndexBottom,\n                    left: self.scrollIndexLeft\n                };\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollPixelRect', {\n            get: function () {\n                return {\n                    top: self.scrollPixelTop,\n                    right: self.scrollPixelRight,\n                    bottom: self.scrollPixelBottom,\n                    left: self.scrollPixelLeft\n                };\n            }\n        });\n        Object.defineProperty(self.intf, 'rowOrder', {\n            get: function () {\n                return self.orders.rows;\n            },\n            set: function (val) {\n                if (!Array.isArray(val)) {\n                    throw new TypeError('Value must be an array.');\n                }\n                if (!self.data || val.length < self.data.length) {\n                    throw new RangeError('Array length must be equal to or greater than number of rows.');\n                }\n                self.orders.rows = val;\n            }\n        });\n        Object.defineProperty(self.intf, 'columnOrder', {\n            get: function () {\n                return self.orders.columns;\n            },\n            set: function (val) {\n                if (!Array.isArray(val)) {\n                    throw new TypeError('Value must be an array.');\n                }\n                if (val.length < self.getSchema().length) {\n                    throw new RangeError('Array length must be equal to or greater than number of columns.');\n                }\n                self.orders.columns = val;\n            }\n        });\n        Object.defineProperty(self.intf, 'selectionBounds', {\n            get: function () {\n                return self.getSelectionBounds();\n            }\n        });\n        Object.defineProperty(self.intf, 'selectedRows', {\n            get: function () {\n                return self.getSelectedData(true);\n            }\n        });\n        Object.defineProperty(self.intf, 'selectedCells', {\n            get: function () {\n                return self.getSelectedData();\n            }\n        });\n        Object.defineProperty(self.intf, 'visibleSchema', {\n            get: function () {\n                return self.getVisibleSchema().map(function eachDataRow(col) {\n                    return col;\n                });\n            }\n        });\n        Object.defineProperty(self.intf, 'treeGridAttributes', {\n            get: function () {\n                return self.treeGridAttributes;\n            },\n            set: function setTreeGridAttributes(value) {\n                self.treeGridAttributes = value;\n            }\n        });\n        Object.defineProperty(self.intf, 'cellGridAttributes', {\n            get: function () {\n                return self.cellGridAttributes;\n            },\n            set: function setCellGridAttributes(value) {\n                self.cellGridAttributes = value;\n            }\n        });\n        Object.defineProperty(self.intf, 'ctx', {\n            get: function () {\n                return self.ctx;\n            }\n        });\n        Object.defineProperty(self.intf, 'schema', {\n            get: function schemaGetter() {\n                return self.getSchema();\n            },\n            set: function schemaSetter(value) {\n                if (value === undefined) {\n                    // Issue #89 - allow schema to be set to initialized state\n                    self.schema = undefined;\n                    self.tempSchema = undefined;\n                    self.dispatchEvent('schemachanged', {schema: undefined});\n                    return;\n                }\n                if (!Array.isArray(value) || typeof value[0] !== 'object') {\n                    throw new Error('Schema must be an array of objects.');\n                }\n                if (value[0].name === undefined) {\n                    throw new Error('Expected schema to contain an object with at least a name property.');\n                }\n                self.schema = value.map(function eachSchemaColumn(column, index) {\n                    column.width = column.width || self.style.cellWidth;\n                    column.filter = column.filter || self.filter(column.type);\n                    column.type = column.type || 'string';\n                    column.index = index;\n                    column.columnIndex = index;\n                    column.rowIndex = -1;\n                    return column;\n                });\n                self.tempSchema = undefined;\n                self.createNewRowData();\n                self.createColumnOrders();\n                self.tryLoadStoredSettings();\n                if (self.storedSettings && typeof self.storedSettings.visibility === 'object') {\n                    self.schema.forEach(function hideEachSchemaColumn(column, index) {\n                        if (self.storedSettings && self.storedSettings.visibility[column.name] !== undefined) {\n                            column.hidden = !self.storedSettings.visibility[column.name];\n                        }\n                    });\n                }\n                self.resize(true);\n                self.dispatchEvent('schemachanged', {schema: self.schema});\n            }\n        });\n        /**\n         * Gets an array of currently registered MIME types.\n         * @memberof canvasDatagrid\n         * @name getDataTypes\n         * @method\n         */\n        self.intf.getTypes = function () {\n            return Object.keys(self.parsers);\n        };\n        self.parseInnerHtml = function (data) {\n            if (!data || /^ +$/.test(data)) {\n                return [];\n            }\n            try {\n                data = JSON.parse(data);\n            } catch (e) {\n                console.warn(Error('Cannot parse application/json+x-canvas-datagrid formated data. '\n                    + e.message + '  \\nNote: canvas-datagrid.innerHTML is for string data only.  '\n                    + 'Use the canvas-datagrid.data property to set object data.'));\n            }\n            return data;\n        };\n        self.parsers['application/json+x-canvas-datagrid'] = function (data, callback) {\n            self.parsers['application/x-canvas-datagrid'](self.parseInnerHtml(data), function (data, schema) {\n                return callback(data, schema);\n            });\n        };\n        self.parsers['application/x-canvas-datagrid'] = function (data, callback) {\n            return callback(data);\n        };\n        self.intf.parsers = self.parsers;\n        // send to dataType ETL function to extract from input data\n        // and transform into native [{}, {}] format\n        self.etl = function (data, callback) {\n            if (!self.intf.parsers[self.dataType]) {\n                throw new Error('Unsupported data type.');\n            }\n            self.intf.parsers[self.dataType](data, function (data, schema) {\n                if (Array.isArray(schema)) {\n                    self.schema = schema;\n                }\n                // Issue #89 - allow schema to be auto-created every time data is set\n                if (self.attributes.autoGenerateSchema) {\n                    self.schema = self.getSchemaFromData(data);\n                }\n                if (!self.schema) {\n                    self.tempSchema = self.getSchemaFromData(data);\n                }\n                if (self.getSchema()) {\n                    self.createColumnOrders();\n                }\n                // set the unfiltered/sorted data array\n                self.originalData = data;\n                // apply filter, sort, etc to incoming dataset\n                self.applyDataTransforms();\n                // empty data was set\n                if (!self.schema && (self.data || []).length === 0) {\n                    self.tempSchema = [{name: ''}];\n                }\n                self.fitColumnToValues('cornerCell', true);\n                if ((self.tempSchema && !self.schema) || self.attributes.autoGenerateSchema) {\n                    self.createColumnOrders();\n                    self.dispatchEvent('schemachanged', {schema: self.tempSchema});\n                }\n                callback();\n            });\n        };\n        Object.defineProperty(self.intf, 'data', {\n            get: function dataGetter() {\n                return self.data;\n            },\n            set: function dataSetter(value) {\n                self.etl(value, function () {\n                    self.changes = [];\n                    self.createNewRowData();\n                    if (self.attributes.autoResizeColumns && self.data.length > 0\n                            && self.storedSettings === undefined) {\n                        self.autosize();\n                    }\n                    // set the header column to fit the numbers in it\n                    self.fitColumnToValues('cornerCell', true);\n                    self.createRowOrders();\n                    self.tryLoadStoredSettings();\n                    self.dispatchEvent('datachanged', {data: self.data});\n                    self.resize(true);\n                });\n            }\n        });\n        self.initScrollBox = function () {\n            var sHeight = 0,\n                sWidth = 0,\n                scrollTop = 0,\n                scrollLeft = 0,\n                scrollHeight = 0,\n                scrollWidth = 0,\n                scrollBoxHeight = 20,\n                scrollBoxWidth = 20;\n            function setScrollTop(value, preventScrollEvent) {\n                if (isNaN(value)) {\n                    throw new Error('ScrollTop value must be a number');\n                }\n                if (value < 0) {\n                    value = 0;\n                }\n                if (value > scrollHeight) {\n                    value = scrollHeight;\n                }\n                if (scrollHeight < 0) {\n                    value = 0;\n                }\n                scrollTop = value;\n                if (!preventScrollEvent) {\n                    self.scroll();\n                }\n            }\n            function setScrollLeft(value, preventScrollEvent) {\n                if (isNaN(value)) {\n                    throw new Error('ScrollLeft value must be a number');\n                }\n                if (value < 0) {\n                    value = 0;\n                }\n                if (value > scrollWidth) {\n                    value = scrollWidth;\n                }\n                if (scrollWidth < 0) {\n                    value = 0;\n                }\n                scrollLeft = value;\n                if (!preventScrollEvent) {\n                    self.scroll();\n                }\n            }\n            self.scrollBox.toString = function () {\n                return '{\"width\": ' + scrollWidth.toFixed(2)\n                    + ', \"height\": ' + scrollHeight.toFixed(2)\n                    + ', \"left\": ' + scrollLeft.toFixed(2)\n                    + ', \"top\": ' + scrollTop.toFixed(2)\n                    + ', \"widthRatio\": ' + self.scrollBox.widthBoxRatio.toFixed(5)\n                    + ', \"heightRatio\": ' + self.scrollBox.heightBoxRatio.toFixed(5) + '}';\n            };\n            self.scrollBox.scrollTo = function (x, y, supressDrawEvent) {\n                setScrollLeft(x, true);\n                setScrollTop(y, supressDrawEvent);\n            };\n            Object.defineProperty(self.scrollBox, 'scrollBoxHeight', {\n                get: function () {\n                    return scrollBoxHeight;\n                },\n                set: function (value) {\n                    scrollBoxHeight = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'scrollBoxWidth', {\n                get: function () {\n                    return scrollBoxWidth;\n                },\n                set: function (value) {\n                    scrollBoxWidth = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'height', {\n                get: function () {\n                    return sHeight;\n                },\n                set: function (value) {\n                    sHeight = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'width', {\n                get: function () {\n                    return sWidth;\n                },\n                set: function (value) {\n                    sWidth = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'scrollTop', {\n                get: function () {\n                    return scrollTop;\n                },\n                set: setScrollTop\n            });\n            Object.defineProperty(self.scrollBox, 'scrollLeft', {\n                get: function () {\n                    return scrollLeft;\n                },\n                set: setScrollLeft\n            });\n            Object.defineProperty(self.scrollBox, 'scrollHeight', {\n                get: function () {\n                    return scrollHeight;\n                },\n                set: function (value) {\n                    if (scrollTop > value) {\n                        scrollTop = Math.max(value, 0);\n                    }\n                    scrollHeight = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'scrollWidth', {\n                get: function () {\n                    return scrollWidth;\n                },\n                set: function (value) {\n                    if (scrollLeft > value) {\n                        scrollLeft = Math.max(value, 0);\n                    }\n                    scrollWidth = value;\n                }\n            });\n        };\n        return;\n    };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/intf.js\n// module id = 6\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false, Event: false*/\ndefine([], function () {\n    'use strict';\n    return function (self) {\n        var zIndexTop, hoverScrollTimeout, autoCompleteContext;\n        function applyContextItemStyle(contextItemContainer) {\n            self.createInlineStyle(contextItemContainer, 'canvas-datagrid-context-menu-item' + (self.mobile ? '-mobile' : ''));\n            contextItemContainer.addEventListener('mouseover', function () {\n                self.createInlineStyle(contextItemContainer, 'canvas-datagrid-context-menu-item:hover');\n            });\n            contextItemContainer.addEventListener('mouseout', function () {\n                self.createInlineStyle(contextItemContainer, 'canvas-datagrid-context-menu-item');\n            });\n        }\n        function createContextMenu(ev, pos, items, parentContextMenu) {\n            var container = document.createElement('div'),\n                upArrow = document.createElement('div'),\n                downArrow = document.createElement('div'),\n                children = [],\n                selectedIndex = -1,\n                intf = {},\n                rect;\n            if (!Array.isArray(items)) { throw new Error('createContextMenu expects an array.'); }\n            function createItems() {\n                items.forEach(function (item) {\n                    var contextItemContainer = document.createElement('div'),\n                        childMenuArrow;\n                    function removeChildContext(e) {\n                        if (e.relatedTarget === container\n                                || item.contextMenu.container === e.relatedTarget\n                                || childMenuArrow === e.relatedTarget\n                                || (contextItemContainer === e.relatedTarget)\n                                || item.contextMenu.container.contains(e.relatedTarget)\n                                ) { return; }\n                        item.contextMenu.dispose();\n                        children.splice(children.indexOf(item.contextMenu), 1);\n                        item.contextMenu = undefined;\n                        contextItemContainer.removeEventListener('mouseout', removeChildContext);\n                        container.removeEventListener('mouseout', removeChildContext);\n                        contextItemContainer.setAttribute('contextOpen', '0');\n                        contextItemContainer.setAttribute('opening', '0');\n                    }\n                    function contextAddCallback(items) {\n                        // check yet again if the user hasn't moved off\n                        if (contextItemContainer.getAttribute('opening') !== '1' ||\n                                contextItemContainer.getAttribute('contextOpen') === '1') {\n                            return;\n                        }\n                        var cPos = contextItemContainer.getBoundingClientRect();\n                        cPos = {\n                            left: cPos.left + self.style.childContextMenuMarginLeft + container.offsetWidth,\n                            top: cPos.top + self.style.childContextMenuMarginTop,\n                            bottom: cPos.bottom,\n                            right: cPos.right\n                        };\n                        item.contextMenu = createContextMenu(ev, cPos, items, intf);\n                        contextItemContainer.setAttribute('contextOpen', '1');\n                        contextItemContainer.addEventListener('mouseout', removeChildContext);\n                        container.addEventListener('mouseout', removeChildContext);\n                        children.push(item.contextMenu);\n                    }\n                    function createChildContext() {\n                        var i;\n                        if (contextItemContainer.getAttribute('contextOpen') === '1') {\n                            return;\n                        }\n                        contextItemContainer.setAttribute('opening', '1');\n                        if (typeof item.items === 'function') {\n                            i  = item.items.apply(intf, [function (items) {\n                                contextAddCallback(items);\n                            }]);\n                            if (i !== undefined && Array.isArray(i)) {\n                                contextAddCallback(i);\n                            }\n                            return;\n                        }\n                        contextAddCallback(item.items);\n                    }\n                    function addItem(item) {\n                        function addContent(content) {\n                            if (content === null) { return; }\n                            if (typeof content === 'function') {\n                                return addContent(content(ev));\n                            }\n                            if (typeof content === 'object') {\n                                contextItemContainer.appendChild(content);\n                                return;\n                            }\n                            applyContextItemStyle(contextItemContainer);\n                            contextItemContainer.innerHTML = content;\n                            return;\n                        }\n                        addContent(item.title);\n                        item.contextItemContainer = contextItemContainer;\n                        if ((item.items && item.items.length > 0) || typeof item.items === 'function') {\n                            childMenuArrow = document.createElement('div');\n                            self.createInlineStyle(childMenuArrow, 'canvas-datagrid-context-child-arrow');\n                            childMenuArrow.innerHTML = self.style.childContextMenuArrowHTML;\n                            contextItemContainer.appendChild(childMenuArrow);\n                            contextItemContainer.addEventListener('mouseover', createChildContext);\n                            contextItemContainer.addEventListener('mouseout', function () {\n                                contextItemContainer.setAttribute('opening', '0');\n                            });\n                        }\n                        if (item.click) {\n                            contextItemContainer.addEventListener('click', function (ev) {\n                                item.click.apply(self, [ev]);\n                            });\n                        }\n                    }\n                    addItem(item);\n                    container.appendChild(contextItemContainer);\n                });\n            }\n            function clickIndex(idx) {\n                items[idx].contextItemContainer.dispatchEvent(new Event('click'));\n            }\n            function checkArrowVisibility() {\n                if (container.scrollTop > 0) {\n                    self.parentDOMNode.appendChild(upArrow);\n                } else if (upArrow.parentNode) {\n                    upArrow.parentNode.removeChild(upArrow);\n                }\n                if (container.scrollTop >= container.scrollHeight - container.offsetHeight && downArrow.parentNode) {\n                    downArrow.parentNode.removeChild(downArrow);\n                } else if (container.scrollHeight - container.offsetHeight > 0\n                        && !(container.scrollTop >= container.scrollHeight - container.offsetHeight)) {\n                    self.parentDOMNode.appendChild(downArrow);\n                }\n            }\n            function startHoverScroll(type) {\n                return function t() {\n                    var a = self.attributes.contextHoverScrollAmount;\n                    if (type === 'up' && container.scrollTop === 0) { return; }\n                    if (type === 'down' && container.scrollTop === container.scrollHeight) { return; }\n                    container.scrollTop += (type === 'up' ? -a : a);\n                    hoverScrollTimeout = setTimeout(t, self.attributes.contextHoverScrollRateMs, type);\n                };\n            }\n            function endHoverScroll(type) {\n                return function () {\n                    clearTimeout(hoverScrollTimeout);\n                };\n            }\n            function init() {\n                var loc = {},\n                    s = self.scrollOffset(self.canvas);\n                if (zIndexTop === undefined) {\n                    zIndexTop = self.style.contextMenuZIndex;\n                }\n                createItems();\n                self.createInlineStyle(container, 'canvas-datagrid-context-menu' + (self.mobile ? '-mobile' : ''));\n                loc.x = pos.left - s.left;\n                loc.y = pos.top - s.top;\n                loc.height = 0;\n                zIndexTop += 1;\n                container.style.position = 'absolute';\n                upArrow.style.color = self.style.contextMenuArrowColor;\n                downArrow.style.color = self.style.contextMenuArrowColor;\n                [upArrow, downArrow].forEach(function (el) {\n                    el.style.textAlign = 'center';\n                    el.style.position = 'absolute';\n                    el.style.zIndex = zIndexTop + 1;\n                });\n                container.style.zIndex = zIndexTop;\n                if (parentContextMenu && parentContextMenu.inputDropdown) {\n                    container.style.maxHeight = window.innerHeight - loc.y - self.style.autocompleteBottomMargin + 'px';\n                    container.style.minWidth = pos.width + 'px';\n                    loc.y += pos.height;\n                }\n                if (self.mobile) {\n                    container.style.width = pos.width + 'px';\n                }\n                container.style.left = loc.x + 'px';\n                container.style.top = loc.y + 'px';\n                container.addEventListener('scroll', checkArrowVisibility);\n                container.addEventListener('wheel', function (e) {\n                    if (self.hasFocus) {\n                        container.scrollTop += e.deltaY;\n                        container.scrollLeft += e.deltaX;\n                    }\n                    checkArrowVisibility();\n                });\n                upArrow.innerHTML = self.style.contextMenuArrowUpHTML;\n                downArrow.innerHTML = self.style.contextMenuArrowDownHTML;\n                container.appendChild(upArrow);\n                document.body.appendChild(downArrow);\n                document.body.appendChild(container);\n                rect = container.getBoundingClientRect();\n                // TODO: fix !(parentContextMenu && parentContextMenu.inputDropdown) state (autocomplete)\n                if (rect.bottom > window.innerHeight) {\n                    if (!(parentContextMenu && parentContextMenu.inputDropdown)) {\n                        loc.y -= (rect.bottom + self.style.contextMenuWindowMargin) - window.innerHeight;\n                    }\n                    if (loc.y < 0) { loc.y = self.style.contextMenuWindowMargin; }\n                    if (container.offsetHeight > window.innerHeight - self.style.contextMenuWindowMargin) {\n                        container.style.height = window.innerHeight - (self.style.contextMenuWindowMargin * 2) + 'px';\n                    }\n                }\n                if (rect.right > window.innerWidth) {\n                    loc.x -= rect.right - window.innerWidth + self.style.contextMenuWindowMargin;\n                }\n                if (loc.x < 0) { loc.x = self.style.contextMenuWindowMargin; }\n                if (loc.y < 0) { loc.y = self.style.contextMenuWindowMargin; }\n                container.style.left = loc.x + 'px';\n                container.style.top = loc.y + 'px';\n                rect = container.getBoundingClientRect();\n                upArrow.style.top = rect.top + 'px';\n                downArrow.style.top = rect.top + rect.height - downArrow.offsetHeight + 'px';\n                upArrow.style.left = rect.left + 'px';\n                downArrow.style.left = rect.left + 'px';\n                downArrow.style.width = container.offsetWidth + 'px';\n                upArrow.style.width = container.offsetWidth + 'px';\n                downArrow.addEventListener('mouseover', startHoverScroll('down'));\n                downArrow.addEventListener('mouseout', endHoverScroll('down'));\n                upArrow.addEventListener('mouseover', startHoverScroll('up'));\n                upArrow.addEventListener('mouseout', endHoverScroll('up'));\n                checkArrowVisibility();\n            }\n            intf.parentGrid = self.intf;\n            intf.parentContextMenu = parentContextMenu;\n            intf.container = container;\n            init();\n            intf.clickIndex = clickIndex;\n            intf.rect = rect;\n            intf.items = items;\n            intf.upArrow = upArrow;\n            intf.downArrow = downArrow;\n            intf.dispose = function () {\n                clearTimeout(hoverScrollTimeout);\n                children.forEach(function (c) {\n                    c.dispose();\n                });\n                [downArrow, upArrow, container].forEach(function (el) {\n                    if (el.parentNode) { el.parentNode.removeChild(el); }\n                });\n            };\n            Object.defineProperty(intf, 'selectedIndex', {\n                get: function () {\n                    return selectedIndex;\n                },\n                set: function (value) {\n                    if (typeof value !== 'number' || isNaN(value || !isFinite(value))) {\n                        throw new Error('Context menu selected index must be a sane number.');\n                    }\n                    selectedIndex = value;\n                    if (selectedIndex > items.length - 1) {\n                        selectedIndex = items.length - 1;\n                    }\n                    if (selectedIndex < 0) {\n                        selectedIndex = 0;\n                    }\n                    items.forEach(function (item, index) {\n                        if (index === selectedIndex) {\n                            return self.createInlineStyle(item.contextItemContainer, 'canvas-datagrid-context-menu-item:hover');\n                        }\n                        self.createInlineStyle(item.contextItemContainer, 'canvas-datagrid-context-menu-item');\n                    });\n                }\n            });\n            return intf;\n        }\n        function createFilterContextMenuItems(e) {\n            var filterContainer = document.createElement('div'),\n                filterLabel = document.createElement('div'),\n                filterAutoCompleteButton = document.createElement('button'),\n                filterInput = document.createElement('input'),\n                n = e.cell && e.cell.header ? e.cell.header.title || e.cell.header.name : '',\n                autoCompleteItems,\n                iRect;\n            function checkRegExpErrorState() {\n                filterInput.style.background = self.style.contextFilterInputBackground;\n                filterInput.style.color = self.style.contextFilterInputColor;\n                if (self.invalidFilterRegEx) {\n                    filterInput.style.background = self.style.contextFilterInvalidRegExpBackground;\n                    filterInput.style.color = self.style.contextFilterInvalidRegExpColor;\n                }\n            }\n            function fillAutoComplete() {\n                var count = 0;\n                autoCompleteItems = {};\n                self.data.forEach(function (row) {\n                    var value = row[e.cell.header.name];\n                    if (autoCompleteItems[value] || count > self.attributes.maxAutoCompleteItems) { return; }\n                    count += 1;\n                    autoCompleteItems[value] = {\n                        title: self.formatters[e.cell.header.type || 'string']({ cell: { value: value }}),\n                        click: function (e) {\n                            filterInput.value = value;\n                            e.stopPropagation();\n                            filterInput.dispatchEvent(new Event('keyup'));\n                            self.disposeAutocomplete();\n                            return;\n                        }\n                    };\n                });\n                autoCompleteItems = Object.keys(autoCompleteItems).map(function (key) {\n                    return autoCompleteItems[key];\n                });\n            }\n            function createAutoCompleteContext(ev) {\n                if (ev && [40, 38, 13, 9].indexOf(ev.keyCode) !== -1) { return; }\n                fillAutoComplete();\n                iRect = filterInput.getBoundingClientRect();\n                if (autoCompleteContext) {\n                    autoCompleteContext.dispose();\n                    autoCompleteContext = undefined;\n                }\n                autoCompleteContext = createContextMenu(e, {\n                    left: iRect.left,\n                    top: iRect.top,\n                    right: iRect.right,\n                    bottom: iRect.bottom,\n                    height: iRect.height,\n                    width: iRect.width\n                }, autoCompleteItems, {inputDropdown: true});\n                autoCompleteContext.selectedIndex = 0;\n            }\n            self.createInlineStyle(filterLabel, 'canvas-datagrid-context-menu-label');\n            self.createInlineStyle(filterAutoCompleteButton, 'canvas-datagrid-context-menu-filter-button');\n            self.createInlineStyle(filterInput, 'canvas-datagrid-context-menu-filter-input');\n            checkRegExpErrorState();\n            filterInput.onclick = self.disposeAutocomplete;\n            filterInput.addEventListener('keydown', function (e) {\n                //down\n                if (e.keyCode === 40) {\n                    autoCompleteContext.selectedIndex += 1;\n                }\n                //up\n                if (e.keyCode === 38) {\n                    autoCompleteContext.selectedIndex -= 1;\n                }\n                //enter\n                if (e.keyCode === 13) {\n                    autoCompleteContext.clickIndex(autoCompleteContext.selectedIndex);\n                    self.disposeContextMenu();\n                }\n                //tab\n                if (e.keyCode === 9) {\n                    autoCompleteContext.clickIndex(autoCompleteContext.selectedIndex);\n                    e.preventDefault();\n                }\n                //esc\n                if (e.keyCode === 27) {\n                    self.disposeContextMenu();\n                }\n            });\n            filterInput.addEventListener('keyup', function () {\n                self.setFilter(e.cell.header.name, filterInput.value);\n            });\n            filterInput.addEventListener('keyup', createAutoCompleteContext);\n            ['focus', 'blur', 'keydown', 'keyup', 'change'].forEach(function (en) {\n                filterInput.addEventListener(en, checkRegExpErrorState);\n            });\n            filterInput.value = e.cell.header ? self.columnFilters[e.cell.header.name] || '' : '';\n            filterLabel.innerHTML = self.attributes.filterOptionText.replace(/%s/g, n);\n            filterAutoCompleteButton.onclick = function () {\n                if (autoCompleteContext) {\n                    return self.disposeAutocomplete();\n                }\n                createAutoCompleteContext();\n            };\n            filterAutoCompleteButton.innerHTML = self.style.contextFilterButtonHTML;\n            filterContainer.addEventListener('click', function (e) {\n                return e.stopPropagation();\n            });\n            filterContainer.appendChild(filterLabel);\n            filterContainer.appendChild(filterInput);\n            filterContainer.appendChild(filterAutoCompleteButton);\n            e.items.push({\n                title: filterContainer\n            });\n            if (Object.keys(self.columnFilters).length) {\n                Object.keys(self.columnFilters).forEach(function (cf) {\n                    var h = self.getHeaderByName(cf);\n                    e.items.push({\n                        title: self.attributes.removeFilterOptionText.replace(/%s/g, h.title || h.name),\n                        click: function removeFilterClick(e) {\n                            e.preventDefault();\n                            self.setFilter(cf, '');\n                            self.controlInput.focus();\n                        }\n                    });\n                });\n            }\n        }\n        function addDefaultContextMenuItem(e) {\n            var isNormalCell = !(e.cell.isBackground || e.cell.isColumnHeaderCellCap\n                    || e.cell.isScrollBar || e.cell.isCorner || e.cell.isRowHeader)\n                    && e.cell.header;\n            if (self.attributes.showFilter && isNormalCell) {\n                createFilterContextMenuItems(e);\n            }\n            if (self.attributes.showCopy\n                    && self.selections.reduce(function (p, r) {\n                        return p + r.length;\n                    }, 0) > 0) {\n                e.items.push({\n                    title: self.attributes.copyText,\n                    click: function () {\n                        document.execCommand('copy');\n                        self.disposeContextMenu();\n                        self.controlInput.focus();\n                    }\n                });\n            }\n            if (self.attributes.showPaste && self.clipBoardData) {\n                e.items.push({\n                    title: self.attributes.pasteText,\n                    click: function () {\n                        self.paste(self.clipBoardData, e.cell.columnIndex, e.cell.rowIndex);\n                        self.draw();\n                    }\n                });\n            }\n            if (self.attributes.showColumnSelector) {\n                e.items.push({\n                    title: self.attributes.columnSelectorText,\n                    items: function () {\n                        var d = [];\n                        self.getSchema().forEach(function (column) {\n                            function toggleColumnVisibility(e) {\n                                column.hidden = !column.hidden;\n                                self.dispatchEvent('togglecolumn', {column: column, hidden: column.hidden});\n                                e.preventDefault();\n                                self.stopPropagation(e);\n                                self.disposeContextMenu();\n                                self.resize(true);\n                                self.setStorageData();\n                            }\n                            var el = document.createElement('div');\n                            applyContextItemStyle(el);\n                            el.addEventListener('touchstart', toggleColumnVisibility);\n                            el.addEventListener('click', toggleColumnVisibility);\n                            el.innerHTML = (column.hidden ? self.attributes.columnSelectorHiddenText\n                                    : self.attributes.columnSelectorVisibleText)\n                                    + (column.title || column.name);\n                            d.push({\n                                title: el\n                            });\n                        });\n                        return d;\n                    }\n                });\n                if (e.cell && e.cell.header && e.cell.columnIndex > -1) {\n                    e.items.push({\n                        title: self.attributes.hideColumnText\n                            .replace(/%s/ig, e.cell.header.title || e.cell.header.name),\n                        click: function (ev) {\n                            self.getSchema()[e.cell.columnIndex].hidden = true;\n                            ev.preventDefault();\n                            self.stopPropagation(ev);\n                            self.disposeContextMenu();\n                            self.setStorageData();\n                            setTimeout(function () { self.resize(true); }, 10);\n                        }\n                    });\n                }\n            }\n            if (self.attributes.saveAppearance && self.attributes.showClearSettingsOption\n                    && (Object.keys(self.sizes.rows).length > 0\n                        || Object.keys(self.sizes.columns).length > 0)) {\n                e.items.push({\n                    title: self.attributes.clearSettingsOptionText,\n                    click: function (e) {\n                        e.preventDefault();\n                        self.sizes.rows = {};\n                        self.sizes.columns = {};\n                        self.createRowOrders();\n                        self.createColumnOrders();\n                        self.storedSettings = undefined;\n                        self.dispatchEvent('resizecolumn', {columnWidth: self.style.cellWidth});\n                        self.dispatchEvent('resizerow', {cellHeight: self.style.cellHeight});\n                        self.setStorageData();\n                        self.resize(true);\n                        self.disposeContextMenu();\n                        self.controlInput.focus();\n                    }\n                });\n            }\n            if (self.attributes.allowSorting && self.attributes.showOrderByOption && isNormalCell) {\n                e.items.push({\n                    title: self.attributes.showOrderByOptionTextAsc.replace('%s', e.cell.header.title || e.cell.header.name),\n                    click: function (ev) {\n                        ev.preventDefault();\n                        self.order(e.cell.header.name, 'asc');\n                        self.controlInput.focus();\n                    }\n                });\n                e.items.push({\n                    title: self.attributes.showOrderByOptionTextDesc.replace('%s', e.cell.header.title || e.cell.header.name),\n                    click: function (ev) {\n                        ev.preventDefault();\n                        self.order(e.cell.header.name, 'desc');\n                        self.disposeContextMenu();\n                        self.controlInput.focus();\n                    }\n                });\n            }\n        }\n        self.disposeAutocomplete = function () {\n            if (autoCompleteContext) {\n                autoCompleteContext.dispose();\n                autoCompleteContext = undefined;\n            }\n        };\n        self.disposeContextMenu = function () {\n            document.removeEventListener('click', self.disposeContextMenu);\n            zIndexTop = self.style.contextMenuZIndex;\n            self.disposeAutocomplete();\n            if (self.contextMenu) {\n                self.contextMenu.dispose();\n            }\n            self.contextMenu = undefined;\n        };\n        self.contextmenuEvent = function (e, overridePos) {\n            if (!self.hasFocus && e.target !== self.canvas) {\n                return;\n            }\n            function createDiposeEvent() {\n                requestAnimationFrame(function () {\n                    document.addEventListener('click', self.disposeContextMenu);\n                    document.removeEventListener('mouseup', createDiposeEvent);\n                });\n            }\n            var contextPosition,\n                items = [],\n                pos = overridePos || self.getLayerPos(e),\n                ev = {\n                    NativeEvent: e,\n                    cell: self.getCellAt(pos.x, pos.y),\n                    items: items\n                };\n            if (!ev.cell.isGrid) {\n                addDefaultContextMenuItem(ev);\n            }\n            if (self.dispatchEvent('contextmenu', ev)) {\n                return;\n            }\n            if (!ev.cell.isGrid) {\n                if (self.contextMenu) {\n                    self.disposeContextMenu();\n                }\n                contextPosition = {\n                    left: pos.x + pos.rect.left\n                        + self.style.contextMenuMarginLeft + self.canvasOffsetLeft,\n                    top: pos.y + pos.rect.top\n                        + self.style.contextMenuMarginTop + self.canvasOffsetTop,\n                    right: ev.cell.width + ev.cell.x + pos.rect.left,\n                    bottom: ev.cell.height + ev.cell.y + pos.rect.top,\n                    height: ev.cell.height,\n                    width: ev.cell.width\n                };\n                if (self.mobile) {\n                    contextPosition.left = self.style.mobileContextMenuMargin + 'px';\n                    contextPosition.width = self.width - (self.style.mobileContextMenuMargin * 2) + 'px';\n                }\n                self.contextMenu = createContextMenu(ev, contextPosition, items);\n                document.addEventListener('mouseup', createDiposeEvent);\n                e.preventDefault();\n            }\n        };\n        return;\n    };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/contextMenu.js\n// module id = 7\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([], function () {\n    'use strict';\n    return function (self) {\n        self.getClippingRect = function (ele) {\n            var boundingRect = self.position(self.parentNode),\n                eleRect = self.position(ele),\n                s = self.scrollOffset(self.canvas),\n                clipRect = {\n                    x: 0,\n                    y: 0,\n                    h: 0,\n                    w: 0\n                },\n                parentRect = {\n                    x: -Infinity,\n                    y: -Infinity,\n                    h: Infinity,\n                    w: Infinity\n                },\n                columnHeaderCellHeight = self.getColumnHeaderCellHeight(),\n                rowHeaderCellWidth = self.getRowHeaderCellWidth();\n            boundingRect.top -= s.top;\n            boundingRect.left -= s.left;\n            eleRect.top -= s.top;\n            eleRect.left -= s.left;\n            clipRect.h = boundingRect.top + boundingRect.height - ele.offsetTop - self.style.scrollBarWidth;\n            clipRect.w = boundingRect.left + boundingRect.width - ele.offsetLeft - self.style.scrollBarWidth;\n            clipRect.x = boundingRect.left + (eleRect.left * -1) + rowHeaderCellWidth;\n            clipRect.y = boundingRect.top + (eleRect.top * -1) + columnHeaderCellHeight;\n            return {\n                x: clipRect.x > parentRect.x ? clipRect.x : parentRect.x,\n                y: clipRect.y > parentRect.y ? clipRect.y : parentRect.y,\n                h: clipRect.h < parentRect.h ? clipRect.h : parentRect.h,\n                w: clipRect.w < parentRect.w ? clipRect.w : parentRect.w\n            };\n        };\n        self.clipElement = function (ele) {\n            var clipRect = self.getClippingRect(ele);\n            if (clipRect.w < 0) { clipRect.w = 0; }\n            if (clipRect.h < 0) { clipRect.h = 0; }\n            ele.style.clip = 'rect('\n                + clipRect.y + 'px,'\n                + clipRect.w + 'px,'\n                + clipRect.h + 'px,'\n                + clipRect.x + 'px'\n                + ')';\n            // INFO https://developer.mozilla.org/en-US/docs/Web/CSS/clip\n            // clip has been \"deprecated\" for clipPath.  Of course nothing but chrome\n            // supports clip path, so we'll keep using clip until someday clipPath becomes\n            // more widely support.  The code below works correctly, but setting clipPath and clip\n            // at the same time has undesirable results.\n            // ele.style.clipPath = 'polygon('\n            //     + clipRect.x + 'px ' + clipRect.y + 'px,'\n            //     + clipRect.x + 'px ' + clipRect.h + 'px,'\n            //     + clipRect.w + 'px ' + clipRect.h + 'px,'\n            //     + clipRect.w + 'px ' + clipRect.y + 'px'\n            //     + ')';\n        };\n        self.scrollOffset = function (e) {\n            var x = 0, y = 0, scrollingElement = document.scrollingElement || { scrollLeft: 0, scrollTop: 0 };\n            while (e.parentNode && e.nodeName !== 'CANVAS-DATAGRID' && e !== self.intf) {\n                if (e.nodeType !== 'canvas-datagrid-tree'\n                        && e.nodeType !== 'canvas-datagrid-cell') {\n                    x -= e.scrollLeft;\n                    y -= e.scrollTop;\n                }\n                e = e.parentNode;\n            }\n            return {\n                left: x - scrollingElement.scrollLeft,\n                top: y - scrollingElement.scrollTop\n            };\n        };\n        self.resizeEditInput = function () {\n            if (self.input && self.input.editCell) {\n                var pos = self.canvas.getBoundingClientRect(),\n                    s = self.scrollOffset(self.intf),\n                    bm = self.style.gridBorderCollapse === 'collapse' ? 1 : 2,\n                    borderWidth = (self.style.cellBorderWidth * bm),\n                    cell = self.getVisibleCellByIndex(self.input.editCell.columnIndex, self.input.editCell.rowIndex)\n                        || {x: -100, y: -100, height: 0, width: 0};\n                if (self.mobile) {\n                    self.input.style.left = '0';\n                    self.input.style.top = (self.height - self.style.mobileEditInputHeight) - borderWidth - 1 + 'px';\n                    self.input.style.height = self.style.mobileEditInputHeight + 'px';\n                    self.input.style.width = self.width - borderWidth - 1 + 'px';\n                    return;\n                }\n                self.input.style.left = pos.left + cell.x + self.canvasOffsetLeft - s.left + 'px';\n                self.input.style.top = pos.top + cell.y - self.style.cellBorderWidth + self.canvasOffsetTop - s.top + 'px';\n                self.input.style.height = cell.height - borderWidth + 'px';\n                self.input.style.width = cell.width - self.style.cellPaddingLeft + 'px';\n                self.clipElement(self.input);\n            }\n        };\n        self.position = function (e, ignoreScrollOffset) {\n            var x = 0, y = 0, s = e, h, w;\n            while (e.offsetParent && e.nodeName !== 'CANVAS-DATAGRID') {\n                x += e.offsetLeft;\n                y += e.offsetTop;\n                h = e.offsetHeight;\n                w = e.offsetWidth;\n                e = e.offsetParent;\n            }\n            if (ignoreScrollOffset) {\n                return {left: x, top: y, height: h, width: w};\n            }\n            e = s;\n            s = self.scrollOffset(e);\n            return { left: x + s.left, top: y + s.top, height: h, width: w };\n        };\n        self.getLayerPos = function (e) {\n            var rect = self.canvas.getBoundingClientRect(),\n                pos = {\n                    x: e.clientX - rect.left,\n                    y: e.clientY - rect.top\n                };\n            if (self.isChildGrid) {\n                pos.x -= self.canvasOffsetLeft;\n                pos.y -= self.canvasOffsetTop;\n            }\n            return {\n                x: pos.x,\n                y: pos.y,\n                rect: rect\n            };\n        };\n        /**\n         * Ends editing, optionally aborting the edit.\n         * @memberof canvasDatagrid\n         * @name endEdit\n         * @method\n         * @param {boolean} abort When true, abort the edit.\n         */\n        self.endEdit = function (abort) {\n            var cell = self.input.editCell,\n                y = cell.rowIndex;\n            function abortEdit() {\n                abort = true;\n            }\n            if (self.dispatchEvent('beforeendedit', {\n                    cell: cell,\n                    newValue: self.input.value,\n                    oldValue: cell.value,\n                    abort: abortEdit,\n                    input: self.input\n                })) { return false; }\n            if (self.input.value !== cell.value && !abort) {\n                self.changes[y] = self.changes[y] || {};\n                self.changes[y][cell.header.name] = self.input.value;\n                if (!cell.data) {\n                    self.data[cell.rowIndex] = {};\n                    cell.data = self.data[cell.rowIndex];\n                }\n                cell.data[cell.header.name] = self.input.value;\n                if (y === self.data.length) {\n                    if (self.dispatchEvent('newrow', {\n                            value: self.input.value,\n                            defaultValue: cell.value,\n                            aborted: abort,\n                            cell: cell,\n                            input: self.input\n                        })) { return false; }\n                    self.addRow(cell.data);\n                    self.createNewRowData();\n                }\n                self.draw(true);\n            }\n            if (self.input.parentNode) {\n                self.input.parentNode.removeChild(self.input);\n            }\n            self.intf.focus();\n            self.dispatchEvent('endedit', {\n                cell: cell,\n                value: self.input.value,\n                aborted: abort,\n                input: self.input\n            });\n            self.input = undefined;\n            return true;\n        };\n        /**\n         * Begins editing at cell x, row y.\n         * @memberof canvasDatagrid\n         * @name beginEditAt\n         * @method\n         * @param {number} x The column index of the cell to edit.\n         * @param {number} y The row index of the cell to edit.\n         */\n        self.beginEditAt = function (x, y, NativeEvent) {\n            if (!self.attributes.editable) { return; }\n            if (self.input) {\n                self.endEdit();\n            }\n            var cell = self.getVisibleCellByIndex(x, y),\n                s = self.getSchema(),\n                adjacentCells,\n                enumItems,\n                enu,\n                option,\n                valueInEnum;\n            if (!(cell && cell.header)) { return; }\n            //HACK for IE10, does not like literal enum\n            enu = cell.header['enum'];\n            if (self.dispatchEvent('beforebeginedit', {cell: cell, NativeEvent: NativeEvent})) { return false; }\n            self.scrollIntoView(x, y);\n            self.setActiveCell(x, y);\n            adjacentCells = self.getAdjacentCells();\n            if (enu) {\n                self.input = document.createElement('select');\n            } else {\n                self.input = document.createElement(self.attributes.multiLine\n                    ? 'textarea' : 'input');\n            }\n            cell = self.getVisibleCellByIndex(x, y);\n            //HACK on mobile devices sometimes edit can begin without the cell being in view, I don't know how.\n            if (!cell) { return; }\n            if (enu) {\n                // add enums\n                if (typeof enu === 'function') {\n                    enumItems = enu.apply(self.intf, [{cell: cell}]);\n                } else if (Array.isArray(enu)) {\n                    enumItems = enu;\n                }\n                enumItems.forEach(function (e) {\n                    var i = document.createElement('option'),\n                        val,\n                        title;\n                    if (Array.isArray(e)) {\n                        val = e[0];\n                        title = e[1];\n                    } else {\n                        val = e;\n                        title = e;\n                    }\n                    if (val === cell.value) { valueInEnum = true; }\n                    i.value = val;\n                    i.innerHTML = title;\n                    self.input.appendChild(i);\n                });\n                if (!valueInEnum) {\n                    option = document.createElement('option');\n                    option.value = cell.value;\n                    option.innerHTML = cell.value;\n                    self.input.appendChild(option);\n                }\n                self.input.addEventListener('change', function () {\n                    self.endEdit();\n                    self.draw(true);\n                });\n            }\n            // if the user has not prevented the default action, append to the body\n            if (!self.dispatchEvent('appendeditinput', {cell: cell, input:self.input})) { \n                document.body.appendChild(self.input);\n            }\n            self.createInlineStyle(self.input, self.mobile ? 'canvas-datagrid-edit-mobile-input' : 'canvas-datagrid-edit-input');\n            self.input.style.position = 'absolute';\n            self.input.editCell = cell;\n            self.resizeEditInput();\n            self.input.style.zIndex = self.style.editCellZIndex;\n            self.input.style.fontSize = (parseInt(self.style.editCellFontSize, 10) * self.scale) + 'px';\n            self.input.value = [null, undefined].indexOf(cell.value) !== -1 ? '' : cell.value;\n            self.input.focus();\n            self.input.addEventListener('click', self.stopPropagation);\n            self.input.addEventListener('dblclick', self.stopPropagation);\n            self.input.addEventListener('mouseup', self.stopPropagation);\n            self.input.addEventListener('mousedown', self.stopPropagation);\n            self.input.addEventListener('keydown', function (e) {\n                var nx = cell.columnIndex,\n                    ny = cell.rowIndex;\n                // esc\n                if (e.keyCode === 27) {\n                    self.endEdit(true);\n                    self.draw(true);\n                // enter\n                } else if (e.keyCode === 13\n                        && (!self.attributes.multiLine\n                            || (self.attributes.multiLine && e.shiftKey))) {\n                    self.endEdit();\n                    self.draw(true);\n                } else if (e.keyCode === 9) {\n                    e.preventDefault();\n                    if (!self.endEdit()) {\n                        return;\n                    }\n                    if (e.shiftKey) {\n                        nx = adjacentCells.left;\n                    } else {\n                        nx = adjacentCells.right;\n                    }\n                    if (adjacentCells.left === x && e.shiftKey) {\n                        nx = adjacentCells.last;\n                        ny -= 1;\n                    }\n                    if (adjacentCells.right === x && !e.shiftKey) {\n                        nx = adjacentCells.first;\n                        ny += 1;\n                    }\n                    if (ny < 0) {\n                        ny = self.data.length - 1;\n                    }\n                    if (ny > self.data.length - 1) {\n                        ny = 0;\n                    }\n                    self.scrollIntoView(nx, ny);\n                    self.beginEditAt(nx, ny, e);\n                }\n            });\n            self.dispatchEvent('beginedit', {cell: cell, input: self.input});\n        };\n        self.createInlineStyle = function (el, className) {\n            var css = {\n                'canvas-datagrid-context-menu-filter-input': {\n                    height: '19px',\n                    verticalAlign: 'bottom',\n                    marginLeft: '2px',\n                    padding: '0',\n                    background: self.style.contextFilterInputBackground,\n                    color: self.style.contextFilterInputColor,\n                    border: self.style.contextFilterInputBorder,\n                    borderRadius: self.style.contextFilterInputBorderRadius,\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextFilterInputFontFamily,\n                    fontSize: self.style.contextFilterInputFontSize\n                },\n                'canvas-datagrid-context-menu-filter-button': {\n                    height: '19px',\n                    verticalAlign: 'bottom',\n                    marginLeft: '2px',\n                    padding: '0',\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor,\n                    border: self.style.contextFilterButtonBorder,\n                    borderRadius: self.style.contextFilterButtonBorderRadius,\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFilterButtonFontFamily,\n                    fontSize: self.style.contextMenuFilterButtonFontSize\n                },\n                'canvas-datagrid-context-child-arrow': {\n                    cssFloat: 'right',\n                    color: self.style.childContextMenuArrowColor,\n                    fontSize: self.style.contextMenuChildArrowFontSize,\n                    fontFamily: self.style.contextMenuFontFamily,\n                    verticalAlign: 'middle'\n                },\n                'canvas-datagrid-autocomplete': {\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor,\n                    border: self.style.contextMenuBorder,\n                    padding: self.style.contextMenuPadding,\n                    borderRadius: self.style.contextMenuBorderRadius,\n                    opacity: self.style.contextMenuOpacity,\n                    position: 'absolute',\n                    zIndex: 9999,\n                    overflow: 'hidden'\n                },\n                'canvas-datagrid-autocomplete-item': {\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor\n                },\n                'canvas-datagrid-autocomplete-item:hover': {\n                    background: self.style.contextMenuHoverBackground,\n                    color: self.style.contextMenuHoverColor\n                },\n                'canvas-datagrid-canvas': {\n                    position: 'absolute',\n                    zIndex: '-1'\n                },\n                'canvas-datagrid': {\n                    display: 'block'\n                },\n                'canvas-datagrid-control-input': {\n                    position: 'fixed',\n                    top: '-5px',\n                    left: '-5px',\n                    border: 'none',\n                    opacity: '0',\n                    cursor: 'pointer',\n                    width: '1px',\n                    height: '1px',\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize\n                },\n                'canvas-datagrid-edit-mobile-input': {\n                    boxSizing: 'content-box',\n                    outline: 'none',\n                    margin: '0',\n                    padding: '0 0 0 0',\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.mobileEditFontFamily,\n                    fontSize: self.style.mobileEditFontSize,\n                    border: self.style.editCellBorder,\n                    color: self.style.editCellColor,\n                    background: self.style.editCellBackgroundColor,\n                    appearance: 'none',\n                    webkitAppearance: 'none',\n                    mozAppearance: 'none',\n                    borderRadius: '0'\n                },\n                'canvas-datagrid-edit-input': {\n                    boxSizing: 'content-box',\n                    outline: 'none',\n                    margin: '0',\n                    padding: '0 0 0 ' + self.style.editCellPaddingLeft + 'px',\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.editCellFontFamily,\n                    fontSize: self.style.editCellFontSize,\n                    boxShadow: self.style.editCellBoxShadow,\n                    border: self.style.editCellBorder,\n                    color: self.style.editCellColor,\n                    background: self.style.editCellBackgroundColor,\n                    appearance: 'none',\n                    webkitAppearance: 'none',\n                    mozAppearance: 'none',\n                    borderRadius: '0'\n                },\n                'canvas-datagrid-context-menu-item-mobile': {\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    color: 'inherit',\n                    background: 'inherit',\n                    margin: self.style.contextMenuItemMargin,\n                    borderRadius: self.style.contextMenuItemBorderRadius,\n                    verticalAlign: 'middle'\n                },\n                'canvas-datagrid-context-menu-item': {\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    color: 'inherit',\n                    background: 'inherit',\n                    margin: self.style.contextMenuItemMargin,\n                    borderRadius: self.style.contextMenuItemBorderRadius,\n                    verticalAlign: 'middle'\n                },\n                'canvas-datagrid-context-menu-item:hover': {\n                    background: self.style.contextMenuHoverBackground,\n                    color: self.style.contextMenuHoverColor\n                },\n                'canvas-datagrid-context-menu-label': {\n                    margin: self.style.contextMenuLabelMargin,\n                    display: self.style.contextMenuLabelDisplay,\n                    minWidth: self.style.contextMenuLabelMinWidth,\n                    maxWidth: self.style.contextMenuLabelMaxWidth\n                },\n                'canvas-datagrid-context-menu-mobile': {\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor,\n                    border: self.style.contextMenuBorder,\n                    padding: self.style.contextMenuPadding,\n                    borderRadius: self.style.contextMenuBorderRadius,\n                    opacity: self.style.contextMenuOpacity,\n                    overflow: 'hidden',\n                    whiteSpace: 'nowrap'\n                },\n                'canvas-datagrid-context-menu': {\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor,\n                    border: self.style.contextMenuBorder,\n                    padding: self.style.contextMenuPadding,\n                    borderRadius: self.style.contextMenuBorderRadius,\n                    opacity: self.style.contextMenuOpacity,\n                    overflow: 'hidden',\n                    whiteSpace: 'nowrap',\n                    cursor: self.style.contextMenuCursor\n                },\n                'canvas-datagrid-invalid-search-regExp': {\n                    background: self.style.contextMenuFilterInvalidExpresion\n                }\n            };\n            if (css[className]) {\n                Object.keys(css[className]).map(function (prop) {\n                    el.style[prop] = css[className][prop];\n                });\n            }\n            return;\n        };\n        self.appendTo = function (e) {\n            self.parentNode = e;\n            self.setDom();\n        };\n        self.setDom = function () {\n            if (self.isChildGrid) {\n                self.parentGrid = self.parentNode.parentGrid;\n                self.ctx = self.parentGrid.context;\n                self.canvas = self.parentGrid.canvas;\n                self.controlInput = self.parentGrid.controlInput;\n                self.eventParent = self.canvas;\n            } else {\n                self.controlInput = self.controlInput || document.createElement('input');\n                self.controlInput.onblur = self.intf.blur;\n                self.createInlineStyle(self.controlInput, 'canvas-datagrid-control-input');\n                self.isChildGrid = false;\n                self.parentDOMNode = self.parentNode;\n                self.parentIsCanvas = /^canvas$/i.test(self.parentDOMNode.tagName);\n                if (self.parentIsCanvas) {\n                    self.canvas = self.parentDOMNode;\n                } else {\n                    self.canvas = document.createElement('canvas');\n                    self.parentDOMNode.appendChild(self.canvas);\n                }\n                document.body.appendChild(self.controlInput);\n                self.createInlineStyle(self.canvas, 'canvas-datagrid');\n                self.ctx = self.canvas.getContext('2d');\n                self.ctx.textBaseline = 'alphabetic';\n                self.eventParent = self.canvas;\n            }\n            self.parentNodeStyle = self.canvas.style;\n            self.controlInput.setAttribute('readonly', true);\n            self.controlInput.addEventListener('blur', function (e) {\n                if (e.target !== self.canvas) {\n                    self.hasFocus = false;\n                }\n            });\n            self.eventParent.addEventListener('scroll', self.resize, false);\n            self.eventParent.addEventListener('touchstart', self.touchstart, false);\n            self.eventParent.addEventListener('mouseup', self.mouseup, false);\n            self.eventParent.addEventListener('mousedown', self.mousedown, false);\n            self.eventParent.addEventListener('dblclick', self.dblclick, false);\n            self.eventParent.addEventListener('click', self.click, false);\n            self.eventParent.addEventListener('mousemove', self.mousemove);\n            self[self.isChildGrid ? 'parentGrid' : 'eventParent'].addEventListener('wheel', self.scrollWheel, false);\n            self.canvas.addEventListener('contextmenu', self.contextmenuEvent, false);\n            self.controlInput.addEventListener('copy', self.copy);\n            self.controlInput.addEventListener('cut', self.cut);\n            self.controlInput.addEventListener('paste', self.paste);\n            self.controlInput.addEventListener('keypress', self.keypress, false);\n            self.controlInput.addEventListener('keyup', self.keyup, false);\n            self.controlInput.addEventListener('keydown', self.keydown, false);\n            window.addEventListener('resize', self.resize);\n        };\n    };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/dom.js\n// module id = 8\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([], function () {\n    'use strict';\n    return function (self) {\n        /**\n         * Converts a integer into a letter A - ZZZZZ...\n         * @memberof canvasDatagrid\n         * @name integerToAlpha\n         * @method\n         * @param {column} n The number to convert.\n         */\n        self.integerToAlpha = function (n) {\n            var ordA = 'a'.charCodeAt(0),\n                ordZ = 'z'.charCodeAt(0),\n                len = ordZ - ordA + 1,\n                s = '';\n            while (n >= 0) {\n                s = String.fromCharCode(n % len + ordA) + s;\n                n = Math.floor(n / len) - 1;\n            }\n            return s;\n        };\n        /**\n         * Inserts a new column before the specified index into the schema.\n         * @tutorial schema\n         * @memberof canvasDatagrid\n         * @name insertColumn\n         * @method\n         * @param {column} c The column to insert into the schema.\n         * @param {number} index The index of the column to insert before.\n         */\n        self.insertColumn = function (c, index) {\n            var s = self.getSchema();\n            if (s.length < index) {\n                throw new Error('Index is beyond the length of the schema.');\n            }\n            self.validateColumn(c, s);\n            s.splice(index, 0, c);\n            self.data.forEach(function (row) {\n                self.applyDefaultValue(row, c);\n            });\n            self.intf.schema = s;\n        };\n        /**\n         * Deletes a column from the schema at the specified index.\n         * @memberof canvasDatagrid\n         * @name deleteColumn\n         * @tutorial schema\n         * @method\n         * @param {number} index The index of the column to delete.\n         */\n        self.deleteColumn = function (index) {\n            var s = self.getSchema();\n            // remove data matching this column name from data\n            self.data.forEach(function (row) {\n                delete row[s[index].name];\n            });\n            s.splice(index, 1);\n            self.intf.schema = s;\n        };\n        /**\n         * Adds a new column into the schema.\n         * @tutorial schema\n         * @memberof canvasDatagrid\n         * @name addColumn\n         * @method\n         * @param {column} c The column to add to the schema.\n         */\n        self.addColumn = function (c) {\n            var s = self.getSchema();\n            self.validateColumn(c, s);\n            s.push(c);\n            self.data.forEach(function (row) {\n                self.applyDefaultValue(row, c);\n            });\n            self.intf.schema = s;\n        };\n        /**\n         * Deletes a row from the dataset at the specified index.\n         * @memberof canvasDatagrid\n         * @name deleteRow\n         * @method\n         * @param {number} index The index of the row to delete.\n         */\n        self.deleteRow = function (index) {\n            self.originalData.splice(index, 1);\n            self.setFilter();\n            self.resize(true);\n        };\n        /**\n         * Inserts a new row into the dataset before the specified index.\n         * @memberof canvasDatagrid\n         * @name insertRow\n         * @method\n         * @param {object} d data.\n         * @param {number} index The index of the row to insert before.\n         */\n        self.insertRow = function (d, index) {\n            if (self.originalData.length < index) {\n                throw new Error('Index is beyond the length of the dataset.');\n            }\n            self.originalData.splice(index, 0, d);\n            self.getSchema().forEach(function (c) {\n                if (d[c.name] === undefined) {\n                    self.applyDefaultValue(self.originalData[index], c);\n                }\n            });\n            self.setFilter();\n            self.resize(true);\n        };\n        /**\n         * Adds a new row into the dataset.\n         * @memberof canvasDatagrid\n         * @name addRow\n         * @method\n         * @param {object} d data.\n         */\n        self.addRow = function (d) {\n            self.originalData.push(d);\n            self.getSchema().forEach(function (c) {\n                if (d[c.name] === undefined) {\n                    self.applyDefaultValue(self.originalData[self.originalData.length - 1], c);\n                }\n            });\n            self.setFilter();\n            self.resize(true);\n        };\n        /**\n         * Sets the height of a given row by index number.\n         * @memberof canvasDatagrid\n         * @name setRowHeight\n         * @method\n         * @param {number} rowIndex The index of the row to set.\n         * @param {number} height Height to set the row to.\n         */\n        self.setRowHeight = function (rowIndex, height) {\n            self.sizes.rows[rowIndex] = height;\n            self.draw(true);\n        };\n        /**\n         * Sets the width of a given column by index number.\n         * @memberof canvasDatagrid\n         * @name setColumnWidth\n         * @method\n         * @param {number} colIndex The index of the column to set.\n         * @param {number} width Width to set the column to.\n         */\n        self.setColumnWidth = function (colIndex, width) {\n            self.sizes.columns[colIndex] = width;\n            self.draw(true);\n        };\n        /**\n         * Removes any changes to the width of the columns due to user or api interaction, setting them back to the schema or style default.\n         * @memberof canvasDatagrid\n         * @name resetColumnWidths\n         * @tutorial schema\n         * @method\n         */\n        self.resetColumnWidths = function () {\n            self.sizes.columns = {};\n            self.draw(true);\n        };\n        /**\n         * Removes any changes to the height of the rows due to user or api interaction, setting them back to the schema or style default.\n         * @memberof canvasDatagrid\n         * @name resetRowHeights\n         * @tutorial schema\n         * @method\n         */\n        self.resetRowHeights = function () {\n            self.sizes.rows = {};\n            self.draw(true);\n        };\n        /**\n         * Sets the value of the filter.\n         * @memberof canvasDatagrid\n         * @name setFilter\n         * @method\n         * @param {string} column Name of the column to filter.\n         * @param {string} value The value to filter for.\n         */\n        self.setFilter = function (column, value) {\n            if (column === undefined && value === undefined) {\n                self.columnFilters = {};\n            } else if (column && (value === '' || value === undefined)) {\n                delete self.columnFilters[column];\n            } else {\n                self.columnFilters[column] = value;\n            }\n            self.applyDataTransforms();\n        };\n        /**\n         * Returns the number of pixels to scroll down to line up with row rowIndex.\n         * @memberof canvasDatagrid\n         * @name findRowScrollTop\n         * @method\n         * @param {number} rowIndex The row index of the row to scroll find.\n         */\n        self.findRowScrollTop = function (rowIndex) {\n            if (self.scrollCache.y[rowIndex] === undefined) { throw new RangeError('Row index out of range.'); }\n            return self.scrollCache.y[rowIndex];\n        };\n        /**\n         * Returns the number of pixels to scroll to the left to line up with column columnIndex.\n         * @memberof canvasDatagrid\n         * @name findColumnScrollLeft\n         * @method\n         * @param {number} columnIndex The column index of the column to find.\n         */\n        self.findColumnScrollLeft = function (columnIndex) {\n            var i = Math.max(columnIndex - 1, 0);\n            if (self.scrollCache.x[i] === undefined) { throw new Error('Column index out of range.'); }\n            return self.scrollCache.x[i] - self.getColummnWidth(self.orders.columns[columnIndex]);\n        };\n        /**\n         * Scrolls to the cell at columnIndex x, and rowIndex y.  If you define both rowIndex and columnIndex additional calculations can be made to center the cell using the target cell's height and width.  Defining only one rowIndex or only columnIndex will result in simpler calculations.\n         * @memberof canvasDatagrid\n         * @name gotoCell\n         * @method\n         * @param {number} x The column index of the cell to scroll to.\n         * @param {number} y The row index of the cell to scroll to.\n         * @param {number} [offsetX=0] Percentage offset the cell should be from the left edge (not including headers).  The default is 0, meaning the cell will appear at the left edge. Valid values are 0 through 1. 1 = Left, 0 = Right, 0.5 = Center.\n         * @param {number} [offsetY=0] Percentage offset the cell should be from the top edge (not including headers).  The default is 0, meaning the cell will appear at the top edge. Valid values are 0 through 1. 1 = Bottom, 0 = Top, 0.5 = Center.\n         */\n        self.gotoCell = function (x, y, offsetX, offsetY) {\n            var targetX = x === undefined ? undefined : self.findColumnScrollLeft(x),\n                targetY = y === undefined ? undefined : self.findRowScrollTop(y),\n                cell,\n                sbw = self.scrollBox.width - (self.scrollBox.verticalBarVisible ? self.style.scrollBarWidth : 0),\n                sbh = self.scrollBox.height - (self.scrollBox.horizontalBarVisible ? self.style.scrollBarWidth : 0);\n            offsetX = offsetX === undefined ? 0 : offsetX;\n            offsetY = offsetY === undefined ? 0 : offsetY;\n            targetX -= sbw * offsetX;\n            targetY -= sbh * offsetY;\n            if (x !== undefined && y !== undefined) {\n                self.scrollBox.scrollTo(targetX, targetY);\n                requestAnimationFrame(function () {\n                    cell = self.getVisibleCellByIndex(x, y);\n                    // HACK: just don't offset if the target cell cannot be seen\n                    // TODO: offset does not work on very small grids, not sure why\n                    if (!cell) { return; }\n                    targetX += cell.width * offsetX;\n                    targetY += cell.height * offsetY;\n                    self.scrollBox.scrollTo(targetX, targetY);\n                });\n            } else if (x !== undefined) {\n                self.scrollBox.scrollLeft = targetX;\n            } else if (y !== undefined) {\n                self.scrollBox.scrollTop = targetY;\n            }\n        };\n        /**\n         * Scrolls the row y.\n         * @memberof canvasDatagrid\n         * @name gotoRow\n         * @method\n         * @param {number} y The row index of the cell to scroll to.\n         */\n        self.gotoRow = function (y) {\n            self.gotoCell(0, y);\n        };\n        /**\n         * Scrolls the cell at cell x, row y into view if it is not already.\n         * @memberof canvasDatagrid\n         * @name scrollIntoView\n         * @method\n         * @param {number} x The column index of the cell to scroll into view.\n         * @param {number} y The row index of the cell to scroll into view.\n         * @param {number} [offsetX=0] Percentage offset the cell should be from the left edge (not including headers).  The default is 0, meaning the cell will appear at the left edge. Valid values are 0 through 1. 1 = Left, 0 = Right, 0.5 = Center.\n         * @param {number} [offsetY=0] Percentage offset the cell should be from the top edge (not including headers).  The default is 0, meaning the cell will appear at the top edge. Valid values are 0 through 1. 1 = Bottom, 0 = Top, 0.5 = Center.\n         */\n        self.scrollIntoView = function (x, y, offsetX, offsetY) {\n            if (self.visibleCells.filter(function (cell) {\n                    return (cell.rowIndex === y || y === undefined)\n                        && (cell.columnIndex === x || x === undefined)\n                        && cell.x > 0\n                        && cell.y > 0\n                        && cell.x + cell.width < self.width\n                        && cell.y + cell.height < self.height;\n                }).length === 0) {\n                self.gotoCell(x, y, offsetX, offsetY);\n            }\n        };\n        /**\n         * Sets the active cell. Requires redrawing.\n         * @memberof canvasDatagrid\n         * @name setActiveCell\n         * @method\n         * @param {number} x The column index of the cell to set active.\n         * @param {number} y The row index of the cell to set active.\n         */\n        self.setActiveCell = function (x, y) {\n            if (x < 0) { x = 0; }\n            if (y < 0) { y = 0; }\n            self.activeCell = {\n                rowIndex: y,\n                columnIndex: x\n            };\n        };\n        /**\n         * Removes the selection.\n         * @memberof canvasDatagrid\n         * @name selectNone\n         * @param {boolean} dontDraw Suppress the draw method after the selection change.\n         * @method\n         */\n        self.selectNone = function (dontDraw) {\n            self.selections = [];\n            self.dispatchEvent('selectionchanged', {\n                selectedData: self.getSelectedData(),\n                selections: self.selections,\n                selectionBounds: self.selectionBounds\n            });\n            if (dontDraw) { return; }\n            self.draw();\n        };\n        /**\n         * Selects every visible cell.\n         * @memberof canvasDatagrid\n         * @name selectAll\n         * @param {boolean} dontDraw Suppress the draw method after the selection change.\n         * @method\n         */\n        self.selectAll = function (dontDraw) {\n            self.selectArea({\n                top: 0,\n                left: -1,\n                right: self.getSchema().length - 1,\n                bottom: self.data.length - 1\n            });\n            if (dontDraw) { return; }\n            self.draw();\n        };\n        /**\n         * Returns true if the selected columnIndex is selected on every row.\n         * @memberof canvasDatagrid\n         * @name isColumnSelected\n         * @method\n         * @param {number} columnIndex The column index to check.\n         */\n        self.isColumnSelected = function (columnIndex) {\n            var colIsSelected = true;\n            self.data.forEach(function (row, rowIndex) {\n                if (!self.selections[rowIndex] || self.selections[rowIndex].indexOf(self.orders.columns[columnIndex]) === -1) {\n                    colIsSelected = false;\n                }\n            });\n            return colIsSelected;\n        };\n        /**\n         * Runs the defined method on each selected cell.\n         * @memberof canvasDatagrid\n         * @name forEachSelectedCell\n         * @method\n         * @param {number} fn The function to execute.  The signature of the function is: (data, rowIndex, columnName).\n         * @param {number} expandToRow When true the data in the array is expanded to the entire row.\n         */\n        self.forEachSelectedCell = function (fn, expandToRow) {\n            var d = [], s = expandToRow ? self.getSchema() : self.getVisibleSchema(), l = self.data.length;\n            self.selections.forEach(function (row, index) {\n                if (index === l) { return; }\n                if (row.length === 0) {\n                    d[index] = null;\n                    return;\n                }\n                d[index] = {};\n                row.forEach(function (col) {\n                    if (col === -1 || !s[col]) { return; }\n                    fn(self.data, index, s[col].name);\n                });\n            });\n        };\n        /**\n         * Selects a column.\n         * @memberof canvasDatagrid\n         * @name selectColumn\n         * @method\n         * @param {number} columnIndex The column index to select.\n         * @param {boolean} toggleSelectMode When true, behaves as if you were holding control/command when you clicked the column.\n         * @param {boolean} shift When true, behaves as if you were holding shift when you clicked the column.\n         * @param {boolean} supressSelectionchangedEvent When true, prevents the selectionchanged event from firing.\n         */\n        self.selectColumn = function (columnIndex, ctrl, shift, supressEvent) {\n            var s, e, x;\n            function addCol(i) {\n                self.data.forEach(function (row, rowIndex) {\n                    self.selections[rowIndex] = self.selections[rowIndex] || [];\n                    if (self.selections[rowIndex].indexOf(i) === -1) {\n                        self.selections[rowIndex].push(i);\n                    }\n                });\n            }\n            function removeCol(i) {\n                self.data.forEach(function (row, rowIndex) {\n                    self.selections[rowIndex] = self.selections[rowIndex] || [];\n                    if (self.selections[rowIndex].indexOf(i) !== -1) {\n                        self.selections[rowIndex].splice(self.selections[rowIndex].indexOf(i), 1);\n                    }\n                });\n            }\n            if (shift) {\n                if (!self.activeCell) { return; }\n                s = Math.min(self.activeCell.columnIndex, columnIndex);\n                e = Math.max(self.activeCell.columnIndex, columnIndex);\n                for (x = s; e > x; x += 1) {\n                    addCol(x);\n                }\n            }\n            if (!ctrl && !shift) {\n                self.selections = [];\n                self.activeCell.columnIndex = columnIndex;\n                self.activeCell.rowIndex = self.scrollIndexTop;\n            }\n            if (ctrl && self.isColumnSelected(columnIndex)) {\n                removeCol(columnIndex);\n            } else {\n                addCol(columnIndex);\n            }\n            if (supressEvent) { return; }\n            self.dispatchEvent('selectionchanged', {\n                selectedData: self.getSelectedData(),\n                selections: self.selections,\n                selectionBounds: self.getSelectionBounds()\n            });\n        };\n        /**\n         * Selects a row.\n         * @memberof canvasDatagrid\n         * @name selectRow\n         * @method\n         * @param {number} rowIndex The row index to select.\n         * @param {boolean} ctrl When true, behaves as if you were holding control/command when you clicked the row.\n         * @param {boolean} shift When true, behaves as if you were holding shift when you clicked the row.\n         * @param {boolean} supressSelectionchangedEvent When true, prevents the selectionchanged event from firing.\n         */\n        self.selectRow = function (rowIndex, ctrl, shift, supressEvent) {\n            var x, st, en, s = self.getVisibleSchema();\n            function de() {\n                if (supressEvent) { return; }\n                self.dispatchEvent('selectionchanged', {\n                    selectedData: self.getSelectedData(),\n                    selections: self.selections,\n                    selectionBounds: self.selectionBounds\n                });\n            }\n            function addRow(ri) {\n                self.selections[ri] = [];\n                self.selections[ri].push(-1);\n                s.forEach(function (col, index) {\n                    self.selections[ri].push(self.orders.columns.indexOf(col.index));\n                });\n            }\n            if (self.dragAddToSelection === false || self.dragObject === undefined) {\n                if (self.selections[rowIndex] && self.selections[rowIndex].length - 1 === s.length) {\n                    if (ctrl) {\n                        self.selections[rowIndex] = [];\n                        de();\n                        return;\n                    }\n                }\n            }\n            if (self.dragAddToSelection === true || self.dragObject === undefined) {\n                if (shift && self.dragObject === undefined) {\n                    if (!self.activeCell) { return; }\n                    st = Math.min(self.activeCell.rowIndex, rowIndex);\n                    en = Math.max(self.activeCell.rowIndex, rowIndex);\n                    for (x = st; en >= x; x += 1) {\n                        addRow(x);\n                    }\n                } else {\n                    addRow(rowIndex);\n                }\n            }\n            de();\n        };\n        /**\n         * Collapse a tree grid by row index.\n         * @memberof canvasDatagrid\n         * @name collapseTree\n         * @method\n         * @param {number} index The index of the row to collapse.\n         */\n        self.collapseTree = function (rowIndex) {\n            self.dispatchEvent('collapsetree', {\n                childGrid: self.childGrids[rowIndex],\n                data: self.data[rowIndex],\n                rowIndex: rowIndex\n            });\n            self.openChildren[rowIndex].blur();\n            self.openChildren[rowIndex].dispose();\n            delete self.openChildren[rowIndex];\n            delete self.sizes.trees[rowIndex];\n            delete self.childGrids[rowIndex];\n            self.dispatchEvent('resizerow', {\n                cellHeight: self.style.cellHeight\n            });\n            self.resize(true);\n            self.draw(true);\n        };\n        /**\n         * Expands a tree grid by row index.\n         * @memberof canvasDatagrid\n         * @name expandTree\n         * @method\n         * @param {number} index The index of the row to expand.\n         */\n        self.expandTree = function (rowIndex) {\n            var trArgs = self.args.treeGridAttributes || {},\n                columnHeaderCellHeight = self.getColumnHeaderCellHeight(),\n                rowHeaderCellWidth = self.sizes.columns.cornerCell || self.style.rowHeaderCellWidth,\n                h = self.sizes.trees[rowIndex] || self.style.treeGridHeight,\n                treeGrid;\n            if (!self.childGrids[rowIndex]) {\n                trArgs.debug = self.attributes.debug;\n                trArgs.name = self.attributes.saveAppearance ? self.attributes.name + 'tree' + rowIndex : undefined;\n                trArgs.style = trArgs.style || self.style;\n                trArgs.parentNode = {\n                    parentGrid: self.intf,\n                    nodeType: 'canvas-datagrid-tree',\n                    offsetHeight: h,\n                    offsetWidth: self.width - rowHeaderCellWidth,\n                    header: { width: self.width - rowHeaderCellWidth },\n                    offsetLeft: rowHeaderCellWidth,\n                    offsetTop: columnHeaderCellHeight,\n                    offsetParent: self.intf.parentNode,\n                    parentNode: self.intf.parentNode,\n                    style: 'tree',\n                    data: self.data[rowIndex]\n                };\n                treeGrid = self.createGrid(trArgs);\n                self.childGrids[rowIndex] = treeGrid;\n            }\n            treeGrid = self.childGrids[rowIndex];\n            treeGrid.visible = true;\n            self.dispatchEvent('expandtree', {\n                treeGrid: treeGrid,\n                data: self.data[rowIndex],\n                rowIndex: rowIndex\n            });\n            self.openChildren[rowIndex] = treeGrid;\n            self.sizes.trees[rowIndex] = h;\n            self.dispatchEvent('resizerow', {height: self.style.cellHeight});\n            self.resize(true);\n        };\n        /**\n         * Toggles tree grid open and close by row index.\n         * @memberof canvasDatagrid\n         * @name toggleTree\n         * @method\n         * @param {number} index The index of the row to toggle.\n         */\n        self.toggleTree = function (rowIndex) {\n            var i = self.openChildren[rowIndex];\n            if (i) {\n                return self.collapseTree(rowIndex);\n            }\n            self.expandTree(rowIndex);\n        };\n        /**\n         * Returns a header from the schema by name.\n         * @memberof canvasDatagrid\n         * @name getHeaderByName\n         * @tutorial schema\n         * @method\n         * @returns {header} header with the selected name, or undefined.\n         * @param {string} name The name of the column to resize.\n         */\n        self.getHeaderByName = function (name) {\n            var x, i = self.getSchema();\n            for (x = 0; x < i.length; x += 1) {\n                if (i[x].name === name) {\n                    return i[x];\n                }\n            }\n        };\n        /**\n         * Resizes a column to fit the longest value in the column. Call without a value to resize all columns.\n         * Warning, can be slow on very large record sets (1m records ~3-5 seconds on an i7).\n         * @memberof canvasDatagrid\n         * @name fitColumnToValues\n         * @method\n         * @param {string} name The name of the column to resize.\n         */\n        self.fitColumnToValues = function (name, internal) {\n            if (!self.canvas) { return; }\n            self.sizes.columns[name === 'cornerCell' ? -1 : self.getHeaderByName(name).index]\n                = Math.max(self.findColumnMaxTextLength(name), self.style.minColumnWidth);\n            if (!internal) {\n                self.resize();\n                self.draw(true);\n            }\n        };\n        /**\n         * Checks if a cell is currently visible.\n         * @memberof canvasDatagrid\n         * @name isCellVisible\n         * @overload\n         * @method\n         * @returns {boolean} when true, the cell is visible, when false the cell is not currently drawn.\n         * @param {number} columnIndex The column index of the cell to check.\n         * @param {number} rowIndex The row index of the cell to check.\n         */\n        /**\n         * Checks if a cell is currently visible.\n         * @memberof canvasDatagrid\n         * @name isCellVisible\n         * @method\n         * @returns {boolean} when true, the cell is visible, when false the cell is not currently drawn.\n         * @param {cell} cell The cell to check for.  Alternatively you can pass an object { x: <x-pixel-value>, y: <y-pixel-value> }.\n         */\n        self.isCellVisible = function (cell, rowIndex) {\n            // overload\n            if (rowIndex !== undefined) {\n                return self.visibleCells.filter(function (c) {\n                    return c.columnIndex === cell && c.rowIndex === rowIndex;\n                }).length > 0;\n            }\n            var x, l = self.visibleCells.length;\n            for (x = 0; x < l; x += 1) {\n                if (cell.x === self.visibleCells[x].x && cell.y === self.visibleCells[x].y) {\n                    return true;\n                }\n            }\n            return false;\n        };\n        /**\n         * Sets the order of the data.\n         * @memberof canvasDatagrid\n         * @name order\n         * @method\n         * @param {number} columnName Name of the column to be sorted.\n         * @param {string} direction `asc` for ascending or `desc` for descending.\n         * @param {function} [sortFunction] When defined, override the default sorting method defined in the column's schema and use this one.\n         * @param {bool} [dontSetStorageData] Don't store this setting for future use.\n         */\n        self.order = function (columnName, direction, sortFunction, dontSetStorageData) {\n            var f,\n                c = self.getSchema().filter(function (col) {\n                    return col.name === columnName;\n                });\n            if (self.dispatchEvent('beforesortcolumn', {name: columnName, direction: direction})) { return; }\n            self.orderBy = columnName;\n            self.orderDirection = direction;\n            if (!self.data || self.data.length === 0) { return; }\n            if (c.length === 0) {\n                throw new Error('Cannot sort.  No such column name');\n            }\n            f = sortFunction || c[0].sorter || self.sorters[c[0].type];\n            if (!f && c[0].type !== undefined) {\n                console.warn('Cannot sort type \"%s\" falling back to string sort.', c[0].type);\n            }\n            self.orderings.add(columnName, direction, (typeof f === 'function' ? f : self.sorters.string));\n            self.orderings.sort();\n            self.dispatchEvent('sortcolumn', {name: columnName, direction: direction});\n            self.draw(true);\n            if (dontSetStorageData) { return; }\n            self.setStorageData();\n        };\n        self.isInGrid = function (e) {\n            if (e.x < 0\n                    || e.x > self.width\n                    || e.y < 0\n                    || e.y > self.height) {\n                return false;\n            }\n            return true;\n        };\n        /**\n         * Moves the current selection relative to the its current position.  Note: this method does not move the selected data, just the selection itself.\n         * @memberof canvasDatagrid\n         * @name moveSelection\n         * @method\n         * @param {number} offsetX The number of columns to offset the selection.\n         * @param {number} offsetY The number of rows to offset the selection.\n         */\n        self.moveSelection = function (offsetX, offsetY) {\n            var sel = [];\n            self.selections.forEach(function (row, rowIndex) {\n                sel[rowIndex + offsetY] = [];\n                row.forEach(function (colIndex) {\n                    sel[rowIndex + offsetY].push(colIndex + offsetX);\n                });\n            });\n            self.selections = sel;\n        };\n        /**\n         * Moves data in the provided selection to another position in the grid.  Moving data off the edge of the schema (columns/x) will truncate data.\n         * @memberof canvasDatagrid\n         * @name moveTo\n         * @method\n         * @param {array} sel 2D array representing selected rows and columns.  `canvasDatagrid.selections` is in this format and can be used here.\n         * @param {number} x The column index to start inserting the selection at.\n         * @param {number} y The row index to start inserting the selection at.\n         */\n        self.moveTo = function (sel, x, y) {\n            var d = self.getSelectedData(),\n                s = self.getVisibleSchema(),\n                l = sel.length,\n                xi,\n                maxRowLength = -Infinity,\n                minXi = Infinity,\n                yi = y - 1;\n            sel.forEach(function (row, index) {\n                if (index === l) { return; }\n                if (row.length === 0) { return; }\n                minXi = Math.min(self.getVisibleColumnIndexOf(x), minXi);\n                maxRowLength = Math.max(maxRowLength, row.length);\n                row.forEach(function (colIndex) {\n                    // intentional redef of colIndex\n                    colIndex = self.getVisibleColumnIndexOf(colIndex);\n                    if (!s[colIndex]) { return; }\n                    if (!self.data[index]) { self.data[index] = {}; }\n                    self.data[index][s[colIndex].name] = null;\n                });\n            });\n            sel.forEach(function (row, index) {\n                var lastSourceIndex;\n                yi += 1;\n                xi = self.getVisibleColumnIndexOf(x);\n                row.forEach(function (colIndex, cidx) {\n                    colIndex = self.getVisibleColumnIndexOf(colIndex);\n                    if (cidx > 0) {\n                        // this confusing bit of nonsense figures out\n                        // if the selection has skipped cells\n                        xi += colIndex - lastSourceIndex;\n                    }\n                    lastSourceIndex = colIndex;\n                    if (colIndex === -1\n                            || !s[xi]\n                            || !s[colIndex]\n                            || self.data.length - 1 < yi\n                            || yi < 0) { return; }\n                    if (!self.data[yi]) { self.data[yi] = {}; }\n                    self.data[yi][s[xi].name] = d[index][s[colIndex].name];\n                });\n            });\n        };\n        /**\n         * Checks if a given column is visible.\n         * @memberof canvasDatagrid\n         * @name isColumnVisible\n         * @method\n         * @returns {boolean} When true, the column is visible.\n         * @param {number} columnIndex Column index.\n         */\n        self.isColumnVisible = function (columnIndex) {\n            return self.visibleCells.filter(function (c) {\n                return c.columnIndex === columnIndex;\n            }).length > 0;\n        };\n        /**\n         * Checks if a given row is visible.\n         * @memberof canvasDatagrid\n         * @name isRowVisible\n         * @method\n         * @returns {boolean} When true, the row is visible.\n         * @param {number} rowIndex Row index.\n         */\n        self.isRowVisible = function (rowIndex) {\n            return self.visibleCells.filter(function (c) {\n                return c.rowIndex === rowIndex;\n            }).length > 0;\n        };\n        /**\n         * Gets the cell at columnIndex and rowIndex.\n         * @memberof canvasDatagrid\n         * @name getVisibleCellByIndex\n         * @method\n         * @returns {cell} cell at the selected location.\n         * @param {number} x Column index.\n         * @param {number} y Row index.\n         */\n        self.getVisibleCellByIndex = function (x, y) {\n            return self.visibleCells.filter(function (c) {\n                return c.columnIndex === x && c.rowIndex === y;\n            })[0];\n        };\n        /**\n         * Gets the cell at grid pixel coordinate x and y.  Author's note.  This function ties drawing and events together.  This is a very complex function and is core to the component.\n         * @memberof canvasDatagrid\n         * @name getCellAt\n         * @method\n         * @returns {cell} cell at the selected location.\n         * @param {number} x Number of pixels from the left.\n         * @param {number} y Number of pixels from the top.\n         */\n        self.getCellAt = function (x, y, useTouchScrollZones) {\n            function getBorder(entitiy) {\n                if (entitiy.x + entitiy.width - (self.attributes.borderResizeZone * 0.4) < x && entitiy.x + entitiy.width + (self.attributes.borderResizeZone * 0.6) > x) {\n                    return 'r';\n                }\n                if (entitiy.x - (self.attributes.borderResizeZone * 0.4) < x && entitiy.x + (self.attributes.borderResizeZone * 0.6) > x) {\n                    return 'l';\n                }\n                if (entitiy.y + entitiy.height - (self.attributes.borderResizeZone * 0.4) < y && entitiy.y + entitiy.height + (self.attributes.borderResizeZone * 0.6) > y) {\n                    return 'b';\n                }\n                if (entitiy.y - (self.attributes.borderResizeZone * 0.4) < y && entitiy.y + (self.attributes.borderResizeZone * 0.6) > y) {\n                    return 't';\n                }\n            }\n            if (!self.visibleCells) { return; }\n            var border,\n                tsz = useTouchScrollZones ? self.attributes.touchScrollZone : 0,\n                moveMode = self.attributes.borderDragBehavior === 'move',\n                i,\n                l = self.visibleCells.length,\n                moveBorder,\n                xBorderBehavior = moveMode ? self.cursorGrab : 'ew-resize',\n                yBorderBehavior = moveMode ? self.cursorGrab : 'ns-resize',\n                cell,\n                entitiy;\n            if (!self.visibleCells || !self.visibleCells.length) { return; }\n            self.hasFocus = true;\n            if (!(y < self.height\n                && y > 0\n                && x < self.width\n                && x > 0)) {\n                self.hasFocus = false;\n                return {\n                    dragContext: 'inherit',\n                    context: 'inherit'\n                };\n            }\n            for (i = 0; i < l; i += 1) {\n                cell = self.visibleCells[i];\n                // interactive dimensions of the cell.  used for touch \"over size\" zones\n                entitiy = {\n                    x: cell.x,\n                    y: cell.y,\n                    height: cell.height,\n                    width: cell.width\n                };\n                if (useTouchScrollZones && /(vertical|horizontal)-scroll-/.test(cell.style)) {\n                    entitiy.x -= tsz;\n                    entitiy.y -= tsz;\n                    entitiy.height += tsz;\n                    entitiy.width += tsz;\n                }\n                if (entitiy.x - self.style.cellBorderWidth < x\n                        && entitiy.x + entitiy.width + self.style.cellBorderWidth > x\n                        && entitiy.y - self.style.cellBorderWidth < y\n                        && entitiy.y + entitiy.height + self.style.cellBorderWidth > y) {\n                    if (/frozen-row-marker/.test(cell.style)) {\n                        cell.dragContext = cell.style;\n                        cell.context = 'row-resize';\n                        return cell;\n                    }\n                    if (/frozen-column-marker/.test(cell.style)) {\n                        cell.dragContext = cell.style;\n                        cell.context = 'col-resize';\n                        return cell;\n                    }\n                    if (/selection-handle-/.test(cell.style)) {\n                        cell.dragContext = cell.style;\n                        cell.context = 'crosshair';\n                        return cell;\n                    }\n                    if (/vertical-scroll-(bar|box)/.test(cell.style)) {\n                        cell.dragContext = 'vertical-scroll-box';\n                        cell.context = 'vertical-scroll-box';\n                        cell.isScrollBar = true;\n                        cell.isVerticalScrollBar = true;\n                        if (y > self.scrollBox.box.v.y + self.scrollBox.scrollBoxHeight) {\n                            cell.dragContext = 'vertical-scroll-bottom';\n                            cell.context = 'vertical-scroll-bottom';\n                        } else if (y < self.scrollBox.box.v.y) {\n                            cell.dragContext = 'vertical-scroll-top';\n                            cell.context = 'vertical-scroll-top';\n                        }\n                        self.cursor = 'default';\n                        return cell;\n                    }\n                    if (/horizontal-scroll-(bar|box)/.test(cell.style)) {\n                        cell.dragContext = 'horizontal-scroll-box';\n                        cell.context = 'horizontal-scroll-box';\n                        cell.isScrollBar = true;\n                        cell.isHorizontalScrollBar = true;\n                        if (x > self.scrollBox.box.h.x + self.scrollBox.scrollBoxWidth) {\n                            cell.dragContext = 'horizontal-scroll-right';\n                            cell.context = 'horizontal-scroll-right';\n                        } else if (x < self.scrollBox.box.h.x) {\n                            cell.dragContext = 'horizontal-scroll-left';\n                            cell.context = 'horizontal-scroll-left';\n                        }\n                        self.cursor = 'default';\n                        return cell;\n                    }\n                    border = getBorder(entitiy);\n                    // check if the border of this cell is the border of the selection and if so show move cursor in move mode\n                    moveBorder = moveMode && cell.selectionBorder && cell.selectionBorder.indexOf(border) !== -1;\n                    if (['l', 'r'].indexOf(border) !== -1\n                            && (self.attributes.allowColumnResize || moveBorder)\n                            && ((self.attributes.allowColumnResizeFromCell && cell.isNormal) || !cell.isNormal || moveBorder)\n                            && ((self.attributes.allowRowHeaderResize && (cell.isRowHeader || cell.isCorner)) || !(cell.isRowHeader && cell.isCorner))) {\n                        if (((cell.isColumnHeader || cell.isCorner) || (self.attributes.allowColumnResizeFromCell && cell.isNormal)) && border === 'r') {\n                            cell.context = 'ew-resize';\n                            cell.dragContext = 'ew-resize';\n                            return cell;\n                        }\n                        if (!(cell.isColumnHeader || cell.isCorner) && moveBorder) {\n                            cell.context = xBorderBehavior;\n                            cell.dragContext = border + '-move';\n                            return cell;\n                        }\n                    }\n                    if (['t', 'b'].indexOf(border) !== -1\n                            && cell.rowIndex > -1\n                            && (self.attributes.allowRowResize || moveBorder)\n                            && ((self.attributes.allowRowResizeFromCell && cell.isNormal) || !cell.isNormal || moveBorder)\n                            && !cell.isColumnHeader) {\n                        if (((cell.isRowHeader || cell.isCorner) || (self.attributes.allowRowResizeFromCell && cell.isNormal)) && border === 'b') {\n                            cell.context = 'ns-resize';\n                            cell.dragContext = 'ns-resize';\n                            return cell;\n                        }\n                        if (!(cell.isRowHeader || cell.isCorner) && moveBorder) {\n                            cell.context = yBorderBehavior;\n                            cell.dragContext = border + '-move';\n                            return cell;\n                        }\n                    }\n                    if (cell.style === 'columnHeaderCell') {\n                        cell.context = 'cell';\n                        cell.dragContext = 'column-reorder';\n                        return cell;\n                    }\n                    if (cell.style === 'rowHeaderCell') {\n                        if ((self.attributes.rowGrabZoneSize + (cell.y - self.style.cellBorderWidth) < y)\n                                || !self.attributes.allowRowReordering) {\n                            cell.dragContext = 'cell';\n                            cell.context = 'cell';\n                        } else {\n                            cell.context = self.cursorGrab;\n                            cell.dragContext = 'row-reorder';\n                        }\n                        return cell;\n                    }\n                    if (cell.isGrid) {\n                        self.hasFocus = false;\n                        cell.dragContext = 'cell-grid';\n                        cell.context = 'cell-grid';\n                        return cell;\n                    }\n                    if (cell.style === 'tree-grid') {\n                        self.hasFocus = false;\n                        cell.dragContext = 'tree';\n                        cell.context = 'tree';\n                        return cell;\n                    }\n                    cell.dragContext = 'cell';\n                    cell.context = 'cell';\n                    return cell;\n                }\n            }\n            self.hasFocus = true;\n            self.cursor = 'default';\n            return {\n                dragContext: 'background',\n                context: 'background',\n                style: 'background',\n                isBackground: true\n            };\n        };\n        /**\n         * Gets the bounds of current selection. \n         * @returns {rect} selection.\n         * @memberof canvasDatagrid\n         * @name getSelectionBounds\n         * @method\n         */\n        self.getSelectionBounds = function () {\n            var low = {x: Infinity, y: Infinity},\n                high = {x: -Infinity, y: -Infinity};\n            self.selections.forEach(function (row, rowIndex) {\n                var maxCol, minCol;\n                low.y = rowIndex < low.y ? rowIndex : low.y;\n                high.y = rowIndex > high.y ? rowIndex : high.y;\n                maxCol = Math.max.apply(null, row);\n                minCol = Math.min.apply(null, row);\n                low.x = minCol < low.x ? minCol : low.x;\n                high.x = maxCol > high.x ? maxCol : high.x;\n            });\n            return {\n                top: low.y,\n                left: low.x,\n                bottom: high.y,\n                right: high.x\n            };\n        };\n        /**\n         * Returns an auto generated schema based on data structure.\n         * @memberof canvasDatagrid\n         * @name getSchemaFromData\n         * @method\n         * @tutorial schema\n         * @returns {schema} schema A schema based on the first item in the data array.\n         */\n        self.getSchemaFromData = function (d) {\n            d = d || self.data;\n            return Object.keys(d[0] || {' ': ''}).map(function mapEachSchemaColumn(key, index) {\n                var type = self.getBestGuessDataType(key, d),\n                    i = {\n                        name: key,\n                        title: isNaN(parseInt(key, 10)) ? key : self.integerToAlpha(key).toUpperCase(),\n                        index: index,\n                        type: type,\n                        filter: self.filter(type)\n                    };\n                if (self.storedSettings\n                        && self.storedSettings.visibility\n                        && self.storedSettings.visibility[i.name] !== undefined) {\n                    i.hidden = !self.storedSettings.visibility[i.name];\n                }\n                return i;\n            });\n        };\n        /**\n         * Clears the change log grid.changes that keeps track of changes to the data set.\n         * This does not undo changes or alter data it is simply a convince array to keep\n         * track of changes made to the data since last this method was called.\n         * @memberof canvasDatagrid\n         * @name clearChangeLog\n         * @method\n         */\n        self.clearChangeLog = function () {\n            self.changes = [];\n        };\n        /**\n         * Selects an area of the grid.\n         * @memberof canvasDatagrid\n         * @name selectArea\n         * @method\n         * @param {rect} bounds A rect object representing the selected values.\n         */\n        self.selectArea = function (bounds, ctrl) {\n            self.selectionBounds = bounds || self.selectionBounds;\n            var ev, x, y, s = self.getSchema();\n            if (!ctrl) {\n                self.selections = [];\n            }\n            if (self.selectionBounds.top < -1\n                    || self.selectionBounds.bottom > self.data.length\n                    || self.selectionBounds.left < -1\n                    || self.selectionBounds.right > s.length) {\n                throw new Error('Impossible selection area');\n            }\n            for (x = self.selectionBounds.top; x <= self.selectionBounds.bottom; x += 1) {\n                self.selections[x] = [];\n                for (y = self.selectionBounds.left; y <= self.selectionBounds.right; y += 1) {\n                    if (self.selections[x].indexOf(y) === -1) {\n                        self.selections[x].push(y);\n                    }\n                }\n            }\n            ev = {\n                selections: self.selections,\n                selectionBounds: self.selectionBounds\n            };\n            Object.defineProperty(ev, 'selectedData', {\n                get: function () {\n                    return self.getSelectedData();\n                }\n            });\n            self.dispatchEvent('selectionchanged', ev);\n        };\n        /**\n         * Returns the maximum text width for a given column by column name.\n         * @memberof canvasDatagrid\n         * @name findColumnMaxTextLength\n         * @method\n         * @returns {number} The number of pixels wide the maximum width value in the selected column.\n         * @param {string} name The name of the column to calculate the value's width of.\n         */\n        self.findColumnMaxTextLength = function (name) {\n            var m = -Infinity;\n            if (name === 'cornerCell') {\n                self.ctx.font = self.style.rowHeaderCellFont;\n                return self.ctx.measureText((self.data.length + (self.attributes.showNewRow ? 1 : 0)).toString()).width\n                    + self.style.autosizePadding + self.style.autosizeHeaderCellPadding\n                    + self.style.rowHeaderCellPaddingRight\n                    + self.style.rowHeaderCellPaddingLeft\n                    + (self.attributes.tree ? self.style.treeArrowWidth\n                        + self.style.treeArrowMarginLeft + self.style.treeArrowMarginRight : 0);\n            }\n            self.getSchema().forEach(function (col) {\n                if (col.name !== name) { return; }\n                self.ctx.font = self.style.columnHeaderCellFont;\n                var t = self.ctx.measureText(col.title || col.name).width\n                    + self.style.headerCellPaddingRight\n                    + self.style.headerCellPaddingLeft;\n                m = t > m ? t : m;\n            });\n            self.data.forEach(function (row) {\n                self.ctx.font = self.style.cellFont;\n                var t = self.ctx.measureText(row[name]).width\n                    + self.style.cellPaddingRight\n                    + self.style.cellPaddingLeft + self.style.cellAutoResizePadding;\n                m = t > m ? t : m;\n            });\n            return m;\n        };\n        /**\n         * Gets the total width of all header columns.\n         * @memberof canvasDatagrid\n         * @name getHeaderWidth\n         * @method\n         */\n        self.getHeaderWidth = function () {\n            return self.getVisibleSchema().reduce(function (total, header) {\n                return total + (header.width || self.style.cellWidth);\n            }, 0);\n        };\n        /**\n         * Gets the height of a row by index.\n         * @memberof canvasDatagrid\n         * @name getRowHeight\n         * @method\n         * @param {number} rowIndex The row index to lookup.\n         */\n        self.getRowHeight = function (rowIndex) {\n            return ((self.sizes.rows[rowIndex]\n                    || self.style.cellHeight) * self.scale);\n        };\n        /**\n         * Gets the width of a column by index.\n         * @memberof canvasDatagrid\n         * @name getColummnWidth\n         * @method\n         * @param {number} columnIndex The column index to lookup.\n         */\n        self.getColummnWidth = function (columnIndex) {\n            return ((self.sizes.columns[columnIndex]\n                    || self.getSchema()[columnIndex].width\n                    || self.style.cellWidth) * self.scale);\n        };\n        self.formatters.string = function cellFormatterString(e) {\n            return e.cell.value !== undefined ? e.cell.value : '';\n        };\n        self.formatters.rowHeaderCell = self.formatters.string;\n        self.formatters.headerCell = self.formatters.string;\n        self.formatters.number = self.formatters.string;\n        self.formatters.int = self.formatters.string;\n        self.formatters.html = self.formatters.string;\n        self.sorters.string = function (columnName, direction) {\n            var asc = direction === 'asc';\n            return function (a, b) {\n                if (a[columnName] === undefined || a[columnName] === null) {\n                    return 1;\n                }\n                if (b[columnName] === undefined || b[columnName] === null) {\n                    return 0;\n                }\n                if (asc) {\n                    if (!a[columnName].localeCompare) { return 1; }\n                    return a[columnName].localeCompare(b[columnName]);\n                }\n                if (!b[columnName].localeCompare) { return 1; }\n                return b[columnName].localeCompare(a[columnName]);\n            };\n        };\n        self.sorters.number = function (columnName, direction) {\n            var asc = direction === 'asc';\n            return function (a, b) {\n                if (asc) {\n                    return a[columnName] - b[columnName];\n                }\n                return b[columnName] - a[columnName];\n            };\n        };\n        self.sorters.date = function (columnName, direction) {\n            var asc = direction === 'asc';\n            return function (a, b) {\n                if (asc) {\n                    return new Date(a[columnName]).getTime()\n                        - new Date(b[columnName]).getTime();\n                }\n                return new Date(b[columnName]).getTime()\n                        - new Date(a[columnName]).getTime();\n            };\n        };\n    };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/publicMethods.js\n// module id = 9\n// module chunks = 0"],"sourceRoot":""}